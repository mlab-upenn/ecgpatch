   1               		.file	"adc_driver.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 133               	.global	ADC_reset
 135               	ADC_reset:
 136               		.stabd	46,0,0
   1:adc_driver.c  **** #include <nrk.h>
   2:adc_driver.c  **** #include <include.h>
   3:adc_driver.c  **** #include <ulib.h>
   4:adc_driver.c  **** #include <stdio.h>
   5:adc_driver.c  **** #include <avr/sleep.h>
   6:adc_driver.c  **** #include <hal.h>
   7:adc_driver.c  **** #include <nrk_error.h>
   8:adc_driver.c  **** #include <nrk_timer.h>
   9:adc_driver.c  **** 
  10:adc_driver.c  **** #include "adc_driver.h"
  11:adc_driver.c  **** 
  12:adc_driver.c  **** 
  13:adc_driver.c  **** void ADC_reset()
  14:adc_driver.c  **** {
 138               	.LM0:
 139               	.LFBB1:
 140               	/* prologue: frame size=0 */
 141               	/* prologue end (size=0) */
 142               	/* epilogue: frame size=0 */
 143 0000 0895      		ret
 144               	/* epilogue end (size=1) */
 145               	/* function ADC_reset size 1 (0) */
 147               	.Lscope1:
 149               		.stabd	78,0,0
 151               	.global	SPI_initialize
 153               	SPI_initialize:
 154               		.stabd	46,0,0
  15:adc_driver.c  ****     // reset the ADC here. We need to connect the ADC pin with
  16:adc_driver.c  ****     // some pin of the micro controller.
  17:adc_driver.c  **** }
  18:adc_driver.c  **** 
  19:adc_driver.c  **** void SPI_initialize()
  20:adc_driver.c  **** {
 156               	.LM1:
 157               	.LFBB2:
 158               	/* prologue: frame size=0 */
 159               	/* prologue end (size=0) */
 160               	/* epilogue: frame size=0 */
 161 0002 0895      		ret
 162               	/* epilogue end (size=1) */
 163               	/* function SPI_initialize size 1 (0) */
 165               	.Lscope2:
 167               		.stabd	78,0,0
 170               	.global	SPI_write_to_register
 172               	SPI_write_to_register:
 173               		.stabd	46,0,0
  21:adc_driver.c  ****     // Set MOSI and SCK output, all others input
  22:adc_driver.c  **** //    DDR_SPI = (1<<DD_MOSI) | (1<<DD_SCK);
  23:adc_driver.c  **** 
  24:adc_driver.c  ****     // Enable SPI, Master, set clock rate fck/16
  25:adc_driver.c  **** //    SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
  26:adc_driver.c  **** }
  27:adc_driver.c  **** 
  28:adc_driver.c  **** void SPI_write_to_register(char cData)
  29:adc_driver.c  **** {
 175               	.LM2:
 176               	.LFBB3:
 177               	/* prologue: frame size=0 */
 178               	/* prologue end (size=0) */
  30:adc_driver.c  ****     //    int q;
  31:adc_driver.c  **** 
  32:adc_driver.c  ****     // Set MOSI and SCK output, all others input
  33:adc_driver.c  ****     //  DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK);
  34:adc_driver.c  **** 
  35:adc_driver.c  ****     //    // Enable SPI, Master, set clock rate fck/16
  36:adc_driver.c  ****     //    SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
  37:adc_driver.c  **** 
  38:adc_driver.c  ****     //    q = SPSR;
  39:adc_driver.c  ****     //    q = SPDR;
  40:adc_driver.c  **** 
  41:adc_driver.c  ****     // Enable the Chip select.
  42:adc_driver.c  ****     PORT_ADC_CS &= ~(1 << PIN_ADC_CS);
 180               	.LM3:
 181 0004 7598      		cbi 46-0x20,5
  43:adc_driver.c  **** 
  44:adc_driver.c  ****     // Start transmission
  45:adc_driver.c  ****     SPDR = cData;
 183               	.LM4:
 184 0006 8EBD      		out 78-0x20,r24
 185               	.L6:
  46:adc_driver.c  **** 
  47:adc_driver.c  ****     // Wait for transmission complete
  48:adc_driver.c  ****     while(!(SPSR & (1<<SPIF)));
 187               	.LM5:
 188 0008 0DB4      		in __tmp_reg__,77-0x20
 189 000a 07FE      		sbrs __tmp_reg__,7
 190 000c 00C0      		rjmp .L6
  49:adc_driver.c  **** 
  50:adc_driver.c  ****     // Disable the chip select.
  51:adc_driver.c  ****     PORT_ADC_CS |= 1 << PIN_ADC_CS;
 192               	.LM6:
 193 000e 759A      		sbi 46-0x20,5
 194               	/* epilogue: frame size=0 */
 195 0010 0895      		ret
 196               	/* epilogue end (size=1) */
 197               	/* function SPI_write_to_register size 7 (6) */
 199               	.Lscope3:
 201               		.stabd	78,0,0
 205               	.global	ADC_read
 207               	ADC_read:
 208               		.stabd	46,0,0
  52:adc_driver.c  **** }
  53:adc_driver.c  **** 
  54:adc_driver.c  **** void ADC_read(char* dataptr, int num_bytes)
  55:adc_driver.c  **** {
 210               	.LM7:
 211               	.LFBB4:
 212               	/* prologue: frame size=0 */
 213               	/* prologue end (size=0) */
 214 0012 AC01      		movw r20,r24
  56:adc_driver.c  ****     int q;
  57:adc_driver.c  ****     int index = 0;
  58:adc_driver.c  **** 
  59:adc_driver.c  ****     // Set MOSI and SCK output, all others input
  60:adc_driver.c  ****     //    DDR_SPI = (1<<DD_MOSI) | (1<< DD_MISO) | (1<<DD_SCK);
  61:adc_driver.c  **** 
  62:adc_driver.c  ****     // Enable the Chip select.
  63:adc_driver.c  ****     PORT_ADC_CS &= ~(1 << PIN_ADC_CS);
 216               	.LM8:
 217 0014 7598      		cbi 46-0x20,5
 218 0016 20E0      		ldi r18,lo8(0)
 219 0018 30E0      		ldi r19,hi8(0)
 220 001a 00C0      		rjmp .L12
 221               	.L13:
  64:adc_driver.c  ****     // Read all the bits
  65:adc_driver.c  ****     for(index = 0; index < num_bytes; index ++)
  66:adc_driver.c  ****     {
  67:adc_driver.c  ****         SPDR = 0xFF;
 223               	.LM9:
 224 001c 8FEF      		ldi r24,lo8(-1)
 225 001e 8EBD      		out 78-0x20,r24
 226               	.L14:
  68:adc_driver.c  **** 
  69:adc_driver.c  ****         // Wait for transmission complete
  70:adc_driver.c  ****         while(!(SPSR & (1<<SPIF)));
 228               	.LM10:
 229 0020 0DB4      		in __tmp_reg__,77-0x20
 230 0022 07FE      		sbrs __tmp_reg__,7
 231 0024 00C0      		rjmp .L14
 232 0026 FA01      		movw r30,r20
 233 0028 E20F      		add r30,r18
 234 002a F31F      		adc r31,r19
  71:adc_driver.c  **** 
  72:adc_driver.c  ****         // receive data from the SPI data register.
  73:adc_driver.c  ****         //ADC_data[index] = SPDR;
  74:adc_driver.c  ****         dataptr[index] = SPDR;
 236               	.LM11:
 237 002c 8EB5      		in r24,78-0x20
 238 002e 8083      		st Z,r24
 240               	.LM12:
 241 0030 2F5F      		subi r18,lo8(-(1))
 242 0032 3F4F      		sbci r19,hi8(-(1))
 243               	.L12:
 244 0034 2617      		cp r18,r22
 245 0036 3707      		cpc r19,r23
 246 0038 04F0      		brlt .L13
  75:adc_driver.c  ****     }
  76:adc_driver.c  **** 
  77:adc_driver.c  ****     // Disable the chip select.
  78:adc_driver.c  ****     PORT_ADC_CS |= 1 << PIN_ADC_CS;
 248               	.LM13:
 249 003a 759A      		sbi 46-0x20,5
 250               	/* epilogue: frame size=0 */
 251 003c 0895      		ret
 252               	/* epilogue end (size=1) */
 253               	/* function ADC_read size 22 (21) */
 258               	.Lscope4:
 260               		.stabd	78,0,0
 262               	.global	ADC_init
 264               	ADC_init:
 265               		.stabd	46,0,0
  79:adc_driver.c  **** }
  80:adc_driver.c  **** void ADC_init()
  81:adc_driver.c  **** {
 267               	.LM14:
 268               	.LFBB5:
 269               	/* prologue: frame size=0 */
 270               	/* prologue end (size=0) */
  82:adc_driver.c  ****     // First Initialize the SPI
  83:adc_driver.c  ****     PORT_SPI &= ~((1 << SCLK) | (1 << MOSI));	// low bits
 272               	.LM15:
 273 003e 85B1      		in r24,37-0x20
 274 0040 897F      		andi r24,lo8(-7)
 275 0042 85B9      		out 37-0x20,r24
  84:adc_driver.c  ****     PORT_SPI |= (1 << MISO);			// high bits
 277               	.LM16:
 278 0044 2B9A      		sbi 37-0x20,3
  85:adc_driver.c  **** 
  86:adc_driver.c  ****     // Set MOSI and SCK output, all others input
  87:adc_driver.c  ****     DDR_SPI = (1<<DD_MOSI) | (1<<DD_SCK);
 280               	.LM17:
 281 0046 86E0      		ldi r24,lo8(6)
 282 0048 84B9      		out 36-0x20,r24
  88:adc_driver.c  **** 
  89:adc_driver.c  ****     // make the Chip select high.
  90:adc_driver.c  ****     PORT_ADC_CS = 1 << PIN_ADC_CS; // Check if i will have to use |= instead of assignment.
 284               	.LM18:
 285 004a 80E2      		ldi r24,lo8(32)
 286 004c 8EB9      		out 46-0x20,r24
  91:adc_driver.c  ****     // Set the data direction of ADC DATA rady pin to in which is 0.
  92:adc_driver.c  ****     DDRE |= (1 << PIN_ADC_CS);
 288               	.LM19:
 289 004e 6D9A      		sbi 45-0x20,5
  93:adc_driver.c  ****     DDRE &= ~(1 << PIN_ADC_DREADY);
 291               	.LM20:
 292 0050 6C98      		cbi 45-0x20,4
  94:adc_driver.c  **** 
  95:adc_driver.c  ****     // Enable SPI, Master, set clock rate fck/16
  96:adc_driver.c  ****     SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 294               	.LM21:
 295 0052 81E5      		ldi r24,lo8(81)
 296 0054 8CBD      		out 76-0x20,r24
  97:adc_driver.c  **** 
  98:adc_driver.c  ****     // Now set the chip select line to low.
  99:adc_driver.c  ****     PORT_ADC_CS &= ~(1 << PIN_ADC_CS);
 298               	.LM22:
 299 0056 7598      		cbi 46-0x20,5
 100:adc_driver.c  ****     // The next few lines are as instructed by AD7705 document page 33.
 101:adc_driver.c  ****     SPI_write_to_register(0x20);
 301               	.LM23:
 302 0058 80E2      		ldi r24,lo8(32)
 303 005a 0E94 0000 		call SPI_write_to_register
 102:adc_driver.c  ****     SPI_write_to_register(0x1D);
 305               	.LM24:
 306 005e 8DE1      		ldi r24,lo8(29)
 307 0060 0E94 0000 		call SPI_write_to_register
 103:adc_driver.c  ****     SPI_write_to_register(0x10);
 309               	.LM25:
 310 0064 80E1      		ldi r24,lo8(16)
 311 0066 0E94 0000 		call SPI_write_to_register
 104:adc_driver.c  ****     SPI_write_to_register(0x00);
 313               	.LM26:
 314 006a 80E0      		ldi r24,lo8(0)
 315 006c 0E94 0000 		call SPI_write_to_register
 105:adc_driver.c  **** 
 106:adc_driver.c  ****     PORT_ADC_CS |= 1 << PIN_ADC_CS;
 317               	.LM27:
 318 0070 759A      		sbi 46-0x20,5
 319               	/* epilogue: frame size=0 */
 320 0072 0895      		ret
 321               	/* epilogue end (size=1) */
 322               	/* function ADC_init size 27 (26) */
 324               	.Lscope5:
 326               		.stabd	78,0,0
 327               		.comm _nrk_signal_list,4,1
 328               		.comm nrk_idle_task_stk,128,1
 329               		.comm nrk_kernel_stk_ptr,2,1
 330               		.comm error_task,1,1
 331               		.comm error_num,1,1
 332               		.comm _nrk_prev_timer_val,1,1
 333               		.comm _nrk_time_trigger,1,1
 334               		.comm app_timer0_callback,2,1
 335               		.comm app_timer0_prescale,1,1
 346               	.Letext0:
 347               	/* File "adc_driver.c": code   58 = 0x003a (  53), prologues   0, epilogues   5 */
DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc_driver.c
     /tmp/ccGgMICg.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccGgMICg.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccGgMICg.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccGgMICg.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGgMICg.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGgMICg.s:135    .text:0000000000000000 ADC_reset
     /tmp/ccGgMICg.s:153    .text:0000000000000002 SPI_initialize
     /tmp/ccGgMICg.s:172    .text:0000000000000004 SPI_write_to_register
     /tmp/ccGgMICg.s:207    .text:0000000000000012 ADC_read
     /tmp/ccGgMICg.s:264    .text:000000000000003e ADC_init
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 app_timer0_prescale

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
