
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800200  0000652e  000065a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000652e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ed  008002ba  000065e8  0000665c  2**0
                  ALLOC
  3 .stab         0000fb04  00000000  00000000  0000665c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006438  00000000  00000000  00016160  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__ctors_end>
       4:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__vector_1>
       8:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
       c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      10:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      14:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      18:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      1c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      20:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      24:	0c 94 97 2c 	jmp	0x592e	; 0x592e <__vector_9>
      28:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      2c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      30:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      34:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <__vector_13>
      38:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      3c:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <__vector_13>
      40:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      44:	0c 94 7d 2a 	jmp	0x54fa	; 0x54fa <__vector_17>
      48:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      4c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      50:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      54:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      58:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      5c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      60:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      64:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      68:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      6c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      70:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      74:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      78:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      7c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      80:	0c 94 87 2a 	jmp	0x550e	; 0x550e <__vector_32>
      84:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      88:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      8c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      90:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__vector_36>
      94:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      98:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      9c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      a0:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      a4:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      a8:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      ac:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      b0:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      b4:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      b8:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      bc:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      c0:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      c4:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      c8:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      cc:	31 1b       	sub	r19, r17
      ce:	35 1b       	sub	r19, r21
      d0:	37 1b       	sub	r19, r23
      d2:	39 1b       	sub	r19, r25
      d4:	3b 1b       	sub	r19, r27
      d6:	3d 1b       	sub	r19, r29
      d8:	42 1b       	sub	r20, r18
      da:	3f 1b       	sub	r19, r31
      dc:	45 1b       	sub	r20, r21
      de:	48 1b       	sub	r20, r24
      e0:	4b 1b       	sub	r20, r27
      e2:	51 1b       	sub	r21, r17
      e4:	54 1b       	sub	r21, r20
      e6:	57 1b       	sub	r21, r23
      e8:	5a 1b       	sub	r21, r26
      ea:	4e 1b       	sub	r20, r30
      ec:	2f 1b       	sub	r18, r31
      ee:	33 1b       	sub	r19, r19

000000f0 <__c.2485>:
      f0:	54 78 20 74 61 73 6b 20 73 65 6e 74 20 64 61 74     Tx task sent dat
     100:	61 21 0d 0a 00                                      a!...

00000105 <__c.2483>:
     105:	4e 4f 20 61 63 6b 20 6f 72 20 52 65 73 65 72 76     NO ack or Reserv
     115:	65 20 56 69 6f 6c 61 74 65 64 21 0d 0a 00           e Violated!...

00000123 <__c.2647>:
     123:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     133:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     143:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

0000014f <__c.2645>:
     14f:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     15f:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     16f:	61 69 6c 65 64 0d 0a 00                             ailed...

00000177 <__c.2643>:
     177:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     187:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     197:	61 69 6c 65 64 0d 0a 00                             ailed...

0000019f <__c.2733>:
     19f:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     1af:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     1bf:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

000001cc <__c.2671>:
     1cc:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     1dc:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     1ec:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000001f8 <__c.2381>:
     1f8:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001ff <__c.2378>:
     1ff:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     20f:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000021a <__c.2375>:
     21a:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     22a:	20 53 69 67 6e 61 6c 00                              Signal.

00000232 <__c.2372>:
     232:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     242:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000252 <__c.2369>:
     252:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     262:	72 6f 72 00                                         ror.

00000266 <__c.2366>:
     266:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000277 <__c.2363>:
     277:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000286 <__c.2360>:
     286:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     296:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002a1 <__c.2357>:
     2a1:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002ad <__c.2354>:
     2ad:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2bd:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2cd:	20 6f 6b 3f 00                                       ok?.

000002d2 <__c.2351>:
     2d2:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2e2:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002f0 <__c.2348>:
     2f0:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     300:	72 74 00                                            rt.

00000303 <__c.2345>:
     303:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     313:	49 44 00                                            ID.

00000316 <__c.2342>:
     316:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     326:	20 57 61 6b 65 75 70 00                              Wakeup.

0000032e <__c.2339>:
     32e:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     33e:	6c 61 74 65 64 00                                   lated.

00000344 <__c.2336>:
     344:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     354:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000035f <__c.2333>:
     35f:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     36f:	69 6e 74 65 72 00                                   inter.

00000375 <__c.2330>:
     375:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     385:	6c 6f 77 00                                         low.

00000389 <__c.2326>:
     389:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     399:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3a9:	6e 6f 75 67 68 21 00                                nough!.

000003b0 <__c.2323>:
     3b0:	29 3a 20 00                                         ): .

000003b4 <__c.2321>:
     3b4:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003c0 <__c.2254>:
     3c0:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003cf <__c.2047>:
     3cf:	45 46 47 65 66 67 00                                EFGefg.

000003d6 <__c.2041>:
     3d6:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003e6 <__ctors_end>:
     3e6:	11 24       	eor	r1, r1
     3e8:	1f be       	out	0x3f, r1	; 63
     3ea:	cf ef       	ldi	r28, 0xFF	; 255
     3ec:	d1 e2       	ldi	r29, 0x21	; 33
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	cd bf       	out	0x3d, r28	; 61

000003f2 <__do_copy_data>:
     3f2:	12 e0       	ldi	r17, 0x02	; 2
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b2 e0       	ldi	r27, 0x02	; 2
     3f8:	ee e2       	ldi	r30, 0x2E	; 46
     3fa:	f5 e6       	ldi	r31, 0x65	; 101
     3fc:	00 e0       	ldi	r16, 0x00	; 0
     3fe:	0b bf       	out	0x3b, r16	; 59
     400:	02 c0       	rjmp	.+4      	; 0x406 <__do_copy_data+0x14>
     402:	07 90       	elpm	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	aa 3b       	cpi	r26, 0xBA	; 186
     408:	b1 07       	cpc	r27, r17
     40a:	d9 f7       	brne	.-10     	; 0x402 <__do_copy_data+0x10>

0000040c <__do_clear_bss>:
     40c:	17 e0       	ldi	r17, 0x07	; 7
     40e:	aa eb       	ldi	r26, 0xBA	; 186
     410:	b2 e0       	ldi	r27, 0x02	; 2
     412:	01 c0       	rjmp	.+2      	; 0x416 <.do_clear_bss_start>

00000414 <.do_clear_bss_loop>:
     414:	1d 92       	st	X+, r1

00000416 <.do_clear_bss_start>:
     416:	a7 3a       	cpi	r26, 0xA7	; 167
     418:	b1 07       	cpc	r27, r17
     41a:	e1 f7       	brne	.-8      	; 0x414 <.do_clear_bss_loop>
     41c:	0e 94 8e 03 	call	0x71c	; 0x71c <main>
     420:	0c 94 96 32 	jmp	0x652c	; 0x652c <_exit>

00000424 <__bad_interrupt>:
     424:	0c 94 b5 2a 	jmp	0x556a	; 0x556a <__vector_default>

00000428 <nrk_create_taskset>:
  }

}

void nrk_create_taskset ()
{
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17


  RX_TASK.task = rx_task;
     42c:	86 e0       	ldi	r24, 0x06	; 6
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	90 93 f1 04 	sts	0x04F1, r25
     434:	80 93 f0 04 	sts	0x04F0, r24
  nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
     438:	0b ee       	ldi	r16, 0xEB	; 235
     43a:	14 e0       	ldi	r17, 0x04	; 4
     43c:	40 e8       	ldi	r20, 0x80	; 128
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	61 e7       	ldi	r22, 0x71	; 113
     442:	73 e0       	ldi	r23, 0x03	; 3
     444:	c8 01       	movw	r24, r16
     446:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <nrk_task_set_stk>
  RX_TASK.prio = 2;
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	80 93 f3 04 	sts	0x04F3, r24
  RX_TASK.FirstActivation = TRUE;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 f2 04 	sts	0x04F2, r24
  RX_TASK.Type = BASIC_TASK;
     456:	80 93 f4 04 	sts	0x04F4, r24
  RX_TASK.SchType = PREEMPTIVE;
     45a:	80 93 f5 04 	sts	0x04F5, r24
  RX_TASK.period.secs = 0;
     45e:	10 92 f6 04 	sts	0x04F6, r1
     462:	10 92 f7 04 	sts	0x04F7, r1
     466:	10 92 f8 04 	sts	0x04F8, r1
     46a:	10 92 f9 04 	sts	0x04F9, r1
  RX_TASK.period.nano_secs = 250 * NANOS_PER_MS;
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	92 eb       	ldi	r25, 0xB2	; 178
     472:	a6 ee       	ldi	r26, 0xE6	; 230
     474:	be e0       	ldi	r27, 0x0E	; 14
     476:	80 93 fa 04 	sts	0x04FA, r24
     47a:	90 93 fb 04 	sts	0x04FB, r25
     47e:	a0 93 fc 04 	sts	0x04FC, r26
     482:	b0 93 fd 04 	sts	0x04FD, r27
  RX_TASK.cpu_reserve.secs = 1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	80 93 fe 04 	sts	0x04FE, r24
     492:	90 93 ff 04 	sts	0x04FF, r25
     496:	a0 93 00 05 	sts	0x0500, r26
     49a:	b0 93 01 05 	sts	0x0501, r27
  RX_TASK.cpu_reserve.nano_secs = 200 * NANOS_PER_MS;
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	92 ec       	ldi	r25, 0xC2	; 194
     4a2:	ab ee       	ldi	r26, 0xEB	; 235
     4a4:	bb e0       	ldi	r27, 0x0B	; 11
     4a6:	80 93 02 05 	sts	0x0502, r24
     4aa:	90 93 03 05 	sts	0x0503, r25
     4ae:	a0 93 04 05 	sts	0x0504, r26
     4b2:	b0 93 05 05 	sts	0x0505, r27
  RX_TASK.offset.secs = 0;
     4b6:	10 92 06 05 	sts	0x0506, r1
     4ba:	10 92 07 05 	sts	0x0507, r1
     4be:	10 92 08 05 	sts	0x0508, r1
     4c2:	10 92 09 05 	sts	0x0509, r1
  RX_TASK.offset.nano_secs = 0;
     4c6:	10 92 0a 05 	sts	0x050A, r1
     4ca:	10 92 0b 05 	sts	0x050B, r1
     4ce:	10 92 0c 05 	sts	0x050C, r1
     4d2:	10 92 0d 05 	sts	0x050D, r1
  nrk_activate_task (&RX_TASK);
     4d6:	c8 01       	movw	r24, r16
     4d8:	0e 94 b4 22 	call	0x4568	; 0x4568 <nrk_activate_task>
  /* TX_TASK.offset.nano_secs = 0; */
  /* nrk_activate_task (&TX_TASK); */



  printf ("Create done\r\n");
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	08 95       	ret

000004ea <tx_task>:
}

uint8_t ctr_cnt[4];

void tx_task ()
{
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
  int8_t v;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;
  nrk_time_t r_period;

  printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     500:	0e 94 b6 20 	call	0x416c	; 0x416c <nrk_get_pid>
     504:	99 27       	eor	r25, r25
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	8d e0       	ldi	r24, 0x0D	; 13
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	02 c0       	rjmp	.+4      	; 0x524 <tx_task+0x3a>
    nrk_wait_until_next_period ();
     520:	0e 94 76 22 	call	0x44ec	; 0x44ec <nrk_wait_until_next_period>
  printf ("tx_task PID=%d\r\n", nrk_get_pid ());

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     524:	0e 94 4d 04 	call	0x89a	; 0x89a <bmac_started>
     528:	88 23       	and	r24, r24
     52a:	d1 f3       	breq	.-12     	; 0x520 <tx_task+0x36>
  // if(v==NRK_ERROR) nrk_kprintf( PSTR("Error setting b-mac tx reservation (is NRK_MAX_RESERVES defined?)\r\n" ));


  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
     52c:	0e 94 be 05 	call	0xb7c	; 0xb7c <bmac_get_tx_done_signal>
  nrk_signal_register (tx_done_signal);
     530:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <nrk_signal_register>

  ctr_cnt[0]=0; ctr_cnt[1]=0; ctr_cnt[2]=0; ctr_cnt[3]=0;
     534:	10 92 fd 03 	sts	0x03FD, r1
     538:	10 92 fe 03 	sts	0x03FE, r1
     53c:	10 92 ff 03 	sts	0x03FF, r1
     540:	10 92 00 04 	sts	0x0400, r1
     544:	10 e0       	ldi	r17, 0x00	; 0
  cnt = 0;
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "This is a test %d", cnt);
     546:	c7 e7       	ldi	r28, 0x77	; 119
     548:	d4 e0       	ldi	r29, 0x04	; 4
     54a:	3e e1       	ldi	r19, 0x1E	; 30
     54c:	83 2e       	mov	r8, r19
     54e:	32 e0       	ldi	r19, 0x02	; 2
     550:	93 2e       	mov	r9, r19
     552:	2d ef       	ldi	r18, 0xFD	; 253
     554:	a2 2e       	mov	r10, r18
     556:	23 e0       	ldi	r18, 0x03	; 3
     558:	b2 2e       	mov	r11, r18
     55a:	95 e0       	ldi	r25, 0x05	; 5
     55c:	c9 2e       	mov	r12, r25
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	d9 2e       	mov	r13, r25
     562:	80 ef       	ldi	r24, 0xF0	; 240
     564:	e8 2e       	mov	r14, r24
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	f8 2e       	mov	r15, r24
     56a:	81 2f       	mov	r24, r17
     56c:	99 27       	eor	r25, r25
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	9f 92       	push	r9
     574:	8f 92       	push	r8
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	0e 94 24 30 	call	0x6048	; 0x6048 <sprintf>
    nrk_led_set (BLUE_LED);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <nrk_led_set>
    // bmac_addr_decode_set_my_mac(uint16_t MAC_ADDR); 
    // bmac_addr_decode_dest_mac(uint16_t DST_ADDR);  // 0xFFFF is broadcast
    // bmac_addr_decode_enable();
    // bmac_addr_decode_disable();

     ctr_cnt[0]=cnt; 
     586:	10 93 fd 03 	sts	0x03FD, r17
     if(ctr_cnt[0]==255) ctr_cnt[1]++; 
     58a:	8d b7       	in	r24, 0x3d	; 61
     58c:	9e b7       	in	r25, 0x3e	; 62
     58e:	06 96       	adiw	r24, 0x06	; 6
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	9e bf       	out	0x3e, r25	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	8d bf       	out	0x3d, r24	; 61
     59a:	1f 3f       	cpi	r17, 0xFF	; 255
     59c:	29 f4       	brne	.+10     	; 0x5a8 <tx_task+0xbe>
     59e:	80 91 fe 03 	lds	r24, 0x03FE
     5a2:	8f 5f       	subi	r24, 0xFF	; 255
     5a4:	80 93 fe 03 	sts	0x03FE, r24
     if(ctr_cnt[1]==255) ctr_cnt[2]++; 
     5a8:	80 91 fe 03 	lds	r24, 0x03FE
     5ac:	8f 3f       	cpi	r24, 0xFF	; 255
     5ae:	29 f4       	brne	.+10     	; 0x5ba <tx_task+0xd0>
     5b0:	80 91 ff 03 	lds	r24, 0x03FF
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	80 93 ff 03 	sts	0x03FF, r24
     if(ctr_cnt[2]==255) ctr_cnt[3]++; 
     5ba:	80 91 ff 03 	lds	r24, 0x03FF
     5be:	8f 3f       	cpi	r24, 0xFF	; 255
     5c0:	29 f4       	brne	.+10     	; 0x5cc <tx_task+0xe2>
     5c2:	80 91 00 04 	lds	r24, 0x0400
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
     5c8:	80 93 00 04 	sts	0x0400, r24
     // You need to increase the ctr on each packet to make the 
     // stream cipher not repeat.
     bmac_encryption_set_ctr_counter(&ctr_cnt,4);
     5cc:	64 e0       	ldi	r22, 0x04	; 4
     5ce:	c5 01       	movw	r24, r10
     5d0:	0e 94 55 07 	call	0xeaa	; 0xeaa <bmac_encryption_set_ctr_counter>

    // For blocking transmits, use the following function call.
    // For this there is no need to register  
     val=bmac_tx_pkt(tx_buf, strlen(tx_buf));
     5d4:	fe 01       	movw	r30, r28
     5d6:	01 90       	ld	r0, Z+
     5d8:	00 20       	and	r0, r0
     5da:	e9 f7       	brne	.-6      	; 0x5d6 <tx_task+0xec>
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	e7 57       	subi	r30, 0x77	; 119
     5e0:	f4 40       	sbci	r31, 0x04	; 4
     5e2:	6e 2f       	mov	r22, r30
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 f6 05 	call	0xbec	; 0xbec <bmac_tx_pkt>
     if(val==NRK_OK) cnt++;
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	11 f4       	brne	.+4      	; 0x5f2 <tx_task+0x108>
     5ee:	1f 5f       	subi	r17, 0xFF	; 255
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <tx_task+0x10e>
     else nrk_kprintf( PSTR( "NO ack or Reserve Violated!\r\n" ));
     5f2:	c6 01       	movw	r24, r12
     5f4:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
   
    // If you want to see your remaining reservation
    // printf( "reserve=%d ",bmac_tx_reserve_get() );
    
    // Task gets control again after TX complete
    nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
     5f8:	c7 01       	movw	r24, r14
     5fa:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
    nrk_led_clr (BLUE_LED);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
    nrk_wait_until_next_period ();
     606:	0e 94 76 22 	call	0x44ec	; 0x44ec <nrk_wait_until_next_period>
     60a:	af cf       	rjmp	.-162    	; 0x56a <tx_task+0x80>

0000060c <rx_task>:

  return 0;
}

void rx_task ()
{
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	60 97       	sbiw	r28, 0x10	; 16
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
  int value = 0;
  AccelReading accelReading;
  //printf ("rx_task PID=%d\r\n", nrk_get_pid ());

  // init bmac on channel 20 
  bmac_init (20);
     630:	84 e1       	ldi	r24, 0x14	; 20
     632:	0e 94 47 06 	call	0xc8e	; 0xc8e <bmac_init>
  //bmac_encryption_enable();
  // bmac_encryption_disable();

  // By default the RX check rate is 100ms
  // below shows how to change that
  check_period.secs=0;
     636:	19 86       	std	Y+9, r1	; 0x09
     638:	1a 86       	std	Y+10, r1	; 0x0a
     63a:	1b 86       	std	Y+11, r1	; 0x0b
     63c:	1c 86       	std	Y+12, r1	; 0x0c
  check_period.nano_secs=CSMA_CHECK_PERIOD*NANOS_PER_MS;
     63e:	80 e4       	ldi	r24, 0x40	; 64
     640:	98 e7       	ldi	r25, 0x78	; 120
     642:	ad e7       	ldi	r26, 0x7D	; 125
     644:	b1 e0       	ldi	r27, 0x01	; 1
     646:	8d 87       	std	Y+13, r24	; 0x0d
     648:	9e 87       	std	Y+14, r25	; 0x0e
     64a:	af 87       	std	Y+15, r26	; 0x0f
     64c:	b8 8b       	std	Y+16, r27	; 0x10
  val=bmac_set_rx_check_rate(check_period);
     64e:	29 85       	ldd	r18, Y+9	; 0x09
     650:	3a 85       	ldd	r19, Y+10	; 0x0a
     652:	4b 85       	ldd	r20, Y+11	; 0x0b
     654:	5c 85       	ldd	r21, Y+12	; 0x0c
     656:	6d 85       	ldd	r22, Y+13	; 0x0d
     658:	7e 85       	ldd	r23, Y+14	; 0x0e
     65a:	8f 85       	ldd	r24, Y+15	; 0x0f
     65c:	98 89       	ldd	r25, Y+16	; 0x10
     65e:	0e 94 09 04 	call	0x812	; 0x812 <bmac_set_rx_check_rate>

  bmac_addr_decode_set_my_mac(1);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 07 07 	call	0xe0e	; 0xe0e <bmac_addr_decode_set_my_mac>
  bmac_addr_decode_enable();
     66a:	0e 94 0c 07 	call	0xe18	; 0xe18 <bmac_addr_decode_enable>
  bmac_auto_ack_enable();
     66e:	0e 94 16 07 	call	0xe2c	; 0xe2c <bmac_auto_ack_enable>

  //if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
  // This sets the next RX buffer.
  // This can be called at anytime before releaseing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     672:	64 e7       	ldi	r22, 0x74	; 116
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	94 e0       	ldi	r25, 0x04	; 4
     678:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <bmac_rx_pkt_set_buffer>
  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     67c:	52 e0       	ldi	r21, 0x02	; 2
     67e:	a5 2e       	mov	r10, r21
     680:	b1 2c       	mov	r11, r1
     682:	ac 0e       	add	r10, r28
     684:	bd 1e       	adc	r11, r29
     686:	6e 01       	movw	r12, r28
     688:	08 94       	sec
     68a:	c1 1c       	adc	r12, r1
     68c:	d1 1c       	adc	r13, r1
      if(value < 0) value = -32768 - value;
      else value = 32768 - value;
      //  printf("%d,%d, \n\r",value,rx_buf[0]);
    }

    memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
     68e:	43 e0       	ldi	r20, 0x03	; 3
     690:	e4 2e       	mov	r14, r20
     692:	f1 2c       	mov	r15, r1
     694:	ec 0e       	add	r14, r28
     696:	fd 1e       	adc	r15, r29
    printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);
     698:	00 e3       	ldi	r16, 0x30	; 48
     69a:	12 e0       	ldi	r17, 0x02	; 2
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
     69c:	0e 94 d2 05 	call	0xba4	; 0xba4 <bmac_wait_until_rx_pkt>
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <nrk_led_set>
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     6a8:	b5 01       	movw	r22, r10
     6aa:	c6 01       	movw	r24, r12
     6ac:	0e 94 b2 07 	call	0xf64	; 0xf64 <bmac_rx_pkt_get>
    //if( bmac_rx_pkt_is_encrypted()==1 ) nrk_kprintf( PSTR( "Packet Encrypted\r\n" ));
   // printf ("Got RX packet len=%d RSSI=%d\n\r", len, rssi);
    for (i = 1; i < len - sizeof(AccelReading); i+=2) {
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	28 2f       	mov	r18, r24
     6b4:	33 27       	eor	r19, r19
     6b6:	b9 01       	movw	r22, r18
     6b8:	66 50       	subi	r22, 0x06	; 6
     6ba:	70 40       	sbci	r23, 0x00	; 0
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <rx_task+0xb6>
     6c0:	4e 5f       	subi	r20, 0xFE	; 254
     6c2:	84 2f       	mov	r24, r20
     6c4:	99 27       	eor	r25, r25
     6c6:	86 17       	cp	r24, r22
     6c8:	97 07       	cpc	r25, r23
     6ca:	d0 f3       	brcs	.-12     	; 0x6c0 <rx_task+0xb4>
      if(value < 0) value = -32768 - value;
      else value = 32768 - value;
      //  printf("%d,%d, \n\r",value,rx_buf[0]);
    }

    memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
     6cc:	d7 01       	movw	r26, r14
     6ce:	f9 01       	movw	r30, r18
     6d0:	e5 50       	subi	r30, 0x05	; 5
     6d2:	fc 4f       	sbci	r31, 0xFC	; 252
     6d4:	86 e0       	ldi	r24, 0x06	; 6
     6d6:	01 90       	ld	r0, Z+
     6d8:	0d 92       	st	X+, r0
     6da:	81 50       	subi	r24, 0x01	; 1
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <rx_task+0xca>
    printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);
     6de:	8f 81       	ldd	r24, Y+7	; 0x07
     6e0:	98 85       	ldd	r25, Y+8	; 0x08
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	8d 81       	ldd	r24, Y+5	; 0x05
     6e8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	1f 93       	push	r17
     6f8:	0f 93       	push	r16
     6fa:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>

    nrk_led_clr (ORANGE_LED);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
     706:	0e 94 00 04 	call	0x800	; 0x800 <bmac_rx_pkt_release>
  }
     70a:	8d b7       	in	r24, 0x3d	; 61
     70c:	9e b7       	in	r25, 0x3e	; 62
     70e:	08 96       	adiw	r24, 0x08	; 8
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	9e bf       	out	0x3e, r25	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	8d bf       	out	0x3d, r24	; 61
     71a:	c0 cf       	rjmp	.-128    	; 0x69c <rx_task+0x90>

0000071c <main>:
uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
//uint8_t aes_key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 0x0f};

int main ()
{
     71c:	cf ef       	ldi	r28, 0xFF	; 255
     71e:	d1 e2       	ldi	r29, 0x21	; 33
     720:	de bf       	out	0x3e, r29	; 62
     722:	cd bf       	out	0x3d, r28	; 61
  uint16_t div;
  nrk_setup_ports ();
     724:	0e 94 24 13 	call	0x2648	; 0x2648 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
     728:	87 e0       	ldi	r24, 0x07	; 7
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <nrk_setup_uart>

  nrk_init ();
     730:	0e 94 17 1a 	call	0x342e	; 0x342e <nrk_init>

  nrk_led_clr (0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
  nrk_led_clr (1);
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
  nrk_led_clr (2);
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
  nrk_led_clr (3);
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>

  nrk_time_set (0, 0);
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 18 24 	call	0x4830	; 0x4830 <nrk_time_set>

  bmac_task_config ();
     768:	0e 94 66 04 	call	0x8cc	; 0x8cc <bmac_task_config>

  nrk_create_taskset ();
     76c:	0e 94 14 02 	call	0x428	; 0x428 <nrk_create_taskset>
  nrk_start ();
     770:	0e 94 b7 19 	call	0x336e	; 0x336e <nrk_start>

  return 0;
}
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0c 94 96 32 	jmp	0x652c	; 0x652c <_exit>

0000077c <bmac_tx_busy>:
uint8_t g_chan;
uint8_t is_enabled;

nrk_time_t _bmac_check_period;

uint8_t bmac_tx_busy() {return tx_data_ready;};
     77c:	80 91 41 06 	lds	r24, 0x0641
     780:	99 27       	eor	r25, r25
     782:	08 95       	ret

00000784 <bmac_got_ack>:

uint8_t bmac_got_ack() {return pkt_got_ack;};
     784:	80 91 4a 06 	lds	r24, 0x064A
     788:	99 27       	eor	r25, r25
     78a:	08 95       	ret

0000078c <rf_rx_callback>:

/**
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
     78c:	08 95       	ret

0000078e <bmac_addr_decode_dest_mac>:
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
     78e:	90 93 f2 03 	sts	0x03F2, r25
     792:	80 93 f1 03 	sts	0x03F1, r24
return NRK_OK;
}
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	08 95       	ret

0000079c <bmac_set_cca_active>:
return NRK_OK;
}

void bmac_set_cca_active(uint8_t active)
{
cca_active=active;
     79c:	80 93 4a 03 	sts	0x034A, r24
     7a0:	08 95       	ret

000007a2 <bmac_rx_pkt_set_buffer>:
else return NRK_OK;
}

int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{
if(buf==NULL) return NRK_ERROR;
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	19 f4       	brne	.+6      	; 0x7ac <bmac_rx_pkt_set_buffer+0xa>
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	9f ef       	ldi	r25, 0xFF	; 255
     7aa:	08 95       	ret
    bmac_rfRxInfo.pPayload = buf;
     7ac:	90 93 b9 05 	sts	0x05B9, r25
     7b0:	80 93 b8 05 	sts	0x05B8, r24
    bmac_rfRxInfo.max_length = size;
     7b4:	60 93 b7 05 	sts	0x05B7, r22
    rx_buf_empty=1;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 4c 06 	sts	0x064C, r24
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     7c2:	08 95       	ret

000007c4 <bmac_tx_pkt_nonblocking>:
    is_enabled=1;
    return NRK_OK;
}

int8_t bmac_tx_pkt_nonblocking(uint8_t *buf, uint8_t len)
{
     7c4:	9c 01       	movw	r18, r24
  if(tx_data_ready==1) return NRK_ERROR;
     7c6:	80 91 41 06 	lds	r24, 0x0641
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	19 f4       	brne	.+6      	; 0x7d4 <bmac_tx_pkt_nonblocking+0x10>
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	08 95       	ret
  tx_data_ready=1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 41 06 	sts	0x0641, r24
  bmac_rfTxInfo.pPayload=buf;
     7da:	30 93 f5 03 	sts	0x03F5, r19
     7de:	20 93 f4 03 	sts	0x03F4, r18
  bmac_rfTxInfo.length=len;
     7e2:	60 93 f3 03 	sts	0x03F3, r22
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     7ea:	08 95       	ret

000007ec <bmac_rx_pkt_ready>:
  *rssi=bmac_rfRxInfo.rssi;
  return bmac_rfRxInfo.pPayload;
}

int8_t bmac_rx_pkt_ready(void)
{
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	80 91 4c 06 	lds	r24, 0x064C
     7f4:	88 23       	and	r24, r24
     7f6:	11 f4       	brne	.+4      	; 0x7fc <bmac_rx_pkt_ready+0x10>
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	30 e0       	ldi	r19, 0x00	; 0
return (!rx_buf_empty);
}
     7fc:	c9 01       	movw	r24, r18
     7fe:	08 95       	ret

00000800 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release(void)
{
    rx_buf_empty=1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 4c 06 	sts	0x064C, r24
return NRK_OK;
}
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	08 95       	ret

0000080c <bmac_disable>:

void bmac_disable()
{
  is_enabled=0;
     80c:	10 92 40 06 	sts	0x0640, r1
     810:	08 95       	ret

00000812 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate(nrk_time_t period)
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	28 97       	sbiw	r28, 0x08	; 8
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	29 83       	std	Y+1, r18	; 0x01
     828:	3a 83       	std	Y+2, r19	; 0x02
     82a:	4b 83       	std	Y+3, r20	; 0x03
     82c:	5c 83       	std	Y+4, r21	; 0x04
     82e:	6d 83       	std	Y+5, r22	; 0x05
     830:	7e 83       	std	Y+6, r23	; 0x06
     832:	8f 83       	std	Y+7, r24	; 0x07
     834:	98 87       	std	Y+8, r25	; 0x08
     836:	2d 81       	ldd	r18, Y+5	; 0x05
     838:	3e 81       	ldd	r19, Y+6	; 0x06
     83a:	4f 81       	ldd	r20, Y+7	; 0x07
     83c:	58 85       	ldd	r21, Y+8	; 0x08
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	ab 81       	ldd	r26, Y+3	; 0x03
     844:	bc 81       	ldd	r27, Y+4	; 0x04
if(period.secs==0 && period.nano_secs < BMAC_MIN_CHECK_RATE_MS*NANOS_PER_MS)
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	a1 05       	cpc	r26, r1
     84a:	b1 05       	cpc	r27, r1
     84c:	59 f4       	brne	.+22     	; 0x864 <bmac_set_rx_check_rate+0x52>
     84e:	20 30       	cpi	r18, 0x00	; 0
     850:	6d e2       	ldi	r22, 0x2D	; 45
     852:	36 07       	cpc	r19, r22
     854:	61 e3       	ldi	r22, 0x31	; 49
     856:	46 07       	cpc	r20, r22
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	56 07       	cpc	r21, r22
     85c:	18 f4       	brcc	.+6      	; 0x864 <bmac_set_rx_check_rate+0x52>
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	9f ef       	ldi	r25, 0xFF	; 255
     862:	12 c0       	rjmp	.+36     	; 0x888 <bmac_set_rx_check_rate+0x76>
	return NRK_ERROR;
_bmac_check_period.secs=period.secs;
     864:	80 93 42 06 	sts	0x0642, r24
     868:	90 93 43 06 	sts	0x0643, r25
     86c:	a0 93 44 06 	sts	0x0644, r26
     870:	b0 93 45 06 	sts	0x0645, r27
_bmac_check_period.nano_secs=period.nano_secs;
     874:	20 93 46 06 	sts	0x0646, r18
     878:	30 93 47 06 	sts	0x0647, r19
     87c:	40 93 48 06 	sts	0x0648, r20
     880:	50 93 49 06 	sts	0x0649, r21
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	28 96       	adiw	r28, 0x08	; 8
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <bmac_started>:
return NRK_OK;
}

int8_t bmac_started()
{
     89a:	80 91 3f 06 	lds	r24, 0x063F
return bmac_running;
}
     89e:	99 27       	eor	r25, r25
     8a0:	87 fd       	sbrc	r24, 7
     8a2:	90 95       	com	r25
     8a4:	08 95       	ret

000008a6 <_b_pow>:

uint8_t _b_pow(uint8_t in)
{
uint8_t i;
uint8_t result;
if(in<=1) return 1;
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	18 f4       	brcc	.+6      	; 0x8b0 <_b_pow+0xa>
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	08 95       	ret
if(in>7) in=6; // cap it at 128 
     8b0:	88 30       	cpi	r24, 0x08	; 8
     8b2:	08 f0       	brcs	.+2      	; 0x8b6 <_b_pow+0x10>
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
result=1;
for(i=0; i<in; i++ )
  result=result*2;
     8bc:	99 0f       	add	r25, r25
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t i;
uint8_t result;
if(in<=1) return 1;
if(in>7) in=6; // cap it at 128 
result=1;
for(i=0; i<in; i++ )
     8c2:	28 17       	cp	r18, r24
     8c4:	d8 f3       	brcs	.-10     	; 0x8bc <_b_pow+0x16>
  result=result*2;
return result;
     8c6:	89 2f       	mov	r24, r25
     8c8:	99 27       	eor	r25, r25
}
     8ca:	08 95       	ret

000008cc <bmac_task_config>:


void bmac_task_config ()
{
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
    nrk_task_set_entry_function( &bmac_task, bmac_nw_task);
     8d0:	0d e4       	ldi	r16, 0x4D	; 77
     8d2:	13 e0       	ldi	r17, 0x03	; 3
     8d4:	6f e5       	ldi	r22, 0x5F	; 95
     8d6:	77 e0       	ldi	r23, 0x07	; 7
     8d8:	c8 01       	movw	r24, r16
     8da:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <nrk_task_set_entry_function>
    nrk_task_set_stk( &bmac_task, bmac_task_stack, BMAC_STACK_SIZE);
     8de:	40 e8       	ldi	r20, 0x80	; 128
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	62 e3       	ldi	r22, 0x32	; 50
     8e4:	75 e0       	ldi	r23, 0x05	; 5
     8e6:	c8 01       	movw	r24, r16
     8e8:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <nrk_task_set_stk>
    bmac_task.prio = BMAC_TASK_PRIORITY;
     8ec:	84 e1       	ldi	r24, 0x14	; 20
     8ee:	80 93 55 03 	sts	0x0355, r24
    bmac_task.FirstActivation = TRUE;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 54 03 	sts	0x0354, r24
    bmac_task.Type = BASIC_TASK;
     8f8:	80 93 56 03 	sts	0x0356, r24
    bmac_task.SchType = PREEMPTIVE;
     8fc:	80 93 57 03 	sts	0x0357, r24
    bmac_task.period.secs = 0;
     900:	10 92 58 03 	sts	0x0358, r1
     904:	10 92 59 03 	sts	0x0359, r1
     908:	10 92 5a 03 	sts	0x035A, r1
     90c:	10 92 5b 03 	sts	0x035B, r1
    bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	9d e2       	ldi	r25, 0x2D	; 45
     914:	a1 e3       	ldi	r26, 0x31	; 49
     916:	b1 e0       	ldi	r27, 0x01	; 1
     918:	80 93 5c 03 	sts	0x035C, r24
     91c:	90 93 5d 03 	sts	0x035D, r25
     920:	a0 93 5e 03 	sts	0x035E, r26
     924:	b0 93 5f 03 	sts	0x035F, r27
    bmac_task.cpu_reserve.secs = 10;      // bmac reserve , 0 to disable
     928:	8a e0       	ldi	r24, 0x0A	; 10
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	a0 e0       	ldi	r26, 0x00	; 0
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	80 93 60 03 	sts	0x0360, r24
     934:	90 93 61 03 	sts	0x0361, r25
     938:	a0 93 62 03 	sts	0x0362, r26
     93c:	b0 93 63 03 	sts	0x0363, r27
    bmac_task.cpu_reserve.nano_secs = 0;
     940:	10 92 64 03 	sts	0x0364, r1
     944:	10 92 65 03 	sts	0x0365, r1
     948:	10 92 66 03 	sts	0x0366, r1
     94c:	10 92 67 03 	sts	0x0367, r1
    bmac_task.offset.secs = 0;
     950:	10 92 68 03 	sts	0x0368, r1
     954:	10 92 69 03 	sts	0x0369, r1
     958:	10 92 6a 03 	sts	0x036A, r1
     95c:	10 92 6b 03 	sts	0x036B, r1
    bmac_task.offset.nano_secs = 0;
     960:	10 92 6c 03 	sts	0x036C, r1
     964:	10 92 6d 03 	sts	0x036D, r1
     968:	10 92 6e 03 	sts	0x036E, r1
     96c:	10 92 6f 03 	sts	0x036F, r1
    #ifdef DEBUG
    printf( "bmac activate\r\n" );
    #endif 
    nrk_activate_task (&bmac_task);
     970:	c8 01       	movw	r24, r16
     972:	0e 94 b4 22 	call	0x4568	; 0x4568 <nrk_activate_task>
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	08 95       	ret

0000097c <bmac_enable>:
  is_enabled=0;
}

void bmac_enable()
{
  is_enabled=1;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 40 06 	sts	0x0640, r24
  nrk_event_signal (bmac_enable_signal);
     982:	80 91 70 03 	lds	r24, 0x0370
     986:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <nrk_event_signal>
     98a:	08 95       	ret

0000098c <_bmac_channel_check>:
{
return bmac_running;
}

int8_t _bmac_channel_check()
{
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
int8_t val;
rf_polling_rx_on();
     990:	0e 94 be 0c 	call	0x197c	; 0x197c <rf_polling_rx_on>
nrk_spin_wait_us(250);
     994:	8a ef       	ldi	r24, 0xFA	; 250
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
val=CCA_IS_1;
     99c:	09 b1       	in	r16, 0x09	; 9
rf_rx_off(); 	
     99e:	0e 94 a6 0c 	call	0x194c	; 0x194c <rf_rx_off>
     9a2:	11 27       	eor	r17, r17
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	16 95       	lsr	r17
     9a8:	07 95       	ror	r16
     9aa:	8a 95       	dec	r24
     9ac:	e1 f7       	brne	.-8      	; 0x9a6 <_bmac_channel_check+0x1a>
return val;

}
     9ae:	c8 01       	movw	r24, r16
     9b0:	81 70       	andi	r24, 0x01	; 1
     9b2:	90 70       	andi	r25, 0x00	; 0
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	08 95       	ret

000009ba <_bmac_tx>:
return 0;
}


int8_t _bmac_tx()
{
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
uint16_t b;

#ifdef DEBUG
nrk_kprintf( PSTR("_bmac_tx()\r\n"));
#endif
if(cca_active)
     9c2:	80 91 4a 03 	lds	r24, 0x034A
     9c6:	88 23       	and	r24, r24
     9c8:	09 f4       	brne	.+2      	; 0x9cc <_bmac_tx+0x12>
     9ca:	63 c0       	rjmp	.+198    	; 0xa92 <_bmac_tx+0xd8>
{

// Add random time here to stop nodes from synchronizing with eachother
b=_nrk_time_to_ticks(_bmac_check_period);
     9cc:	20 91 42 06 	lds	r18, 0x0642
     9d0:	30 91 43 06 	lds	r19, 0x0643
     9d4:	40 91 44 06 	lds	r20, 0x0644
     9d8:	50 91 45 06 	lds	r21, 0x0645
     9dc:	60 91 46 06 	lds	r22, 0x0646
     9e0:	70 91 47 06 	lds	r23, 0x0647
     9e4:	80 91 48 06 	lds	r24, 0x0648
     9e8:	90 91 49 06 	lds	r25, 0x0649
     9ec:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
     9f0:	8c 01       	movw	r16, r24
b=b/((rand()%10)+1);
     9f2:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <rand>
//printf( "waiting %d\r\n",b );
nrk_wait_until_ticks(b);
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
     9fe:	bc 01       	movw	r22, r24
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	c8 01       	movw	r24, r16
     a06:	0e 94 e7 31 	call	0x63ce	; 0x63ce <__udivmodhi4>
     a0a:	cb 01       	movw	r24, r22
     a0c:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <nrk_wait_until_ticks>
     a10:	ff 24       	eor	r15, r15
     a12:	f3 94       	inc	r15
//nrk_wait_ticks(b);

	backoff_count=1;
	do{
	v=_bmac_channel_check();
     a14:	0e 94 c6 04 	call	0x98c	; 0x98c <_bmac_channel_check>
     a18:	e8 2e       	mov	r14, r24
	if(v==1) break;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	e8 16       	cp	r14, r24
     a1e:	c9 f1       	breq	.+114    	; 0xa92 <_bmac_tx+0xd8>
	// Channel is busy
	backoff=rand()%(_b_pow(backoff_count));
     a20:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <rand>
     a24:	8c 01       	movw	r16, r24
     a26:	8f 2d       	mov	r24, r15
     a28:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_b_pow>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
     a2c:	68 2f       	mov	r22, r24
     a2e:	77 27       	eor	r23, r23
     a30:	c8 01       	movw	r24, r16
     a32:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
     a36:	99 27       	eor	r25, r25
     a38:	0e 94 43 22 	call	0x4486	; 0x4486 <nrk_wait_until_next_n_periods>
	backoff_count++;
	if(backoff_count>6) backoff_count=6; // cap it at 64	
	b=_nrk_time_to_ticks(_bmac_check_period);
     a3c:	20 91 42 06 	lds	r18, 0x0642
     a40:	30 91 43 06 	lds	r19, 0x0643
     a44:	40 91 44 06 	lds	r20, 0x0644
     a48:	50 91 45 06 	lds	r21, 0x0645
     a4c:	60 91 46 06 	lds	r22, 0x0646
     a50:	70 91 47 06 	lds	r23, 0x0647
     a54:	80 91 48 06 	lds	r24, 0x0648
     a58:	90 91 49 06 	lds	r25, 0x0649
     a5c:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
     a60:	8c 01       	movw	r16, r24
	b=b/((rand()%10)+1);
     a62:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <rand>
//	printf( "waiting %d\r\n",b );
	nrk_wait_until_ticks(b);
     a66:	6a e0       	ldi	r22, 0x0A	; 10
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
     a6e:	bc 01       	movw	r22, r24
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	c8 01       	movw	r24, r16
     a76:	0e 94 e7 31 	call	0x63ce	; 0x63ce <__udivmodhi4>
     a7a:	cb 01       	movw	r24, r22
     a7c:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <nrk_wait_until_ticks>
//	nrk_wait_ticks(b);

	} while(v==0);
     a80:	ee 20       	and	r14, r14
     a82:	39 f4       	brne	.+14     	; 0xa92 <_bmac_tx+0xd8>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
	backoff_count++;
     a84:	f3 94       	inc	r15
     a86:	86 e0       	ldi	r24, 0x06	; 6
     a88:	8f 15       	cp	r24, r15
     a8a:	20 f6       	brcc	.-120    	; 0xa14 <_bmac_tx+0x5a>
     a8c:	96 e0       	ldi	r25, 0x06	; 6
     a8e:	f9 2e       	mov	r15, r25
     a90:	c1 cf       	rjmp	.-126    	; 0xa14 <_bmac_tx+0x5a>
//	nrk_wait_ticks(b);

	} while(v==0);
}

	rf_test_mode();
     a92:	0e 94 ef 09 	call	0x13de	; 0x13de <rf_test_mode>
	rf_carrier_on(); 
     a96:	0e 94 a6 09 	call	0x134c	; 0x134c <rf_carrier_on>
	nrk_wait(_bmac_check_period);
     a9a:	20 91 42 06 	lds	r18, 0x0642
     a9e:	30 91 43 06 	lds	r19, 0x0643
     aa2:	40 91 44 06 	lds	r20, 0x0644
     aa6:	50 91 45 06 	lds	r21, 0x0645
     aaa:	60 91 46 06 	lds	r22, 0x0646
     aae:	70 91 47 06 	lds	r23, 0x0647
     ab2:	80 91 48 06 	lds	r24, 0x0648
     ab6:	90 91 49 06 	lds	r25, 0x0649
     aba:	0e 94 c7 20 	call	0x418e	; 0x418e <nrk_wait>
	//nrk_wait_until_next_period();
	rf_carrier_off(); 
     abe:	0e 94 92 09 	call	0x1324	; 0x1324 <rf_carrier_off>
	rf_data_mode();
     ac2:	0e 94 ba 09 	call	0x1374	; 0x1374 <rf_data_mode>
	// send packet
	rf_rx_off();
     ac6:	0e 94 a6 0c 	call	0x194c	; 0x194c <rf_rx_off>
	pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
     aca:	81 ef       	ldi	r24, 0xF1	; 241
     acc:	93 e0       	ldi	r25, 0x03	; 3
     ace:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <rf_tx_packet>
     ad2:	80 93 4a 06 	sts	0x064A, r24
	rf_rx_off(); 	
     ad6:	0e 94 a6 0c 	call	0x194c	; 0x194c <rf_rx_off>
tx_data_ready=0;
     ada:	10 92 41 06 	sts	0x0641, r1
nrk_event_signal (bmac_tx_pkt_done_signal);
     ade:	80 91 3d 06 	lds	r24, 0x063D
     ae2:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <nrk_event_signal>
return NRK_OK;
}
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	08 95       	ret

00000af4 <_bmac_rx>:
return val;

}

int8_t _bmac_rx()
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
int8_t n;
uint8_t cnt;
	
	rf_set_rx (&bmac_rfRxInfo, g_chan);
     af8:	60 91 4b 06 	lds	r22, 0x064B
     afc:	83 eb       	ldi	r24, 0xB3	; 179
     afe:	95 e0       	ldi	r25, 0x05	; 5
     b00:	0e 94 94 11 	call	0x2328	; 0x2328 <rf_set_rx>
        rf_polling_rx_on ();
     b04:	0e 94 be 0c 	call	0x197c	; 0x197c <rf_polling_rx_on>
     b08:	10 e0       	ldi	r17, 0x00	; 0
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <_bmac_rx+0x42>
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
	{
	cnt++;
     b0c:	1f 5f       	subi	r17, 0xFF	; 255
	nrk_wait(_bmac_check_period);
     b0e:	20 91 42 06 	lds	r18, 0x0642
     b12:	30 91 43 06 	lds	r19, 0x0643
     b16:	40 91 44 06 	lds	r20, 0x0644
     b1a:	50 91 45 06 	lds	r21, 0x0645
     b1e:	60 91 46 06 	lds	r22, 0x0646
     b22:	70 91 47 06 	lds	r23, 0x0647
     b26:	80 91 48 06 	lds	r24, 0x0648
     b2a:	90 91 49 06 	lds	r25, 0x0649
     b2e:	0e 94 c7 20 	call	0x418e	; 0x418e <nrk_wait>
	//nrk_wait_until_next_period();
	if(cnt>3) { 
     b32:	14 30       	cpi	r17, 0x04	; 4
     b34:	61 f0       	breq	.+24     	; 0xb4e <_bmac_rx+0x5a>
uint8_t cnt;
	
	rf_set_rx (&bmac_rfRxInfo, g_chan);
        rf_polling_rx_on ();
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
     b36:	0e 94 61 09 	call	0x12c2	; 0x12c2 <rf_rx_check_fifop>
     b3a:	88 23       	and	r24, r24
     b3c:	39 f3       	breq	.-50     	; 0xb0c <_bmac_rx+0x18>
     b3e:	0a c0       	rjmp	.+20     	; 0xb54 <_bmac_rx+0x60>
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
                cnt++;
     b40:	1f 5f       	subi	r17, 0xFF	; 255
                nrk_spin_wait_us(100);
     b42:	84 e6       	ldi	r24, 0x64	; 100
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
                if (cnt > 50) { 
     b4a:	13 33       	cpi	r17, 0x33	; 51
     b4c:	21 f4       	brne	.+8      	; 0xb56 <_bmac_rx+0x62>
			#ifdef DEBUG
			printf( "rx timeout 2\r\n" ); 
			#endif
			rf_rx_off(); 
     b4e:	0e 94 a6 0c 	call	0x194c	; 0x194c <rf_rx_off>
     b52:	0a c0       	rjmp	.+20     	; 0xb68 <_bmac_rx+0x74>
			return 0;
     b54:	10 e0       	ldi	r17, 0x00	; 0
	}
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
     b56:	0e 94 4f 0a 	call	0x149e	; 0x149e <rf_polling_rx_packet>
     b5a:	08 2f       	mov	r16, r24
     b5c:	88 23       	and	r24, r24
     b5e:	81 f3       	breq	.-32     	; 0xb40 <_bmac_rx+0x4c>
			rf_rx_off(); 
			return 0;
			}        
                }
        }
        rf_rx_off();
     b60:	0e 94 a6 0c 	call	0x194c	; 0x194c <rf_rx_off>
        if (n == 1) {
     b64:	01 30       	cpi	r16, 0x01	; 1
     b66:	19 f0       	breq	.+6      	; 0xb6e <_bmac_rx+0x7a>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <_bmac_rx+0x82>
                // CRC and checksum passed
    		rx_buf_empty=0;
     b6e:	10 92 4c 06 	sts	0x064C, r1
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <bmac_get_tx_done_signal>:
return(bmac_rx_pkt_signal);
}

nrk_sig_t bmac_get_tx_done_signal()
{
   nrk_signal_register(bmac_tx_pkt_done_signal); 
     b7c:	80 91 3d 06 	lds	r24, 0x063D
     b80:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <nrk_signal_register>
     b84:	80 91 3d 06 	lds	r24, 0x063D
return(bmac_tx_pkt_done_signal);
}
     b88:	99 27       	eor	r25, r25
     b8a:	87 fd       	sbrc	r24, 7
     b8c:	90 95       	com	r25
     b8e:	08 95       	ret

00000b90 <bmac_get_rx_pkt_signal>:
return NRK_OK;
}

nrk_sig_t bmac_get_rx_pkt_signal()
{
   nrk_signal_register(bmac_rx_pkt_signal); 
     b90:	80 91 fc 03 	lds	r24, 0x03FC
     b94:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <nrk_signal_register>
     b98:	80 91 fc 03 	lds	r24, 0x03FC
return(bmac_rx_pkt_signal);
}
     b9c:	99 27       	eor	r25, r25
     b9e:	87 fd       	sbrc	r24, 7
     ba0:	90 95       	com	r25
     ba2:	08 95       	ret

00000ba4 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt()
{
nrk_sig_mask_t event;

    nrk_signal_register(bmac_rx_pkt_signal); 
     ba4:	80 91 fc 03 	lds	r24, 0x03FC
     ba8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <nrk_signal_register>
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	00 90 fc 03 	lds	r0, 0x03FC
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <bmac_wait_until_rx_pkt+0x1e>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	d2 f7       	brpl	.-12     	; 0xbba <bmac_wait_until_rx_pkt+0x16>
     bc6:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
     bca:	00 90 fc 03 	lds	r0, 0x03FC
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <bmac_wait_until_rx_pkt+0x34>
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	77 95       	ror	r23
     bd6:	67 95       	ror	r22
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <bmac_wait_until_rx_pkt+0x2c>
     bdc:	60 fd       	sbrc	r22, 0
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <bmac_wait_until_rx_pkt+0x42>
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	08 95       	ret
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
else return NRK_OK;
}
     bea:	08 95       	ret

00000bec <bmac_tx_pkt>:
return(bmac_tx_pkt_done_signal);
}


int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
     bf4:	16 2f       	mov	r17, r22
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
     bf6:	80 91 41 06 	lds	r24, 0x0641
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	79 f1       	breq	.+94     	; 0xc5c <bmac_tx_pkt+0x70>
// If reserve exists check it
#ifdef NRK_MAX_RESERVES
if(tx_reserve!=-1)
     bfe:	80 91 3e 06 	lds	r24, 0x063E
     c02:	8f 3f       	cpi	r24, 0xFF	; 255
     c04:	41 f0       	breq	.+16     	; 0xc16 <bmac_tx_pkt+0x2a>
	{
	if( nrk_reserve_consume(tx_reserve)==NRK_ERROR ) return NRK_ERROR;
     c06:	99 27       	eor	r25, r25
     c08:	87 fd       	sbrc	r24, 7
     c0a:	90 95       	com	r25
     c0c:	0e 94 1e 29 	call	0x523c	; 0x523c <nrk_reserve_consume>
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	19 f1       	breq	.+70     	; 0xc5c <bmac_tx_pkt+0x70>
	}
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
     c16:	80 91 3d 06 	lds	r24, 0x063D
     c1a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <nrk_signal_register>
tx_data_ready=1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 41 06 	sts	0x0641, r24
bmac_rfTxInfo.pPayload=buf;
     c24:	d0 93 f5 03 	sts	0x03F5, r29
     c28:	c0 93 f4 03 	sts	0x03F4, r28
bmac_rfTxInfo.length=len;
     c2c:	10 93 f3 03 	sts	0x03F3, r17
#ifdef DEBUG
nrk_kprintf( PSTR("Waiting for tx done signal\r\n"));
#endif
mask=nrk_event_wait (SIG(bmac_tx_pkt_done_signal));
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	00 90 3d 06 	lds	r0, 0x063D
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <bmac_tx_pkt+0x5a>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	d2 f7       	brpl	.-12     	; 0xc3e <bmac_tx_pkt+0x52>
     c4a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <nrk_event_wait>
if(pkt_got_ack) return NRK_OK;
     c4e:	80 91 4a 06 	lds	r24, 0x064A
     c52:	88 23       	and	r24, r24
     c54:	19 f0       	breq	.+6      	; 0xc5c <bmac_tx_pkt+0x70>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <bmac_tx_pkt+0x74>
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	08 95       	ret

00000c68 <bmac_set_channel>:
  rf_set_cca_thresh(thresh); 
return NRK_OK;
}

int8_t bmac_set_channel(uint8_t chan)
{
     c68:	68 2f       	mov	r22, r24
if(chan>26) return NRK_ERROR;
     c6a:	8b 31       	cpi	r24, 0x1B	; 27
     c6c:	18 f0       	brcs	.+6      	; 0xc74 <bmac_set_channel+0xc>
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	08 95       	ret
g_chan=chan;
     c74:	80 93 4b 06 	sts	0x064B, r24
rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4f ef       	ldi	r20, 0xFF	; 255
     c7e:	5f ef       	ldi	r21, 0xFF	; 255
     c80:	83 eb       	ldi	r24, 0xB3	; 179
     c82:	95 e0       	ldi	r25, 0x05	; 5
     c84:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <rf_init>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     c8c:	08 95       	ret

00000c8e <bmac_init>:
    rx_buf_empty=1;
return NRK_OK;
}

int8_t bmac_init (uint8_t chan)
{
     c8e:	1f 93       	push	r17
     c90:	18 2f       	mov	r17, r24
    tx_reserve=-1;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	80 93 3e 06 	sts	0x063E, r24
    cca_active=true;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	80 93 4a 03 	sts	0x034A, r24
    _bmac_check_period.secs=0;
     c9e:	10 92 42 06 	sts	0x0642, r1
     ca2:	10 92 43 06 	sts	0x0643, r1
     ca6:	10 92 44 06 	sts	0x0644, r1
     caa:	10 92 45 06 	sts	0x0645, r1
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	91 ee       	ldi	r25, 0xE1	; 225
     cb2:	a5 ef       	ldi	r26, 0xF5	; 245
     cb4:	b5 e0       	ldi	r27, 0x05	; 5
     cb6:	80 93 46 06 	sts	0x0646, r24
     cba:	90 93 47 06 	sts	0x0647, r25
     cbe:	a0 93 48 06 	sts	0x0648, r26
     cc2:	b0 93 49 06 	sts	0x0649, r27
    bmac_rx_pkt_signal=nrk_signal_create();
     cc6:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_signal_create>
     cca:	80 93 fc 03 	sts	0x03FC, r24
    if(bmac_rx_pkt_signal==NRK_ERROR)
     cce:	8f 3f       	cpi	r24, 0xFF	; 255
     cd0:	19 f4       	brne	.+6      	; 0xcd8 <bmac_init+0x4a>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating rx signal failed\r\n"));
     cd2:	87 e7       	ldi	r24, 0x77	; 119
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	08 c0       	rjmp	.+16     	; 0xce8 <bmac_init+0x5a>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
    bmac_tx_pkt_done_signal=nrk_signal_create();
     cd8:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_signal_create>
     cdc:	80 93 3d 06 	sts	0x063D, r24
    if(bmac_tx_pkt_done_signal==NRK_ERROR)
     ce0:	8f 3f       	cpi	r24, 0xFF	; 255
     ce2:	79 f4       	brne	.+30     	; 0xd02 <bmac_init+0x74>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating tx signal failed\r\n"));
     ce4:	8f e4       	ldi	r24, 0x4F	; 79
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     cec:	e0 91 1a 07 	lds	r30, 0x071A
     cf0:	f0 91 1b 07 	lds	r31, 0x071B
     cf4:	60 85       	ldd	r22, Z+8	; 0x08
     cf6:	8e e0       	ldi	r24, 0x0E	; 14
     cf8:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	9f ef       	ldi	r25, 0xFF	; 255
     d00:	5b c0       	rjmp	.+182    	; 0xdb8 <bmac_init+0x12a>
	return NRK_ERROR;
	}
    bmac_enable_signal=nrk_signal_create();
     d02:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_signal_create>
     d06:	80 93 70 03 	sts	0x0370, r24
    if(bmac_enable_signal==NRK_ERROR)
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	19 f4       	brne	.+6      	; 0xd14 <bmac_init+0x86>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
     d0e:	83 e2       	ldi	r24, 0x23	; 35
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	ea cf       	rjmp	.-44     	; 0xce8 <bmac_init+0x5a>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}

    
    tx_data_ready=0;
     d14:	10 92 41 06 	sts	0x0641, r1
    // Set the one main rx buffer
    rx_buf_empty=0;
     d18:	10 92 4c 06 	sts	0x064C, r1
    bmac_rfRxInfo.pPayload = NULL;
     d1c:	10 92 b9 05 	sts	0x05B9, r1
     d20:	10 92 b8 05 	sts	0x05B8, r1
    bmac_rfRxInfo.max_length = 0;
     d24:	10 92 b7 05 	sts	0x05B7, r1

    // Setup the cc2420 chip
    rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4f ef       	ldi	r20, 0xFF	; 255
     d2e:	5f ef       	ldi	r21, 0xFF	; 255
     d30:	61 2f       	mov	r22, r17
     d32:	83 eb       	ldi	r24, 0xB3	; 179
     d34:	95 e0       	ldi	r25, 0x05	; 5
     d36:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <rf_init>
    g_chan=chan;
     d3a:	10 93 4b 06 	sts	0x064B, r17
 
    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
     d3e:	40 98       	cbi	0x08, 0	; 8
     d40:	83 e1       	ldi	r24, 0x13	; 19
     d42:	8e bd       	out	0x2e, r24	; 46
     d44:	0d b4       	in	r0, 0x2d	; 45
     d46:	07 fe       	sbrs	r0, 7
     d48:	fd cf       	rjmp	.-6      	; 0xd44 <bmac_init+0xb6>
     d4a:	85 ee       	ldi	r24, 0xE5	; 229
     d4c:	8e bd       	out	0x2e, r24	; 46
     d4e:	0d b4       	in	r0, 0x2d	; 45
     d50:	07 fe       	sbrs	r0, 7
     d52:	fd cf       	rjmp	.-6      	; 0xd4e <bmac_init+0xc0>
     d54:	80 e8       	ldi	r24, 0x80	; 128
     d56:	8e bd       	out	0x2e, r24	; 46
     d58:	0d b4       	in	r0, 0x2d	; 45
     d5a:	07 fe       	sbrs	r0, 7
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <bmac_init+0xca>
     d5e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
     d60:	40 98       	cbi	0x08, 0	; 8
     d62:	85 e1       	ldi	r24, 0x15	; 21
     d64:	8e bd       	out	0x2e, r24	; 46
     d66:	0d b4       	in	r0, 0x2d	; 45
     d68:	07 fe       	sbrs	r0, 7
     d6a:	fd cf       	rjmp	.-6      	; 0xd66 <bmac_init+0xd8>
     d6c:	80 e8       	ldi	r24, 0x80	; 128
     d6e:	8e bd       	out	0x2e, r24	; 46
     d70:	0d b4       	in	r0, 0x2d	; 45
     d72:	07 fe       	sbrs	r0, 7
     d74:	fd cf       	rjmp	.-6      	; 0xd70 <bmac_init+0xe2>
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	8e bd       	out	0x2e, r24	; 46
     d7a:	0d b4       	in	r0, 0x2d	; 45
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <bmac_init+0xec>
     d80:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
     d82:	40 98       	cbi	0x08, 0	; 8
     d84:	87 e1       	ldi	r24, 0x17	; 23
     d86:	8e bd       	out	0x2e, r24	; 46
     d88:	0d b4       	in	r0, 0x2d	; 45
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <bmac_init+0xfa>
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	8e bd       	out	0x2e, r24	; 46
     d92:	0d b4       	in	r0, 0x2d	; 45
     d94:	07 fe       	sbrs	r0, 7
     d96:	fd cf       	rjmp	.-6      	; 0xd92 <bmac_init+0x104>
     d98:	86 e5       	ldi	r24, 0x56	; 86
     d9a:	8e bd       	out	0x2e, r24	; 46
     d9c:	0d b4       	in	r0, 0x2d	; 45
     d9e:	07 fe       	sbrs	r0, 7
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <bmac_init+0x10e>
     da2:	40 9a       	sbi	0x08, 0	; 8
    // default cca thresh of -45
    rf_set_cca_thresh(-45); 
     da4:	83 ed       	ldi	r24, 0xD3	; 211
     da6:	0e 94 26 0a 	call	0x144c	; 0x144c <rf_set_cca_thresh>
    bmac_running=1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 3f 06 	sts	0x063F, r24
    is_enabled=1;
     db0:	80 93 40 06 	sts	0x0640, r24
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	1f 91       	pop	r17
     dba:	08 95       	ret

00000dbc <bmac_set_cca_thresh>:
cca_active=active;
}

int8_t bmac_set_cca_thresh(int8_t thresh)
{
  rf_set_cca_thresh(thresh); 
     dbc:	0e 94 26 0a 	call	0x144c	; 0x144c <rf_set_cca_thresh>
return NRK_OK;
}
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <bmac_set_rf_power>:
}


int8_t bmac_set_rf_power(uint8_t power)
{
if(power>31) return NRK_ERROR;
     dc6:	80 32       	cpi	r24, 0x20	; 32
     dc8:	18 f0       	brcs	.+6      	; 0xdd0 <bmac_set_rf_power+0xa>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	9f ef       	ldi	r25, 0xFF	; 255
     dce:	08 95       	ret
rf_tx_power(power);
     dd0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <rf_tx_power>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     dd8:	08 95       	ret

00000dda <bmac_encryption_disable>:
  return NRK_OK;
}

int8_t bmac_encryption_disable()
{
  rf_security_disable();
     dda:	0e 94 cd 08 	call	0x119a	; 0x119a <rf_security_disable>
  return NRK_OK;
}
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	08 95       	ret

00000de4 <bmac_encryption_enable>:
  return NRK_OK;
}

int8_t bmac_encryption_enable()
{
  rf_security_enable();
     de4:	0e 94 a7 08 	call	0x114e	; 0x114e <rf_security_enable>
  return NRK_OK;
}
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	08 95       	ret

00000dee <bmac_encryption_set_key>:
return rf_security_last_pkt_status();
}

int8_t bmac_encryption_set_key(uint8_t *key, uint8_t len)
{
  if(len!=16) return NRK_ERROR;
     dee:	60 31       	cpi	r22, 0x10	; 16
     df0:	19 f0       	breq	.+6      	; 0xdf8 <bmac_encryption_set_key+0xa>
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	08 95       	ret
  rf_security_set_key(key);
     df8:	0e 94 a7 10 	call	0x214e	; 0x214e <rf_security_set_key>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
  return NRK_OK;
}
     e00:	08 95       	ret

00000e02 <bmac_rx_pkt_is_encrypted>:
return NRK_OK;
}

int8_t bmac_rx_pkt_is_encrypted()
{
return rf_security_last_pkt_status();
     e02:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rf_security_last_pkt_status>
}
     e06:	99 27       	eor	r25, r25
     e08:	87 fd       	sbrc	r24, 7
     e0a:	90 95       	com	r25
     e0c:	08 95       	ret

00000e0e <bmac_addr_decode_set_my_mac>:
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
rf_addr_decode_set_my_mac(my_mac);
     e0e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <rf_addr_decode_set_my_mac>
return NRK_OK;
}
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	08 95       	ret

00000e18 <bmac_addr_decode_enable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_enable() 
{
rf_addr_decode_enable();
     e18:	0e 94 e6 08 	call	0x11cc	; 0x11cc <rf_addr_decode_enable>
return NRK_OK;
}
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	08 95       	ret

00000e22 <bmac_addr_decode_disable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_disable() 
{
rf_addr_decode_disable();
     e22:	0e 94 01 09 	call	0x1202	; 0x1202 <rf_addr_decode_disable>
return NRK_OK;
}
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	08 95       	ret

00000e2c <bmac_auto_ack_enable>:
return NRK_OK;
}

int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
     e2c:	0e 94 1c 09 	call	0x1238	; 0x1238 <rf_auto_ack_enable>
return NRK_OK;
}
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	08 95       	ret

00000e36 <bmac_auto_ack_disable>:
}


int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
     e36:	0e 94 3a 09 	call	0x1274	; 0x1274 <rf_auto_ack_disable>
return NRK_OK;
}
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	08 95       	ret

00000e40 <bmac_tx_reserve_get>:
}

uint16_t bmac_tx_reserve_get()
{
#ifdef NRK_MAX_RESERVES
if(tx_reserve>=0)
     e40:	80 91 3e 06 	lds	r24, 0x063E
     e44:	87 ff       	sbrs	r24, 7
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <bmac_tx_reserve_get+0xe>
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	08 95       	ret
  return nrk_reserve_get(tx_reserve);
     e4e:	99 27       	eor	r25, r25
     e50:	87 fd       	sbrc	r24, 7
     e52:	90 95       	com	r25
     e54:	0e 94 55 29 	call	0x52aa	; 0x52aa <nrk_reserve_get>
else return 0;
#else
return 0;
#endif
}
     e58:	08 95       	ret

00000e5a <bmac_tx_reserve_set>:
rf_security_set_ctr_counter(counter);
   return NRK_OK;
}

int8_t bmac_tx_reserve_set( nrk_time_t *period, uint16_t pkts )
{
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	8c 01       	movw	r16, r24
     e64:	eb 01       	movw	r28, r22

#ifdef NRK_MAX_RESERVES
// Create a reserve if it doesn't exist
if(tx_reserve==-1) tx_reserve=nrk_reserve_create();
     e66:	80 91 3e 06 	lds	r24, 0x063E
     e6a:	8f 3f       	cpi	r24, 0xFF	; 255
     e6c:	21 f4       	brne	.+8      	; 0xe76 <bmac_tx_reserve_set+0x1c>
     e6e:	0e 94 12 28 	call	0x5024	; 0x5024 <nrk_reserve_create>
     e72:	80 93 3e 06 	sts	0x063E, r24
if(tx_reserve>=0)
     e76:	80 91 3e 06 	lds	r24, 0x063E
     e7a:	87 ff       	sbrs	r24, 7
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <bmac_tx_reserve_set+0x2a>
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	0d c0       	rjmp	.+26     	; 0xe9e <bmac_tx_reserve_set+0x44>
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	ae 01       	movw	r20, r28
     e8a:	b8 01       	movw	r22, r16
     e8c:	99 27       	eor	r25, r25
     e8e:	87 fd       	sbrc	r24, 7
     e90:	90 95       	com	r25
     e92:	0e 94 4c 28 	call	0x5098	; 0x5098 <nrk_reserve_set>
     e96:	28 2f       	mov	r18, r24
     e98:	33 27       	eor	r19, r19
     e9a:	27 fd       	sbrc	r18, 7
     e9c:	30 95       	com	r19
else return NRK_ERROR;
#else
return NRK_ERROR;
#endif
}
     e9e:	c9 01       	movw	r24, r18
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <bmac_encryption_set_ctr_counter>:
    return pRRI;
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
if(len!=4 ) return NRK_ERROR;
     eaa:	64 30       	cpi	r22, 0x04	; 4
     eac:	19 f0       	breq	.+6      	; 0xeb4 <bmac_encryption_set_ctr_counter+0xa>
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	9f ef       	ldi	r25, 0xFF	; 255
     eb2:	08 95       	ret
rf_security_set_ctr_counter(counter);
     eb4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <rf_security_set_ctr_counter>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
   return NRK_OK;
}
     ebc:	08 95       	ret

00000ebe <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <bmac_nw_task+0x6>
int8_t v;
uint8_t backoff;
nrk_sig_mask_t event;

while(bmac_started()==0) nrk_wait_until_next_period();
     ec0:	0e 94 76 22 	call	0x44ec	; 0x44ec <nrk_wait_until_next_period>
     ec4:	80 91 3f 06 	lds	r24, 0x063F
     ec8:	88 23       	and	r24, r24
     eca:	d1 f3       	breq	.-12     	; 0xec0 <bmac_nw_task+0x2>

//register the signal after bmac_init has been called
nrk_signal_register(bmac_enable_signal); 
     ecc:	80 91 70 03 	lds	r24, 0x0370
     ed0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <nrk_signal_register>

backoff=0;

    while (1) {
	if(is_enabled ) { 
     ed4:	80 91 40 06 	lds	r24, 0x0640
     ed8:	88 23       	and	r24, r24
     eda:	49 f1       	breq	.+82     	; 0xf2e <bmac_nw_task+0x70>
	v=1;
	if(rx_buf_empty==1) v=_bmac_channel_check();
     edc:	80 91 4c 06 	lds	r24, 0x064C
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	61 f4       	brne	.+24     	; 0xefc <bmac_nw_task+0x3e>
     ee4:	0e 94 c6 04 	call	0x98c	; 0x98c <_bmac_channel_check>
		if(v==0)
     ee8:	88 23       	and	r24, r24
     eea:	41 f4       	brne	.+16     	; 0xefc <bmac_nw_task+0x3e>
			{
			if(_bmac_rx()==1)
     eec:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_bmac_rx>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	21 f4       	brne	.+8      	; 0xefc <bmac_nw_task+0x3e>
				nrk_event_signal (bmac_rx_pkt_signal);
     ef4:	80 91 fc 03 	lds	r24, 0x03FC
     ef8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <nrk_event_signal>
		
			} 
		if(tx_data_ready==1)
     efc:	80 91 41 06 	lds	r24, 0x0641
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	11 f4       	brne	.+4      	; 0xf08 <bmac_nw_task+0x4a>
			{
				_bmac_tx();
     f04:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_bmac_tx>
			}
	nrk_wait(_bmac_check_period); 
     f08:	20 91 42 06 	lds	r18, 0x0642
     f0c:	30 91 43 06 	lds	r19, 0x0643
     f10:	40 91 44 06 	lds	r20, 0x0644
     f14:	50 91 45 06 	lds	r21, 0x0645
     f18:	60 91 46 06 	lds	r22, 0x0646
     f1c:	70 91 47 06 	lds	r23, 0x0647
     f20:	80 91 48 06 	lds	r24, 0x0648
     f24:	90 91 49 06 	lds	r25, 0x0649
     f28:	0e 94 c7 20 	call	0x418e	; 0x418e <nrk_wait>
     f2c:	d3 cf       	rjmp	.-90     	; 0xed4 <bmac_nw_task+0x16>
	} else {
		event=0;
		do {
    		event=nrk_event_wait (SIG(bmac_enable_signal));
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	00 90 70 03 	lds	r0, 0x0370
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <bmac_nw_task+0x86>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	d2 f7       	brpl	.-12     	; 0xf3c <bmac_nw_task+0x7e>
     f48:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <nrk_event_wait>
		} while((event & SIG(bmac_enable_signal))==0);
     f4c:	00 90 70 03 	lds	r0, 0x0370
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <bmac_nw_task+0x9c>
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <bmac_nw_task+0x94>
     f5e:	60 fd       	sbrc	r22, 0
     f60:	b9 cf       	rjmp	.-142    	; 0xed4 <bmac_nw_task+0x16>
     f62:	e5 cf       	rjmp	.-54     	; 0xf2e <bmac_nw_task+0x70>

00000f64 <bmac_rx_pkt_get>:
return NRK_ERROR;
}


uint8_t *bmac_rx_pkt_get(uint8_t *len, int8_t *rssi)
{
     f64:	fc 01       	movw	r30, r24
     f66:	db 01       	movw	r26, r22

  if(bmac_rx_pkt_ready()==0) 
     f68:	80 91 4c 06 	lds	r24, 0x064C
     f6c:	88 23       	and	r24, r24
     f6e:	29 f0       	breq	.+10     	; 0xf7a <bmac_rx_pkt_get+0x16>
	{
	*len=0;
     f70:	10 82       	st	Z, r1
	*rssi=0;
     f72:	1c 92       	st	X, r1
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	08 95       	ret
	return NULL;
	}
  *len=bmac_rfRxInfo.length;
     f7a:	80 91 b6 05 	lds	r24, 0x05B6
     f7e:	80 83       	st	Z, r24
  *rssi=bmac_rfRxInfo.rssi;
     f80:	80 91 bb 05 	lds	r24, 0x05BB
     f84:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
     f86:	80 91 b8 05 	lds	r24, 0x05B8
     f8a:	90 91 b9 05 	lds	r25, 0x05B9
}
     f8e:	08 95       	ret

00000f90 <readAccelData>:

static AccelData accelDataPort;

// This function returns the last witen data in the accel data port.
void readAccelData(AccelReading *data)
{
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	dc 01       	movw	r26, r24
    int8_t index = accelDataPort.index; // this is necessary so that we dont get a dirty read.
    data->zValue = accelDataPort.data[index].zValue;
     f96:	4a eb       	ldi	r20, 0xBA	; 186
     f98:	52 e0       	ldi	r21, 0x02	; 2
     f9a:	20 91 ba 02 	lds	r18, 0x02BA
     f9e:	33 27       	eor	r19, r19
     fa0:	27 fd       	sbrc	r18, 7
     fa2:	30 95       	com	r19
     fa4:	c9 01       	movw	r24, r18
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	fc 01       	movw	r30, r24
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	e4 0f       	add	r30, r20
     fb8:	f5 1f       	adc	r31, r21
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	ed 01       	movw	r28, r26
     fc0:	9d 83       	std	Y+5, r25	; 0x05
     fc2:	8c 83       	std	Y+4, r24	; 0x04
    data->yValue = accelDataPort.data[index].yValue;
     fc4:	f9 01       	movw	r30, r18
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e2 0f       	add	r30, r18
     fcc:	f3 1f       	adc	r31, r19
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	e4 0f       	add	r30, r20
     fd4:	f5 1f       	adc	r31, r21
     fd6:	84 81       	ldd	r24, Z+4	; 0x04
     fd8:	95 81       	ldd	r25, Z+5	; 0x05
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
    data->xValue = accelDataPort.data[index].xValue;
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	8d 93       	st	X+, r24
     fe4:	9c 93       	st	X, r25
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <writeAccelData>:
}

// ths functio write the the data in the last w
void writeAccelData(AccelReading *data)
{
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	dc 01       	movw	r26, r24
    // you should write on the index that is not being currently read.
    int8_t index = accelDataPort.index ^ 1;
     ff2:	6a eb       	ldi	r22, 0xBA	; 186
     ff4:	72 e0       	ldi	r23, 0x02	; 2
     ff6:	40 91 ba 02 	lds	r20, 0x02BA
     ffa:	50 91 bb 02 	lds	r21, 0x02BB
    accelDataPort.data[index].zValue = data->zValue;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	84 27       	eor	r24, r20
    1002:	99 27       	eor	r25, r25
    1004:	87 fd       	sbrc	r24, 7
    1006:	90 95       	com	r25
    1008:	9c 01       	movw	r18, r24
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	f9 01       	movw	r30, r18
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e2 0f       	add	r30, r18
    1016:	f3 1f       	adc	r31, r19
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	e6 0f       	add	r30, r22
    101e:	f7 1f       	adc	r31, r23
    1020:	ed 01       	movw	r28, r26
    1022:	2c 81       	ldd	r18, Y+4	; 0x04
    1024:	3d 81       	ldd	r19, Y+5	; 0x05
    1026:	31 83       	std	Z+1, r19	; 0x01
    1028:	20 83       	st	Z, r18
    accelDataPort.data[index].yValue = data->yValue;
    102a:	fc 01       	movw	r30, r24
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	e8 0f       	add	r30, r24
    1032:	f9 1f       	adc	r31, r25
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	e6 0f       	add	r30, r22
    103a:	f7 1f       	adc	r31, r23
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	95 83       	std	Z+5, r25	; 0x05
    1042:	84 83       	std	Z+4, r24	; 0x04
    accelDataPort.data[index].xValue = data->xValue;
    1044:	8d 91       	ld	r24, X+
    1046:	9c 91       	ld	r25, X
    1048:	93 83       	std	Z+3, r25	; 0x03
    104a:	82 83       	std	Z+2, r24	; 0x02

    // now toggle the index.
    accelDataPort.index ^= 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	48 27       	eor	r20, r24
    1052:	59 27       	eor	r21, r25
    1054:	50 93 bb 02 	sts	0x02BB, r21
    1058:	40 93 ba 02 	sts	0x02BA, r20
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <halRfSetChannel>:

nrk_task_type TX_TASK;
NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
void tx_task (void);

void nrk_create_taskset ();
    1062:	99 27       	eor	r25, r25

    1064:	9c 01       	movw	r18, r24
    1066:	26 5a       	subi	r18, 0xA6	; 166
    1068:	3e 4b       	sbci	r19, 0xBE	; 190
    106a:	0b 97       	sbiw	r24, 0x0b	; 11
uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	28 0f       	add	r18, r24
    1076:	39 1f       	adc	r19, r25
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
//uint8_t aes_key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 0x0f};

    1078:	f8 94       	cli
int main ()
    107a:	40 98       	cbi	0x08, 0	; 8
    107c:	88 e1       	ldi	r24, 0x18	; 24
    107e:	8e bd       	out	0x2e, r24	; 46
    1080:	0d b4       	in	r0, 0x2d	; 45
    1082:	07 fe       	sbrs	r0, 7
    1084:	fd cf       	rjmp	.-6      	; 0x1080 <halRfSetChannel+0x1e>
    1086:	83 2f       	mov	r24, r19
    1088:	99 27       	eor	r25, r25
    108a:	8e bd       	out	0x2e, r24	; 46
    108c:	0d b4       	in	r0, 0x2d	; 45
    108e:	07 fe       	sbrs	r0, 7
    1090:	fd cf       	rjmp	.-6      	; 0x108c <halRfSetChannel+0x2a>
    1092:	2e bd       	out	0x2e, r18	; 46
    1094:	0d b4       	in	r0, 0x2d	; 45
    1096:	07 fe       	sbrs	r0, 7
    1098:	fd cf       	rjmp	.-6      	; 0x1094 <halRfSetChannel+0x32>
    109a:	40 9a       	sbi	0x08, 0	; 8
{
    109c:	78 94       	sei
    109e:	08 95       	ret

000010a0 <halRfWaitForCrystalOscillator>:
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);


nrk_task_type TX_TASK;
NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
    10a0:	f8 94       	cli
void tx_task (void);
    10a2:	40 98       	cbi	0x08, 0	; 8
    10a4:	1e bc       	out	0x2e, r1	; 46
    10a6:	0d b4       	in	r0, 0x2d	; 45
    10a8:	07 fe       	sbrs	r0, 7
    10aa:	fd cf       	rjmp	.-6      	; 0x10a6 <halRfWaitForCrystalOscillator+0x6>
    10ac:	8e b5       	in	r24, 0x2e	; 46
    10ae:	40 9a       	sbi	0x08, 0	; 8

    10b0:	78 94       	sei
void nrk_create_taskset ();
    10b2:	86 ff       	sbrs	r24, 6
    10b4:	f5 cf       	rjmp	.-22     	; 0x10a0 <halRfWaitForCrystalOscillator>
    10b6:	08 95       	ret

000010b8 <rf_security_last_pkt_status>:

uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
//uint8_t aes_key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 0x0f};

int main ()
    10b8:	80 91 62 06 	lds	r24, 0x0662
{
  uint16_t div;
    10bc:	99 27       	eor	r25, r25
    10be:	08 95       	ret

000010c0 <rf_security_set_ctr_counter>:
  nrk_setup_ports ();
  nrk_setup_uart (UART_BAUDRATE_115K2);

  nrk_init ();
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	dc 01       	movw	r26, r24

  nrk_led_clr (0);
  nrk_led_clr (1);
    10c6:	40 98       	cbi	0x08, 0	; 8
    10c8:	89 ec       	ldi	r24, 0xC9	; 201
    10ca:	8e bd       	out	0x2e, r24	; 46
    10cc:	0d b4       	in	r0, 0x2d	; 45
    10ce:	07 fe       	sbrs	r0, 7
    10d0:	fd cf       	rjmp	.-6      	; 0x10cc <rf_security_set_ctr_counter+0xc>
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	8e bd       	out	0x2e, r24	; 46
    10d6:	0d b4       	in	r0, 0x2d	; 45
    10d8:	07 fe       	sbrs	r0, 7
    10da:	fd cf       	rjmp	.-6      	; 0x10d6 <rf_security_set_ctr_counter+0x16>
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	91 50       	subi	r25, 0x01	; 1
    10e0:	fd 01       	movw	r30, r26
    10e2:	e9 0f       	add	r30, r25
    10e4:	f1 1d       	adc	r31, r1
    10e6:	80 81       	ld	r24, Z
    10e8:	8e bd       	out	0x2e, r24	; 46
    10ea:	0d b4       	in	r0, 0x2d	; 45
    10ec:	07 fe       	sbrs	r0, 7
    10ee:	fd cf       	rjmp	.-6      	; 0x10ea <rf_security_set_ctr_counter+0x2a>
    10f0:	99 23       	and	r25, r25
    10f2:	a9 f7       	brne	.-22     	; 0x10de <rf_security_set_ctr_counter+0x1e>
    10f4:	40 9a       	sbi	0x08, 0	; 8
  nrk_led_clr (2);
    10f6:	40 98       	cbi	0x08, 0	; 8
    10f8:	8b ec       	ldi	r24, 0xCB	; 203
    10fa:	8e bd       	out	0x2e, r24	; 46
    10fc:	0d b4       	in	r0, 0x2d	; 45
    10fe:	07 fe       	sbrs	r0, 7
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <rf_security_set_ctr_counter+0x3c>
    1102:	80 e8       	ldi	r24, 0x80	; 128
    1104:	8e bd       	out	0x2e, r24	; 46
    1106:	0d b4       	in	r0, 0x2d	; 45
    1108:	07 fe       	sbrs	r0, 7
    110a:	fd cf       	rjmp	.-6      	; 0x1106 <rf_security_set_ctr_counter+0x46>
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	9d 01       	movw	r18, r26
    1110:	2e 5f       	subi	r18, 0xFE	; 254
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	e9 01       	movw	r28, r18
    1116:	91 50       	subi	r25, 0x01	; 1
    1118:	f9 01       	movw	r30, r18
    111a:	e9 0f       	add	r30, r25
    111c:	f1 1d       	adc	r31, r1
    111e:	80 81       	ld	r24, Z
    1120:	8e bd       	out	0x2e, r24	; 46
    1122:	0d b4       	in	r0, 0x2d	; 45
    1124:	07 fe       	sbrs	r0, 7
    1126:	fd cf       	rjmp	.-6      	; 0x1122 <rf_security_set_ctr_counter+0x62>
    1128:	99 23       	and	r25, r25
    112a:	a1 f7       	brne	.-24     	; 0x1114 <rf_security_set_ctr_counter+0x54>
    112c:	40 9a       	sbi	0x08, 0	; 8
  nrk_led_clr (3);
    112e:	8c 91       	ld	r24, X
    1130:	80 93 63 06 	sts	0x0663, r24

    1134:	fd 01       	movw	r30, r26
    1136:	81 81       	ldd	r24, Z+1	; 0x01
    1138:	80 93 64 06 	sts	0x0664, r24
  nrk_time_set (0, 0);
    113c:	88 81       	ld	r24, Y
    113e:	80 93 65 06 	sts	0x0665, r24

    1142:	83 81       	ldd	r24, Z+3	; 0x03
    1144:	80 93 66 06 	sts	0x0666, r24
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <rf_security_enable>:
  // By default the RX check rate is 100ms
  // below shows how to change that
  check_period.secs=0;
  check_period.nano_secs=CSMA_CHECK_PERIOD*NANOS_PER_MS;
  val=bmac_set_rx_check_rate(check_period);

    114e:	40 98       	cbi	0x08, 0	; 8
    1150:	89 e1       	ldi	r24, 0x19	; 25
    1152:	8e bd       	out	0x2e, r24	; 46
    1154:	0d b4       	in	r0, 0x2d	; 45
    1156:	07 fe       	sbrs	r0, 7
    1158:	fd cf       	rjmp	.-6      	; 0x1154 <rf_security_enable+0x6>
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	8e bd       	out	0x2e, r24	; 46
    115e:	0d b4       	in	r0, 0x2d	; 45
    1160:	07 fe       	sbrs	r0, 7
    1162:	fd cf       	rjmp	.-6      	; 0x115e <rf_security_enable+0x10>
    1164:	86 e0       	ldi	r24, 0x06	; 6
    1166:	8e bd       	out	0x2e, r24	; 46
    1168:	0d b4       	in	r0, 0x2d	; 45
    116a:	07 fe       	sbrs	r0, 7
    116c:	fd cf       	rjmp	.-6      	; 0x1168 <rf_security_enable+0x1a>
    116e:	40 9a       	sbi	0x08, 0	; 8
  bmac_addr_decode_set_my_mac(1);
    1170:	40 98       	cbi	0x08, 0	; 8
    1172:	8a e1       	ldi	r24, 0x1A	; 26
    1174:	8e bd       	out	0x2e, r24	; 46
    1176:	0d b4       	in	r0, 0x2d	; 45
    1178:	07 fe       	sbrs	r0, 7
    117a:	fd cf       	rjmp	.-6      	; 0x1176 <rf_security_enable+0x28>
    117c:	8e e0       	ldi	r24, 0x0E	; 14
    117e:	8e bd       	out	0x2e, r24	; 46
    1180:	0d b4       	in	r0, 0x2d	; 45
    1182:	07 fe       	sbrs	r0, 7
    1184:	fd cf       	rjmp	.-6      	; 0x1180 <rf_security_enable+0x32>
    1186:	8e e0       	ldi	r24, 0x0E	; 14
    1188:	8e bd       	out	0x2e, r24	; 46
    118a:	0d b4       	in	r0, 0x2d	; 45
    118c:	07 fe       	sbrs	r0, 7
    118e:	fd cf       	rjmp	.-6      	; 0x118a <rf_security_enable+0x3c>
    1190:	40 9a       	sbi	0x08, 0	; 8
  bmac_addr_decode_enable();
  bmac_auto_ack_enable();
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 53 06 	sts	0x0653, r24
    1198:	08 95       	ret

0000119a <rf_security_disable>:
  // The default Clear Channel Assement RSSI threshold is -45
  // Setting this value higher means that you will only trigger
  // receive with a very strong signal.  Setting this lower means
  // bmac will try to receive fainter packets.  If the value is set
  // too high or too low performance will suffer greatly.
  // bmac_set_cca_thresh(-45); 
    119a:	40 98       	cbi	0x08, 0	; 8
    119c:	89 e1       	ldi	r24, 0x19	; 25
    119e:	8e bd       	out	0x2e, r24	; 46
    11a0:	0d b4       	in	r0, 0x2d	; 45
    11a2:	07 fe       	sbrs	r0, 7
    11a4:	fd cf       	rjmp	.-6      	; 0x11a0 <rf_security_disable+0x6>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	8e bd       	out	0x2e, r24	; 46
    11aa:	0d b4       	in	r0, 0x2d	; 45
    11ac:	07 fe       	sbrs	r0, 7
    11ae:	fd cf       	rjmp	.-6      	; 0x11aa <rf_security_disable+0x10>
    11b0:	84 ec       	ldi	r24, 0xC4	; 196
    11b2:	8e bd       	out	0x2e, r24	; 46
    11b4:	0d b4       	in	r0, 0x2d	; 45
    11b6:	07 fe       	sbrs	r0, 7
    11b8:	fd cf       	rjmp	.-6      	; 0x11b4 <rf_security_disable+0x1a>
    11ba:	40 9a       	sbi	0x08, 0	; 8

    11bc:	10 92 53 06 	sts	0x0653, r1
    11c0:	08 95       	ret

000011c2 <rf_get_sem>:
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    11c2:	80 91 51 06 	lds	r24, 0x0651
    11c6:	90 91 52 06 	lds	r25, 0x0652
    11ca:	08 95       	ret

000011cc <rf_addr_decode_enable>:
{
  uint8_t j, i, val, len, cnt;
  int8_t v;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;
  nrk_time_t r_period;
    11cc:	20 91 54 06 	lds	r18, 0x0654
    11d0:	30 91 55 06 	lds	r19, 0x0655
    11d4:	38 60       	ori	r19, 0x08	; 8
    11d6:	30 93 55 06 	sts	0x0655, r19
    11da:	20 93 54 06 	sts	0x0654, r18

    11de:	40 98       	cbi	0x08, 0	; 8
    11e0:	81 e1       	ldi	r24, 0x11	; 17
    11e2:	8e bd       	out	0x2e, r24	; 46
    11e4:	0d b4       	in	r0, 0x2d	; 45
    11e6:	07 fe       	sbrs	r0, 7
    11e8:	fd cf       	rjmp	.-6      	; 0x11e4 <rf_addr_decode_enable+0x18>
    11ea:	83 2f       	mov	r24, r19
    11ec:	99 27       	eor	r25, r25
    11ee:	8e bd       	out	0x2e, r24	; 46
    11f0:	0d b4       	in	r0, 0x2d	; 45
    11f2:	07 fe       	sbrs	r0, 7
    11f4:	fd cf       	rjmp	.-6      	; 0x11f0 <rf_addr_decode_enable+0x24>
    11f6:	2e bd       	out	0x2e, r18	; 46
    11f8:	0d b4       	in	r0, 0x2d	; 45
    11fa:	07 fe       	sbrs	r0, 7
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <rf_addr_decode_enable+0x2c>
    11fe:	40 9a       	sbi	0x08, 0	; 8
    1200:	08 95       	ret

00001202 <rf_addr_decode_disable>:
  printf ("tx_task PID=%d\r\n", nrk_get_pid ());

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
    1202:	20 91 54 06 	lds	r18, 0x0654
    1206:	30 91 55 06 	lds	r19, 0x0655
    120a:	37 7f       	andi	r19, 0xF7	; 247
    120c:	30 93 55 06 	sts	0x0655, r19
    1210:	20 93 54 06 	sts	0x0654, r18
  while (!bmac_started ())
    1214:	40 98       	cbi	0x08, 0	; 8
    1216:	81 e1       	ldi	r24, 0x11	; 17
    1218:	8e bd       	out	0x2e, r24	; 46
    121a:	0d b4       	in	r0, 0x2d	; 45
    121c:	07 fe       	sbrs	r0, 7
    121e:	fd cf       	rjmp	.-6      	; 0x121a <rf_addr_decode_disable+0x18>
    1220:	83 2f       	mov	r24, r19
    1222:	99 27       	eor	r25, r25
    1224:	8e bd       	out	0x2e, r24	; 46
    1226:	0d b4       	in	r0, 0x2d	; 45
    1228:	07 fe       	sbrs	r0, 7
    122a:	fd cf       	rjmp	.-6      	; 0x1226 <rf_addr_decode_disable+0x24>
    122c:	2e bd       	out	0x2e, r18	; 46
    122e:	0d b4       	in	r0, 0x2d	; 45
    1230:	07 fe       	sbrs	r0, 7
    1232:	fd cf       	rjmp	.-6      	; 0x122e <rf_addr_decode_disable+0x2c>
    1234:	40 9a       	sbi	0x08, 0	; 8
    1236:	08 95       	ret

00001238 <rf_auto_ack_enable>:
    nrk_wait_until_next_period ();


  // Sample of using Reservations on TX packets
  // This example allows 2 packets to be sent every 5 seconds
  // r_period.secs=5;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 61 06 	sts	0x0661, r24
  // r_period.nano_secs=0;
    123e:	20 91 54 06 	lds	r18, 0x0654
    1242:	30 91 55 06 	lds	r19, 0x0655
    1246:	20 61       	ori	r18, 0x10	; 16
    1248:	30 93 55 06 	sts	0x0655, r19
    124c:	20 93 54 06 	sts	0x0654, r18
  // v=bmac_tx_reserve_set( &r_period, 2 );
    1250:	40 98       	cbi	0x08, 0	; 8
    1252:	81 e1       	ldi	r24, 0x11	; 17
    1254:	8e bd       	out	0x2e, r24	; 46
    1256:	0d b4       	in	r0, 0x2d	; 45
    1258:	07 fe       	sbrs	r0, 7
    125a:	fd cf       	rjmp	.-6      	; 0x1256 <rf_auto_ack_enable+0x1e>
    125c:	83 2f       	mov	r24, r19
    125e:	99 27       	eor	r25, r25
    1260:	8e bd       	out	0x2e, r24	; 46
    1262:	0d b4       	in	r0, 0x2d	; 45
    1264:	07 fe       	sbrs	r0, 7
    1266:	fd cf       	rjmp	.-6      	; 0x1262 <rf_auto_ack_enable+0x2a>
    1268:	2e bd       	out	0x2e, r18	; 46
    126a:	0d b4       	in	r0, 0x2d	; 45
    126c:	07 fe       	sbrs	r0, 7
    126e:	fd cf       	rjmp	.-6      	; 0x126a <rf_auto_ack_enable+0x32>
    1270:	40 9a       	sbi	0x08, 0	; 8
    1272:	08 95       	ret

00001274 <rf_auto_ack_disable>:
  // if(v==NRK_ERROR) nrk_kprintf( PSTR("Error setting b-mac tx reservation (is NRK_MAX_RESERVES defined?)\r\n" ));


  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
    1274:	10 92 61 06 	sts	0x0661, r1
  tx_done_signal = bmac_get_tx_done_signal ();
    1278:	20 91 54 06 	lds	r18, 0x0654
    127c:	30 91 55 06 	lds	r19, 0x0655
    1280:	2f 7e       	andi	r18, 0xEF	; 239
    1282:	30 93 55 06 	sts	0x0655, r19
    1286:	20 93 54 06 	sts	0x0654, r18
  nrk_signal_register (tx_done_signal);
    128a:	40 98       	cbi	0x08, 0	; 8
    128c:	81 e1       	ldi	r24, 0x11	; 17
    128e:	8e bd       	out	0x2e, r24	; 46
    1290:	0d b4       	in	r0, 0x2d	; 45
    1292:	07 fe       	sbrs	r0, 7
    1294:	fd cf       	rjmp	.-6      	; 0x1290 <rf_auto_ack_disable+0x1c>
    1296:	83 2f       	mov	r24, r19
    1298:	99 27       	eor	r25, r25
    129a:	8e bd       	out	0x2e, r24	; 46
    129c:	0d b4       	in	r0, 0x2d	; 45
    129e:	07 fe       	sbrs	r0, 7
    12a0:	fd cf       	rjmp	.-6      	; 0x129c <rf_auto_ack_disable+0x28>
    12a2:	2e bd       	out	0x2e, r18	; 46
    12a4:	0d b4       	in	r0, 0x2d	; 45
    12a6:	07 fe       	sbrs	r0, 7
    12a8:	fd cf       	rjmp	.-6      	; 0x12a4 <rf_auto_ack_disable+0x30>
    12aa:	40 9a       	sbi	0x08, 0	; 8
    12ac:	08 95       	ret

000012ae <rf_busy>:
    12ae:	89 b1       	in	r24, 0x09	; 9
    12b0:	99 27       	eor	r25, r25
    12b2:	66 e0       	ldi	r22, 0x06	; 6
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	6a 95       	dec	r22
    12ba:	e1 f7       	brne	.-8      	; 0x12b4 <rf_busy+0x6>
    12bc:	81 70       	andi	r24, 0x01	; 1
    12be:	90 70       	andi	r25, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <rf_rx_check_fifop>:
    12c2:	8c b1       	in	r24, 0x0c	; 12
    12c4:	99 27       	eor	r25, r25
    12c6:	87 fd       	sbrc	r24, 7
    12c8:	90 95       	com	r25
    12ca:	88 27       	eor	r24, r24
    12cc:	99 0f       	add	r25, r25
    12ce:	88 1f       	adc	r24, r24
    12d0:	99 27       	eor	r25, r25
    12d2:	08 95       	ret

000012d4 <rf_rx_check_sfd>:
    12d4:	89 b1       	in	r24, 0x09	; 9
    12d6:	99 27       	eor	r25, r25
    12d8:	e6 e0       	ldi	r30, 0x06	; 6
    12da:	96 95       	lsr	r25
    12dc:	87 95       	ror	r24
    12de:	ea 95       	dec	r30
    12e0:	e1 f7       	brne	.-8      	; 0x12da <rf_rx_check_sfd+0x6>
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	90 70       	andi	r25, 0x00	; 0
    12e6:	08 95       	ret

000012e8 <rf_rx_packet>:
    12e8:	80 91 67 06 	lds	r24, 0x0667
    12ec:	88 23       	and	r24, r24
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <rf_rx_packet+0xe>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	08 95       	ret
    12f6:	80 91 67 06 	lds	r24, 0x0667
    12fa:	10 92 67 06 	sts	0x0667, r1
    12fe:	99 27       	eor	r25, r25
    1300:	87 fd       	sbrc	r24, 7
    1302:	90 95       	com	r25
    1304:	08 95       	ret

00001306 <rf_flush_rx_fifo>:
    1306:	40 98       	cbi	0x08, 0	; 8
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	8e bd       	out	0x2e, r24	; 46
    130c:	0d b4       	in	r0, 0x2d	; 45
    130e:	07 fe       	sbrs	r0, 7
    1310:	fd cf       	rjmp	.-6      	; 0x130c <rf_flush_rx_fifo+0x6>
    1312:	40 9a       	sbi	0x08, 0	; 8
    1314:	40 98       	cbi	0x08, 0	; 8
    1316:	88 e0       	ldi	r24, 0x08	; 8
    1318:	8e bd       	out	0x2e, r24	; 46
    131a:	0d b4       	in	r0, 0x2d	; 45
    131c:	07 fe       	sbrs	r0, 7
    131e:	fd cf       	rjmp	.-6      	; 0x131a <rf_flush_rx_fifo+0x14>
    1320:	40 9a       	sbi	0x08, 0	; 8
    1322:	08 95       	ret

00001324 <rf_carrier_off>:
    1324:	80 91 51 06 	lds	r24, 0x0651
    1328:	90 91 52 06 	lds	r25, 0x0652
    132c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1330:	40 98       	cbi	0x08, 0	; 8
    1332:	86 e0       	ldi	r24, 0x06	; 6
    1334:	8e bd       	out	0x2e, r24	; 46
    1336:	0d b4       	in	r0, 0x2d	; 45
    1338:	07 fe       	sbrs	r0, 7
    133a:	fd cf       	rjmp	.-6      	; 0x1336 <rf_carrier_off+0x12>
    133c:	40 9a       	sbi	0x08, 0	; 8
    133e:	80 91 51 06 	lds	r24, 0x0651
    1342:	90 91 52 06 	lds	r25, 0x0652
    1346:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    134a:	08 95       	ret

0000134c <rf_carrier_on>:
    134c:	80 91 51 06 	lds	r24, 0x0651
    1350:	90 91 52 06 	lds	r25, 0x0652
    1354:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1358:	40 98       	cbi	0x08, 0	; 8
    135a:	84 e0       	ldi	r24, 0x04	; 4
    135c:	8e bd       	out	0x2e, r24	; 46
    135e:	0d b4       	in	r0, 0x2d	; 45
    1360:	07 fe       	sbrs	r0, 7
    1362:	fd cf       	rjmp	.-6      	; 0x135e <rf_carrier_on+0x12>
    1364:	40 9a       	sbi	0x08, 0	; 8
    1366:	80 91 51 06 	lds	r24, 0x0651
    136a:	90 91 52 06 	lds	r25, 0x0652
    136e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1372:	08 95       	ret

00001374 <rf_data_mode>:
    1374:	80 91 51 06 	lds	r24, 0x0651
    1378:	90 91 52 06 	lds	r25, 0x0652
    137c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1380:	40 98       	cbi	0x08, 0	; 8
    1382:	86 e0       	ldi	r24, 0x06	; 6
    1384:	8e bd       	out	0x2e, r24	; 46
    1386:	0d b4       	in	r0, 0x2d	; 45
    1388:	07 fe       	sbrs	r0, 7
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <rf_data_mode+0x12>
    138c:	40 9a       	sbi	0x08, 0	; 8
    138e:	40 98       	cbi	0x08, 0	; 8
    1390:	82 e1       	ldi	r24, 0x12	; 18
    1392:	8e bd       	out	0x2e, r24	; 46
    1394:	0d b4       	in	r0, 0x2d	; 45
    1396:	07 fe       	sbrs	r0, 7
    1398:	fd cf       	rjmp	.-6      	; 0x1394 <rf_data_mode+0x20>
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	8e bd       	out	0x2e, r24	; 46
    139e:	0d b4       	in	r0, 0x2d	; 45
    13a0:	07 fe       	sbrs	r0, 7
    13a2:	fd cf       	rjmp	.-6      	; 0x139e <rf_data_mode+0x2a>
    13a4:	1e bc       	out	0x2e, r1	; 46
    13a6:	0d b4       	in	r0, 0x2d	; 45
    13a8:	07 fe       	sbrs	r0, 7
    13aa:	fd cf       	rjmp	.-6      	; 0x13a6 <rf_data_mode+0x32>
    13ac:	40 9a       	sbi	0x08, 0	; 8
    13ae:	40 98       	cbi	0x08, 0	; 8
    13b0:	8e e2       	ldi	r24, 0x2E	; 46
    13b2:	8e bd       	out	0x2e, r24	; 46
    13b4:	0d b4       	in	r0, 0x2d	; 45
    13b6:	07 fe       	sbrs	r0, 7
    13b8:	fd cf       	rjmp	.-6      	; 0x13b4 <rf_data_mode+0x40>
    13ba:	1e bc       	out	0x2e, r1	; 46
    13bc:	0d b4       	in	r0, 0x2d	; 45
    13be:	07 fe       	sbrs	r0, 7
    13c0:	fd cf       	rjmp	.-6      	; 0x13bc <rf_data_mode+0x48>
    13c2:	1e bc       	out	0x2e, r1	; 46
    13c4:	0d b4       	in	r0, 0x2d	; 45
    13c6:	07 fe       	sbrs	r0, 7
    13c8:	fd cf       	rjmp	.-6      	; 0x13c4 <rf_data_mode+0x50>
    13ca:	40 9a       	sbi	0x08, 0	; 8
    13cc:	0e 94 83 09 	call	0x1306	; 0x1306 <rf_flush_rx_fifo>
    13d0:	80 91 51 06 	lds	r24, 0x0651
    13d4:	90 91 52 06 	lds	r25, 0x0652
    13d8:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    13dc:	08 95       	ret

000013de <rf_test_mode>:
    13de:	80 91 51 06 	lds	r24, 0x0651
    13e2:	90 91 52 06 	lds	r25, 0x0652
    13e6:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    13ea:	40 98       	cbi	0x08, 0	; 8
    13ec:	86 e0       	ldi	r24, 0x06	; 6
    13ee:	8e bd       	out	0x2e, r24	; 46
    13f0:	0d b4       	in	r0, 0x2d	; 45
    13f2:	07 fe       	sbrs	r0, 7
    13f4:	fd cf       	rjmp	.-6      	; 0x13f0 <rf_test_mode+0x12>
    13f6:	40 9a       	sbi	0x08, 0	; 8
    13f8:	40 98       	cbi	0x08, 0	; 8
    13fa:	82 e1       	ldi	r24, 0x12	; 18
    13fc:	8e bd       	out	0x2e, r24	; 46
    13fe:	0d b4       	in	r0, 0x2d	; 45
    1400:	07 fe       	sbrs	r0, 7
    1402:	fd cf       	rjmp	.-6      	; 0x13fe <rf_test_mode+0x20>
    1404:	85 e0       	ldi	r24, 0x05	; 5
    1406:	8e bd       	out	0x2e, r24	; 46
    1408:	0d b4       	in	r0, 0x2d	; 45
    140a:	07 fe       	sbrs	r0, 7
    140c:	fd cf       	rjmp	.-6      	; 0x1408 <rf_test_mode+0x2a>
    140e:	88 e0       	ldi	r24, 0x08	; 8
    1410:	8e bd       	out	0x2e, r24	; 46
    1412:	0d b4       	in	r0, 0x2d	; 45
    1414:	07 fe       	sbrs	r0, 7
    1416:	fd cf       	rjmp	.-6      	; 0x1412 <rf_test_mode+0x34>
    1418:	40 9a       	sbi	0x08, 0	; 8
    141a:	40 98       	cbi	0x08, 0	; 8
    141c:	8e e2       	ldi	r24, 0x2E	; 46
    141e:	8e bd       	out	0x2e, r24	; 46
    1420:	0d b4       	in	r0, 0x2d	; 45
    1422:	07 fe       	sbrs	r0, 7
    1424:	fd cf       	rjmp	.-6      	; 0x1420 <rf_test_mode+0x42>
    1426:	88 e1       	ldi	r24, 0x18	; 24
    1428:	8e bd       	out	0x2e, r24	; 46
    142a:	0d b4       	in	r0, 0x2d	; 45
    142c:	07 fe       	sbrs	r0, 7
    142e:	fd cf       	rjmp	.-6      	; 0x142a <rf_test_mode+0x4c>
    1430:	1e bc       	out	0x2e, r1	; 46
    1432:	0d b4       	in	r0, 0x2d	; 45
    1434:	07 fe       	sbrs	r0, 7
    1436:	fd cf       	rjmp	.-6      	; 0x1432 <rf_test_mode+0x54>
    1438:	40 9a       	sbi	0x08, 0	; 8
    143a:	0e 94 83 09 	call	0x1306	; 0x1306 <rf_flush_rx_fifo>
    143e:	80 91 51 06 	lds	r24, 0x0651
    1442:	90 91 52 06 	lds	r25, 0x0652
    1446:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    144a:	08 95       	ret

0000144c <rf_set_cca_thresh>:
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	08 2f       	mov	r16, r24
    1452:	80 91 51 06 	lds	r24, 0x0651
    1456:	90 91 52 06 	lds	r25, 0x0652
    145a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    145e:	11 27       	eor	r17, r17
    1460:	07 fd       	sbrc	r16, 7
    1462:	10 95       	com	r17
    1464:	30 2f       	mov	r19, r16
    1466:	22 27       	eor	r18, r18
    1468:	20 68       	ori	r18, 0x80	; 128
    146a:	40 98       	cbi	0x08, 0	; 8
    146c:	83 e1       	ldi	r24, 0x13	; 19
    146e:	8e bd       	out	0x2e, r24	; 46
    1470:	0d b4       	in	r0, 0x2d	; 45
    1472:	07 fe       	sbrs	r0, 7
    1474:	fd cf       	rjmp	.-6      	; 0x1470 <rf_set_cca_thresh+0x24>
    1476:	83 2f       	mov	r24, r19
    1478:	99 27       	eor	r25, r25
    147a:	8e bd       	out	0x2e, r24	; 46
    147c:	0d b4       	in	r0, 0x2d	; 45
    147e:	07 fe       	sbrs	r0, 7
    1480:	fd cf       	rjmp	.-6      	; 0x147c <rf_set_cca_thresh+0x30>
    1482:	2e bd       	out	0x2e, r18	; 46
    1484:	0d b4       	in	r0, 0x2d	; 45
    1486:	07 fe       	sbrs	r0, 7
    1488:	fd cf       	rjmp	.-6      	; 0x1484 <rf_set_cca_thresh+0x38>
    148a:	40 9a       	sbi	0x08, 0	; 8
    148c:	80 91 51 06 	lds	r24, 0x0651
    1490:	90 91 52 06 	lds	r25, 0x0652
    1494:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <rf_polling_rx_packet>:
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	24 97       	sbiw	r28, 0x04	; 4
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	80 91 51 06 	lds	r24, 0x0651
    14b6:	90 91 52 06 	lds	r25, 0x0652
    14ba:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    14be:	67 9b       	sbis	0x0c, 7	; 12
    14c0:	34 c2       	rjmp	.+1128   	; 0x192a <rf_polling_rx_packet+0x48c>
    14c2:	10 92 62 06 	sts	0x0662, r1
    14c6:	67 9b       	sbis	0x0c, 7	; 12
    14c8:	25 c0       	rjmp	.+74     	; 0x1514 <rf_polling_rx_packet+0x76>
    14ca:	31 99       	sbic	0x06, 1	; 6
    14cc:	23 c0       	rjmp	.+70     	; 0x1514 <rf_polling_rx_packet+0x76>
    14ce:	40 98       	cbi	0x08, 0	; 8
    14d0:	8f e7       	ldi	r24, 0x7F	; 127
    14d2:	8e bd       	out	0x2e, r24	; 46
    14d4:	0d b4       	in	r0, 0x2d	; 45
    14d6:	07 fe       	sbrs	r0, 7
    14d8:	fd cf       	rjmp	.-6      	; 0x14d4 <rf_polling_rx_packet+0x36>
    14da:	1e bc       	out	0x2e, r1	; 46
    14dc:	0d b4       	in	r0, 0x2d	; 45
    14de:	07 fe       	sbrs	r0, 7
    14e0:	fd cf       	rjmp	.-6      	; 0x14dc <rf_polling_rx_packet+0x3e>
    14e2:	8e b5       	in	r24, 0x2e	; 46
    14e4:	40 9a       	sbi	0x08, 0	; 8
    14e6:	40 98       	cbi	0x08, 0	; 8
    14e8:	88 e0       	ldi	r24, 0x08	; 8
    14ea:	8e bd       	out	0x2e, r24	; 46
    14ec:	0d b4       	in	r0, 0x2d	; 45
    14ee:	07 fe       	sbrs	r0, 7
    14f0:	fd cf       	rjmp	.-6      	; 0x14ec <rf_polling_rx_packet+0x4e>
    14f2:	40 9a       	sbi	0x08, 0	; 8
    14f4:	40 98       	cbi	0x08, 0	; 8
    14f6:	88 e0       	ldi	r24, 0x08	; 8
    14f8:	8e bd       	out	0x2e, r24	; 46
    14fa:	0d b4       	in	r0, 0x2d	; 45
    14fc:	07 fe       	sbrs	r0, 7
    14fe:	fd cf       	rjmp	.-6      	; 0x14fa <rf_polling_rx_packet+0x5c>
    1500:	40 9a       	sbi	0x08, 0	; 8
    1502:	80 91 51 06 	lds	r24, 0x0651
    1506:	90 91 52 06 	lds	r25, 0x0652
    150a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	9f ef       	ldi	r25, 0xFF	; 255
    1512:	13 c2       	rjmp	.+1062   	; 0x193a <rf_polling_rx_packet+0x49c>
    1514:	40 98       	cbi	0x08, 0	; 8
    1516:	8f e7       	ldi	r24, 0x7F	; 127
    1518:	8e bd       	out	0x2e, r24	; 46
    151a:	0d b4       	in	r0, 0x2d	; 45
    151c:	07 fe       	sbrs	r0, 7
    151e:	fd cf       	rjmp	.-6      	; 0x151a <rf_polling_rx_packet+0x7c>
    1520:	1e bc       	out	0x2e, r1	; 46
    1522:	0d b4       	in	r0, 0x2d	; 45
    1524:	07 fe       	sbrs	r0, 7
    1526:	fd cf       	rjmp	.-6      	; 0x1522 <rf_polling_rx_packet+0x84>
    1528:	4e b5       	in	r20, 0x2e	; 46
    152a:	40 9a       	sbi	0x08, 0	; 8
    152c:	4f 77       	andi	r20, 0x7F	; 127
    152e:	19 f5       	brne	.+70     	; 0x1576 <rf_polling_rx_packet+0xd8>
    1530:	40 98       	cbi	0x08, 0	; 8
    1532:	8f e7       	ldi	r24, 0x7F	; 127
    1534:	8e bd       	out	0x2e, r24	; 46
    1536:	0d b4       	in	r0, 0x2d	; 45
    1538:	07 fe       	sbrs	r0, 7
    153a:	fd cf       	rjmp	.-6      	; 0x1536 <rf_polling_rx_packet+0x98>
    153c:	1e bc       	out	0x2e, r1	; 46
    153e:	0d b4       	in	r0, 0x2d	; 45
    1540:	07 fe       	sbrs	r0, 7
    1542:	fd cf       	rjmp	.-6      	; 0x153e <rf_polling_rx_packet+0xa0>
    1544:	8e b5       	in	r24, 0x2e	; 46
    1546:	40 9a       	sbi	0x08, 0	; 8
    1548:	40 98       	cbi	0x08, 0	; 8
    154a:	88 e0       	ldi	r24, 0x08	; 8
    154c:	8e bd       	out	0x2e, r24	; 46
    154e:	0d b4       	in	r0, 0x2d	; 45
    1550:	07 fe       	sbrs	r0, 7
    1552:	fd cf       	rjmp	.-6      	; 0x154e <rf_polling_rx_packet+0xb0>
    1554:	40 9a       	sbi	0x08, 0	; 8
    1556:	40 98       	cbi	0x08, 0	; 8
    1558:	88 e0       	ldi	r24, 0x08	; 8
    155a:	8e bd       	out	0x2e, r24	; 46
    155c:	0d b4       	in	r0, 0x2d	; 45
    155e:	07 fe       	sbrs	r0, 7
    1560:	fd cf       	rjmp	.-6      	; 0x155c <rf_polling_rx_packet+0xbe>
    1562:	40 9a       	sbi	0x08, 0	; 8
    1564:	80 91 51 06 	lds	r24, 0x0651
    1568:	90 91 52 06 	lds	r25, 0x0652
    156c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1570:	8e ef       	ldi	r24, 0xFE	; 254
    1572:	9f ef       	ldi	r25, 0xFF	; 255
    1574:	e2 c1       	rjmp	.+964    	; 0x193a <rf_polling_rx_packet+0x49c>
    1576:	45 30       	cpi	r20, 0x05	; 5
    1578:	8c f0       	brlt	.+34     	; 0x159c <rf_polling_rx_packet+0xfe>
    157a:	e0 91 56 06 	lds	r30, 0x0656
    157e:	f0 91 57 06 	lds	r31, 0x0657
    1582:	24 2f       	mov	r18, r20
    1584:	33 27       	eor	r19, r19
    1586:	27 fd       	sbrc	r18, 7
    1588:	30 95       	com	r19
    158a:	2b 50       	subi	r18, 0x0B	; 11
    158c:	30 40       	sbci	r19, 0x00	; 0
    158e:	84 81       	ldd	r24, Z+4	; 0x04
    1590:	99 27       	eor	r25, r25
    1592:	87 fd       	sbrc	r24, 7
    1594:	90 95       	com	r25
    1596:	82 17       	cp	r24, r18
    1598:	93 07       	cpc	r25, r19
    159a:	f4 f5       	brge	.+124    	; 0x1618 <rf_polling_rx_packet+0x17a>
    159c:	40 98       	cbi	0x08, 0	; 8
    159e:	8f e7       	ldi	r24, 0x7F	; 127
    15a0:	8e bd       	out	0x2e, r24	; 46
    15a2:	0d b4       	in	r0, 0x2d	; 45
    15a4:	07 fe       	sbrs	r0, 7
    15a6:	fd cf       	rjmp	.-6      	; 0x15a2 <rf_polling_rx_packet+0x104>
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	24 2f       	mov	r18, r20
    15ae:	33 27       	eor	r19, r19
    15b0:	27 fd       	sbrc	r18, 7
    15b2:	30 95       	com	r19
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <rf_polling_rx_packet+0x124>
    15b6:	1e bc       	out	0x2e, r1	; 46
    15b8:	0d b4       	in	r0, 0x2d	; 45
    15ba:	07 fe       	sbrs	r0, 7
    15bc:	fd cf       	rjmp	.-6      	; 0x15b8 <rf_polling_rx_packet+0x11a>
    15be:	6f 5f       	subi	r22, 0xFF	; 255
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	86 2f       	mov	r24, r22
    15c4:	99 27       	eor	r25, r25
    15c6:	82 17       	cp	r24, r18
    15c8:	93 07       	cpc	r25, r19
    15ca:	14 f4       	brge	.+4      	; 0x15d0 <rf_polling_rx_packet+0x132>
    15cc:	31 99       	sbic	0x06, 1	; 6
    15ce:	f3 cf       	rjmp	.-26     	; 0x15b6 <rf_polling_rx_packet+0x118>
    15d0:	40 9a       	sbi	0x08, 0	; 8
    15d2:	40 98       	cbi	0x08, 0	; 8
    15d4:	8f e7       	ldi	r24, 0x7F	; 127
    15d6:	8e bd       	out	0x2e, r24	; 46
    15d8:	0d b4       	in	r0, 0x2d	; 45
    15da:	07 fe       	sbrs	r0, 7
    15dc:	fd cf       	rjmp	.-6      	; 0x15d8 <rf_polling_rx_packet+0x13a>
    15de:	1e bc       	out	0x2e, r1	; 46
    15e0:	0d b4       	in	r0, 0x2d	; 45
    15e2:	07 fe       	sbrs	r0, 7
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <rf_polling_rx_packet+0x142>
    15e6:	8e b5       	in	r24, 0x2e	; 46
    15e8:	40 9a       	sbi	0x08, 0	; 8
    15ea:	40 98       	cbi	0x08, 0	; 8
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	8e bd       	out	0x2e, r24	; 46
    15f0:	0d b4       	in	r0, 0x2d	; 45
    15f2:	07 fe       	sbrs	r0, 7
    15f4:	fd cf       	rjmp	.-6      	; 0x15f0 <rf_polling_rx_packet+0x152>
    15f6:	40 9a       	sbi	0x08, 0	; 8
    15f8:	40 98       	cbi	0x08, 0	; 8
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	8e bd       	out	0x2e, r24	; 46
    15fe:	0d b4       	in	r0, 0x2d	; 45
    1600:	07 fe       	sbrs	r0, 7
    1602:	fd cf       	rjmp	.-6      	; 0x15fe <rf_polling_rx_packet+0x160>
    1604:	40 9a       	sbi	0x08, 0	; 8
    1606:	80 91 51 06 	lds	r24, 0x0651
    160a:	90 91 52 06 	lds	r25, 0x0652
    160e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1612:	8d ef       	ldi	r24, 0xFD	; 253
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	91 c1       	rjmp	.+802    	; 0x193a <rf_polling_rx_packet+0x49c>
    1618:	e0 91 56 06 	lds	r30, 0x0656
    161c:	f0 91 57 06 	lds	r31, 0x0657
    1620:	4c 50       	subi	r20, 0x0C	; 12
    1622:	43 83       	std	Z+3, r20	; 0x03
    1624:	40 98       	cbi	0x08, 0	; 8
    1626:	8f e7       	ldi	r24, 0x7F	; 127
    1628:	8e bd       	out	0x2e, r24	; 46
    162a:	0d b4       	in	r0, 0x2d	; 45
    162c:	07 fe       	sbrs	r0, 7
    162e:	fd cf       	rjmp	.-6      	; 0x162a <rf_polling_rx_packet+0x18c>
    1630:	fe 01       	movw	r30, r28
    1632:	31 96       	adiw	r30, 0x01	; 1
    1634:	9e 01       	movw	r18, r28
    1636:	2d 5f       	subi	r18, 0xFD	; 253
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	1e bc       	out	0x2e, r1	; 46
    163c:	0d b4       	in	r0, 0x2d	; 45
    163e:	07 fe       	sbrs	r0, 7
    1640:	fd cf       	rjmp	.-6      	; 0x163c <rf_polling_rx_packet+0x19e>
    1642:	8e b5       	in	r24, 0x2e	; 46
    1644:	81 93       	st	Z+, r24
    1646:	e2 17       	cp	r30, r18
    1648:	f3 07       	cpc	r31, r19
    164a:	b9 f7       	brne	.-18     	; 0x163a <rf_polling_rx_packet+0x19c>
    164c:	40 9a       	sbi	0x08, 0	; 8
    164e:	e0 91 56 06 	lds	r30, 0x0656
    1652:	f0 91 57 06 	lds	r31, 0x0657
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	b5 e0       	ldi	r27, 0x05	; 5
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	ba 95       	dec	r27
    1662:	e1 f7       	brne	.-8      	; 0x165c <rf_polling_rx_packet+0x1be>
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	87 83       	std	Z+7, r24	; 0x07
    1668:	40 98       	cbi	0x08, 0	; 8
    166a:	8f e7       	ldi	r24, 0x7F	; 127
    166c:	8e bd       	out	0x2e, r24	; 46
    166e:	0d b4       	in	r0, 0x2d	; 45
    1670:	07 fe       	sbrs	r0, 7
    1672:	fd cf       	rjmp	.-6      	; 0x166e <rf_polling_rx_packet+0x1d0>
    1674:	1e bc       	out	0x2e, r1	; 46
    1676:	0d b4       	in	r0, 0x2d	; 45
    1678:	07 fe       	sbrs	r0, 7
    167a:	fd cf       	rjmp	.-6      	; 0x1676 <rf_polling_rx_packet+0x1d8>
    167c:	e0 91 56 06 	lds	r30, 0x0656
    1680:	f0 91 57 06 	lds	r31, 0x0657
    1684:	8e b5       	in	r24, 0x2e	; 46
    1686:	80 83       	st	Z, r24
    1688:	40 9a       	sbi	0x08, 0	; 8
    168a:	40 98       	cbi	0x08, 0	; 8
    168c:	8f e7       	ldi	r24, 0x7F	; 127
    168e:	8e bd       	out	0x2e, r24	; 46
    1690:	0d b4       	in	r0, 0x2d	; 45
    1692:	07 fe       	sbrs	r0, 7
    1694:	fd cf       	rjmp	.-6      	; 0x1690 <rf_polling_rx_packet+0x1f2>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <rf_polling_rx_packet+0x20a>
    169a:	1e bc       	out	0x2e, r1	; 46
    169c:	0d b4       	in	r0, 0x2d	; 45
    169e:	07 fe       	sbrs	r0, 7
    16a0:	fd cf       	rjmp	.-6      	; 0x169c <rf_polling_rx_packet+0x1fe>
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	11 f0       	breq	.+4      	; 0x16ac <rf_polling_rx_packet+0x20e>
    16a8:	31 99       	sbic	0x06, 1	; 6
    16aa:	f7 cf       	rjmp	.-18     	; 0x169a <rf_polling_rx_packet+0x1fc>
    16ac:	40 9a       	sbi	0x08, 0	; 8
    16ae:	40 98       	cbi	0x08, 0	; 8
    16b0:	8f e7       	ldi	r24, 0x7F	; 127
    16b2:	8e bd       	out	0x2e, r24	; 46
    16b4:	0d b4       	in	r0, 0x2d	; 45
    16b6:	07 fe       	sbrs	r0, 7
    16b8:	fd cf       	rjmp	.-6      	; 0x16b4 <rf_polling_rx_packet+0x216>
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	1e bc       	out	0x2e, r1	; 46
    16c0:	0d b4       	in	r0, 0x2d	; 45
    16c2:	07 fe       	sbrs	r0, 7
    16c4:	fd cf       	rjmp	.-6      	; 0x16c0 <rf_polling_rx_packet+0x222>
    16c6:	e0 91 56 06 	lds	r30, 0x0656
    16ca:	f0 91 57 06 	lds	r31, 0x0657
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	8e b5       	in	r24, 0x2e	; 46
    16d4:	81 83       	std	Z+1, r24	; 0x01
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	79 f7       	brne	.-34     	; 0x16be <rf_polling_rx_packet+0x220>
    16e0:	40 9a       	sbi	0x08, 0	; 8
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	83 ff       	sbrs	r24, 3
    16e8:	56 c0       	rjmp	.+172    	; 0x1796 <rf_polling_rx_packet+0x2f8>
    16ea:	40 98       	cbi	0x08, 0	; 8
    16ec:	8f e7       	ldi	r24, 0x7F	; 127
    16ee:	8e bd       	out	0x2e, r24	; 46
    16f0:	0d b4       	in	r0, 0x2d	; 45
    16f2:	07 fe       	sbrs	r0, 7
    16f4:	fd cf       	rjmp	.-6      	; 0x16f0 <rf_polling_rx_packet+0x252>
    16f6:	ed e4       	ldi	r30, 0x4D	; 77
    16f8:	f6 e0       	ldi	r31, 0x06	; 6
    16fa:	1e bc       	out	0x2e, r1	; 46
    16fc:	0d b4       	in	r0, 0x2d	; 45
    16fe:	07 fe       	sbrs	r0, 7
    1700:	fd cf       	rjmp	.-6      	; 0x16fc <rf_polling_rx_packet+0x25e>
    1702:	8e b5       	in	r24, 0x2e	; 46
    1704:	81 93       	st	Z+, r24
    1706:	86 e0       	ldi	r24, 0x06	; 6
    1708:	e1 35       	cpi	r30, 0x51	; 81
    170a:	f8 07       	cpc	r31, r24
    170c:	b1 f7       	brne	.-20     	; 0x16fa <rf_polling_rx_packet+0x25c>
    170e:	40 9a       	sbi	0x08, 0	; 8
    1710:	40 98       	cbi	0x08, 0	; 8
    1712:	89 e9       	ldi	r24, 0x99	; 153
    1714:	8e bd       	out	0x2e, r24	; 46
    1716:	0d b4       	in	r0, 0x2d	; 45
    1718:	07 fe       	sbrs	r0, 7
    171a:	fd cf       	rjmp	.-6      	; 0x1716 <rf_polling_rx_packet+0x278>
    171c:	80 e8       	ldi	r24, 0x80	; 128
    171e:	8e bd       	out	0x2e, r24	; 46
    1720:	0d b4       	in	r0, 0x2d	; 45
    1722:	07 fe       	sbrs	r0, 7
    1724:	fd cf       	rjmp	.-6      	; 0x1720 <rf_polling_rx_packet+0x282>
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	e9 2f       	mov	r30, r25
    172c:	ff 27       	eor	r31, r31
    172e:	e3 5b       	subi	r30, 0xB3	; 179
    1730:	f9 4f       	sbci	r31, 0xF9	; 249
    1732:	80 81       	ld	r24, Z
    1734:	8e bd       	out	0x2e, r24	; 46
    1736:	0d b4       	in	r0, 0x2d	; 45
    1738:	07 fe       	sbrs	r0, 7
    173a:	fd cf       	rjmp	.-6      	; 0x1736 <rf_polling_rx_packet+0x298>
    173c:	99 23       	and	r25, r25
    173e:	a1 f7       	brne	.-24     	; 0x1728 <rf_polling_rx_packet+0x28a>
    1740:	40 9a       	sbi	0x08, 0	; 8
    1742:	40 98       	cbi	0x08, 0	; 8
    1744:	8b e9       	ldi	r24, 0x9B	; 155
    1746:	8e bd       	out	0x2e, r24	; 46
    1748:	0d b4       	in	r0, 0x2d	; 45
    174a:	07 fe       	sbrs	r0, 7
    174c:	fd cf       	rjmp	.-6      	; 0x1748 <rf_polling_rx_packet+0x2aa>
    174e:	80 e8       	ldi	r24, 0x80	; 128
    1750:	8e bd       	out	0x2e, r24	; 46
    1752:	0d b4       	in	r0, 0x2d	; 45
    1754:	07 fe       	sbrs	r0, 7
    1756:	fd cf       	rjmp	.-6      	; 0x1752 <rf_polling_rx_packet+0x2b4>
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	91 50       	subi	r25, 0x01	; 1
    175c:	e9 2f       	mov	r30, r25
    175e:	ff 27       	eor	r31, r31
    1760:	e1 5b       	subi	r30, 0xB1	; 177
    1762:	f9 4f       	sbci	r31, 0xF9	; 249
    1764:	80 81       	ld	r24, Z
    1766:	8e bd       	out	0x2e, r24	; 46
    1768:	0d b4       	in	r0, 0x2d	; 45
    176a:	07 fe       	sbrs	r0, 7
    176c:	fd cf       	rjmp	.-6      	; 0x1768 <rf_polling_rx_packet+0x2ca>
    176e:	99 23       	and	r25, r25
    1770:	a1 f7       	brne	.-24     	; 0x175a <rf_polling_rx_packet+0x2bc>
    1772:	40 9a       	sbi	0x08, 0	; 8
    1774:	40 98       	cbi	0x08, 0	; 8
    1776:	8c e0       	ldi	r24, 0x0C	; 12
    1778:	8e bd       	out	0x2e, r24	; 46
    177a:	0d b4       	in	r0, 0x2d	; 45
    177c:	07 fe       	sbrs	r0, 7
    177e:	fd cf       	rjmp	.-6      	; 0x177a <rf_polling_rx_packet+0x2dc>
    1780:	40 9a       	sbi	0x08, 0	; 8
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 62 06 	sts	0x0662, r24
    1788:	e0 91 56 06 	lds	r30, 0x0656
    178c:	f0 91 57 06 	lds	r31, 0x0657
    1790:	83 81       	ldd	r24, Z+3	; 0x03
    1792:	84 50       	subi	r24, 0x04	; 4
    1794:	83 83       	std	Z+3, r24	; 0x03
    1796:	40 98       	cbi	0x08, 0	; 8
    1798:	8f e7       	ldi	r24, 0x7F	; 127
    179a:	8e bd       	out	0x2e, r24	; 46
    179c:	0d b4       	in	r0, 0x2d	; 45
    179e:	07 fe       	sbrs	r0, 7
    17a0:	fd cf       	rjmp	.-6      	; 0x179c <rf_polling_rx_packet+0x2fe>
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	11 c0       	rjmp	.+34     	; 0x17ca <rf_polling_rx_packet+0x32c>
    17a8:	1e bc       	out	0x2e, r1	; 46
    17aa:	0d b4       	in	r0, 0x2d	; 45
    17ac:	07 fe       	sbrs	r0, 7
    17ae:	fd cf       	rjmp	.-6      	; 0x17aa <rf_polling_rx_packet+0x30c>
    17b0:	e0 91 56 06 	lds	r30, 0x0656
    17b4:	f0 91 57 06 	lds	r31, 0x0657
    17b8:	05 80       	ldd	r0, Z+5	; 0x05
    17ba:	f6 81       	ldd	r31, Z+6	; 0x06
    17bc:	e0 2d       	mov	r30, r0
    17be:	e6 0f       	add	r30, r22
    17c0:	f1 1d       	adc	r31, r1
    17c2:	8e b5       	in	r24, 0x2e	; 46
    17c4:	80 83       	st	Z, r24
    17c6:	4f 5f       	subi	r20, 0xFF	; 255
    17c8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ca:	64 2f       	mov	r22, r20
    17cc:	e0 91 56 06 	lds	r30, 0x0656
    17d0:	f0 91 57 06 	lds	r31, 0x0657
    17d4:	24 2f       	mov	r18, r20
    17d6:	33 27       	eor	r19, r19
    17d8:	83 81       	ldd	r24, Z+3	; 0x03
    17da:	99 27       	eor	r25, r25
    17dc:	87 fd       	sbrc	r24, 7
    17de:	90 95       	com	r25
    17e0:	28 17       	cp	r18, r24
    17e2:	39 07       	cpc	r19, r25
    17e4:	0c f3       	brlt	.-62     	; 0x17a8 <rf_polling_rx_packet+0x30a>
    17e6:	40 9a       	sbi	0x08, 0	; 8
    17e8:	40 98       	cbi	0x08, 0	; 8
    17ea:	8f e7       	ldi	r24, 0x7F	; 127
    17ec:	8e bd       	out	0x2e, r24	; 46
    17ee:	0d b4       	in	r0, 0x2d	; 45
    17f0:	07 fc       	sbrc	r0, 7
    17f2:	0a c0       	rjmp	.+20     	; 0x1808 <rf_polling_rx_packet+0x36a>
    17f4:	fc cf       	rjmp	.-8      	; 0x17ee <rf_polling_rx_packet+0x350>
    17f6:	0d b4       	in	r0, 0x2d	; 45
    17f8:	07 fe       	sbrs	r0, 7
    17fa:	fd cf       	rjmp	.-6      	; 0x17f6 <rf_polling_rx_packet+0x358>
    17fc:	5e b5       	in	r21, 0x2e	; 46
    17fe:	40 9a       	sbi	0x08, 0	; 8
    1800:	40 98       	cbi	0x08, 0	; 8
    1802:	8f e7       	ldi	r24, 0x7F	; 127
    1804:	8e bd       	out	0x2e, r24	; 46
    1806:	02 c0       	rjmp	.+4      	; 0x180c <rf_polling_rx_packet+0x36e>
    1808:	1e bc       	out	0x2e, r1	; 46
    180a:	f5 cf       	rjmp	.-22     	; 0x17f6 <rf_polling_rx_packet+0x358>
    180c:	0d b4       	in	r0, 0x2d	; 45
    180e:	07 fe       	sbrs	r0, 7
    1810:	fd cf       	rjmp	.-6      	; 0x180c <rf_polling_rx_packet+0x36e>
    1812:	fe 01       	movw	r30, r28
    1814:	33 96       	adiw	r30, 0x03	; 3
    1816:	9e 01       	movw	r18, r28
    1818:	2b 5f       	subi	r18, 0xFB	; 251
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	1e bc       	out	0x2e, r1	; 46
    181e:	0d b4       	in	r0, 0x2d	; 45
    1820:	07 fe       	sbrs	r0, 7
    1822:	fd cf       	rjmp	.-6      	; 0x181e <rf_polling_rx_packet+0x380>
    1824:	8e b5       	in	r24, 0x2e	; 46
    1826:	81 93       	st	Z+, r24
    1828:	e2 17       	cp	r30, r18
    182a:	f3 07       	cpc	r31, r19
    182c:	b9 f7       	brne	.-18     	; 0x181c <rf_polling_rx_packet+0x37e>
    182e:	40 9a       	sbi	0x08, 0	; 8
    1830:	e0 91 56 06 	lds	r30, 0x0656
    1834:	f0 91 57 06 	lds	r31, 0x0657
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	80 87       	std	Z+8, r24	; 0x08
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	0a c0       	rjmp	.+20     	; 0x1858 <rf_polling_rx_packet+0x3ba>
    1844:	e0 91 56 06 	lds	r30, 0x0656
    1848:	f0 91 57 06 	lds	r31, 0x0657
    184c:	85 81       	ldd	r24, Z+5	; 0x05
    184e:	96 81       	ldd	r25, Z+6	; 0x06
    1850:	a8 0f       	add	r26, r24
    1852:	b9 1f       	adc	r27, r25
    1854:	8c 91       	ld	r24, X
    1856:	48 0f       	add	r20, r24
    1858:	82 2f       	mov	r24, r18
    185a:	e0 91 56 06 	lds	r30, 0x0656
    185e:	f0 91 57 06 	lds	r31, 0x0657
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	a8 2f       	mov	r26, r24
    1868:	bb 27       	eor	r27, r27
    186a:	83 81       	ldd	r24, Z+3	; 0x03
    186c:	99 27       	eor	r25, r25
    186e:	87 fd       	sbrc	r24, 7
    1870:	90 95       	com	r25
    1872:	a8 17       	cp	r26, r24
    1874:	b9 07       	cpc	r27, r25
    1876:	34 f3       	brlt	.-52     	; 0x1844 <rf_polling_rx_packet+0x3a6>
    1878:	45 17       	cp	r20, r21
    187a:	19 f1       	breq	.+70     	; 0x18c2 <rf_polling_rx_packet+0x424>
    187c:	40 98       	cbi	0x08, 0	; 8
    187e:	8f e7       	ldi	r24, 0x7F	; 127
    1880:	8e bd       	out	0x2e, r24	; 46
    1882:	0d b4       	in	r0, 0x2d	; 45
    1884:	07 fe       	sbrs	r0, 7
    1886:	fd cf       	rjmp	.-6      	; 0x1882 <rf_polling_rx_packet+0x3e4>
    1888:	1e bc       	out	0x2e, r1	; 46
    188a:	0d b4       	in	r0, 0x2d	; 45
    188c:	07 fe       	sbrs	r0, 7
    188e:	fd cf       	rjmp	.-6      	; 0x188a <rf_polling_rx_packet+0x3ec>
    1890:	8e b5       	in	r24, 0x2e	; 46
    1892:	40 9a       	sbi	0x08, 0	; 8
    1894:	40 98       	cbi	0x08, 0	; 8
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	8e bd       	out	0x2e, r24	; 46
    189a:	0d b4       	in	r0, 0x2d	; 45
    189c:	07 fe       	sbrs	r0, 7
    189e:	fd cf       	rjmp	.-6      	; 0x189a <rf_polling_rx_packet+0x3fc>
    18a0:	40 9a       	sbi	0x08, 0	; 8
    18a2:	40 98       	cbi	0x08, 0	; 8
    18a4:	88 e0       	ldi	r24, 0x08	; 8
    18a6:	8e bd       	out	0x2e, r24	; 46
    18a8:	0d b4       	in	r0, 0x2d	; 45
    18aa:	07 fe       	sbrs	r0, 7
    18ac:	fd cf       	rjmp	.-6      	; 0x18a8 <rf_polling_rx_packet+0x40a>
    18ae:	40 9a       	sbi	0x08, 0	; 8
    18b0:	80 91 51 06 	lds	r24, 0x0651
    18b4:	90 91 52 06 	lds	r25, 0x0652
    18b8:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    18bc:	8c ef       	ldi	r24, 0xFC	; 252
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	3c c0       	rjmp	.+120    	; 0x193a <rf_polling_rx_packet+0x49c>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	87 ff       	sbrs	r24, 7
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <rf_polling_rx_packet+0x446>
    18c8:	80 91 67 06 	lds	r24, 0x0667
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	80 93 67 06 	sts	0x0667, r24
    18d2:	80 91 51 06 	lds	r24, 0x0651
    18d6:	90 91 52 06 	lds	r25, 0x0652
    18da:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	2b c0       	rjmp	.+86     	; 0x193a <rf_polling_rx_packet+0x49c>
    18e4:	40 98       	cbi	0x08, 0	; 8
    18e6:	8f e7       	ldi	r24, 0x7F	; 127
    18e8:	8e bd       	out	0x2e, r24	; 46
    18ea:	0d b4       	in	r0, 0x2d	; 45
    18ec:	07 fe       	sbrs	r0, 7
    18ee:	fd cf       	rjmp	.-6      	; 0x18ea <rf_polling_rx_packet+0x44c>
    18f0:	1e bc       	out	0x2e, r1	; 46
    18f2:	0d b4       	in	r0, 0x2d	; 45
    18f4:	07 fe       	sbrs	r0, 7
    18f6:	fd cf       	rjmp	.-6      	; 0x18f2 <rf_polling_rx_packet+0x454>
    18f8:	8e b5       	in	r24, 0x2e	; 46
    18fa:	40 9a       	sbi	0x08, 0	; 8
    18fc:	40 98       	cbi	0x08, 0	; 8
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	8e bd       	out	0x2e, r24	; 46
    1902:	0d b4       	in	r0, 0x2d	; 45
    1904:	07 fe       	sbrs	r0, 7
    1906:	fd cf       	rjmp	.-6      	; 0x1902 <rf_polling_rx_packet+0x464>
    1908:	40 9a       	sbi	0x08, 0	; 8
    190a:	40 98       	cbi	0x08, 0	; 8
    190c:	88 e0       	ldi	r24, 0x08	; 8
    190e:	8e bd       	out	0x2e, r24	; 46
    1910:	0d b4       	in	r0, 0x2d	; 45
    1912:	07 fe       	sbrs	r0, 7
    1914:	fd cf       	rjmp	.-6      	; 0x1910 <rf_polling_rx_packet+0x472>
    1916:	40 9a       	sbi	0x08, 0	; 8
    1918:	80 91 51 06 	lds	r24, 0x0651
    191c:	90 91 52 06 	lds	r25, 0x0652
    1920:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1924:	8b ef       	ldi	r24, 0xFB	; 251
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	08 c0       	rjmp	.+16     	; 0x193a <rf_polling_rx_packet+0x49c>
    192a:	80 91 51 06 	lds	r24, 0x0651
    192e:	90 91 52 06 	lds	r25, 0x0652
    1932:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	24 96       	adiw	r28, 0x04	; 4
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <rf_rx_off>:
    194c:	80 91 51 06 	lds	r24, 0x0651
    1950:	90 91 52 06 	lds	r25, 0x0652
    1954:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1958:	10 92 5e 06 	sts	0x065E, r1
    195c:	40 98       	cbi	0x08, 0	; 8
    195e:	86 e0       	ldi	r24, 0x06	; 6
    1960:	8e bd       	out	0x2e, r24	; 46
    1962:	0d b4       	in	r0, 0x2d	; 45
    1964:	07 fe       	sbrs	r0, 7
    1966:	fd cf       	rjmp	.-6      	; 0x1962 <rf_rx_off+0x16>
    1968:	40 9a       	sbi	0x08, 0	; 8
    196a:	10 92 67 06 	sts	0x0667, r1
    196e:	80 91 51 06 	lds	r24, 0x0651
    1972:	90 91 52 06 	lds	r25, 0x0652
    1976:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    197a:	08 95       	ret

0000197c <rf_polling_rx_on>:
    197c:	80 91 51 06 	lds	r24, 0x0651
    1980:	90 91 52 06 	lds	r25, 0x0652
    1984:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	80 93 5e 06 	sts	0x065E, r24
    198e:	40 98       	cbi	0x08, 0	; 8
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	8e bd       	out	0x2e, r24	; 46
    1994:	0d b4       	in	r0, 0x2d	; 45
    1996:	07 fe       	sbrs	r0, 7
    1998:	fd cf       	rjmp	.-6      	; 0x1994 <rf_polling_rx_on+0x18>
    199a:	40 9a       	sbi	0x08, 0	; 8
    199c:	40 98       	cbi	0x08, 0	; 8
    199e:	88 e0       	ldi	r24, 0x08	; 8
    19a0:	8e bd       	out	0x2e, r24	; 46
    19a2:	0d b4       	in	r0, 0x2d	; 45
    19a4:	07 fe       	sbrs	r0, 7
    19a6:	fd cf       	rjmp	.-6      	; 0x19a2 <rf_polling_rx_on+0x26>
    19a8:	40 9a       	sbi	0x08, 0	; 8
    19aa:	10 92 67 06 	sts	0x0667, r1
    19ae:	80 91 51 06 	lds	r24, 0x0651
    19b2:	90 91 52 06 	lds	r25, 0x0652
    19b6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    19ba:	08 95       	ret

000019bc <rf_rx_on>:
    19bc:	80 91 51 06 	lds	r24, 0x0651
    19c0:	90 91 52 06 	lds	r25, 0x0652
    19c4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 5e 06 	sts	0x065E, r24
    19ce:	40 98       	cbi	0x08, 0	; 8
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	8e bd       	out	0x2e, r24	; 46
    19d4:	0d b4       	in	r0, 0x2d	; 45
    19d6:	07 fe       	sbrs	r0, 7
    19d8:	fd cf       	rjmp	.-6      	; 0x19d4 <rf_rx_on+0x18>
    19da:	40 9a       	sbi	0x08, 0	; 8
    19dc:	40 98       	cbi	0x08, 0	; 8
    19de:	88 e0       	ldi	r24, 0x08	; 8
    19e0:	8e bd       	out	0x2e, r24	; 46
    19e2:	0d b4       	in	r0, 0x2d	; 45
    19e4:	07 fe       	sbrs	r0, 7
    19e6:	fd cf       	rjmp	.-6      	; 0x19e2 <rf_rx_on+0x26>
    19e8:	40 9a       	sbi	0x08, 0	; 8
    19ea:	10 92 67 06 	sts	0x0667, r1
    19ee:	80 91 51 06 	lds	r24, 0x0651
    19f2:	90 91 52 06 	lds	r25, 0x0652
    19f6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    19fa:	08 95       	ret

000019fc <rf_tx_power>:
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    //if( bmac_rx_pkt_is_encrypted()==1 ) nrk_kprintf( PSTR( "Packet Encrypted\r\n" ));
    19fc:	1f 93       	push	r17
    19fe:	18 2f       	mov	r17, r24
   // printf ("Got RX packet len=%d RSSI=%d\n\r", len, rssi);
    for (i = 1; i < len - sizeof(AccelReading); i+=2) {
      value = (rx_buf[i] << 8) | rx_buf[i+1];
      if(value < 0) value = -32768 - value;
    1a00:	80 91 51 06 	lds	r24, 0x0651
    1a04:	90 91 52 06 	lds	r25, 0x0652
    1a08:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
      else value = 32768 - value;
      //  printf("%d,%d, \n\r",value,rx_buf[0]);
    }
    1a0c:	21 2f       	mov	r18, r17
    1a0e:	33 27       	eor	r19, r19
    1a10:	2f 71       	andi	r18, 0x1F	; 31
    1a12:	30 70       	andi	r19, 0x00	; 0
    1a14:	20 6e       	ori	r18, 0xE0	; 224
    1a16:	30 6a       	ori	r19, 0xA0	; 160

    1a18:	40 98       	cbi	0x08, 0	; 8
    1a1a:	85 e1       	ldi	r24, 0x15	; 21
    1a1c:	8e bd       	out	0x2e, r24	; 46
    1a1e:	0d b4       	in	r0, 0x2d	; 45
    1a20:	07 fe       	sbrs	r0, 7
    1a22:	fd cf       	rjmp	.-6      	; 0x1a1e <rf_tx_power+0x22>
    1a24:	83 2f       	mov	r24, r19
    1a26:	99 27       	eor	r25, r25
    1a28:	8e bd       	out	0x2e, r24	; 46
    1a2a:	0d b4       	in	r0, 0x2d	; 45
    1a2c:	07 fe       	sbrs	r0, 7
    1a2e:	fd cf       	rjmp	.-6      	; 0x1a2a <rf_tx_power+0x2e>
    1a30:	2e bd       	out	0x2e, r18	; 46
    1a32:	0d b4       	in	r0, 0x2d	; 45
    1a34:	07 fe       	sbrs	r0, 7
    1a36:	fd cf       	rjmp	.-6      	; 0x1a32 <rf_tx_power+0x36>
    1a38:	40 9a       	sbi	0x08, 0	; 8
    memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
    printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);
    1a3a:	80 91 51 06 	lds	r24, 0x0651
    1a3e:	90 91 52 06 	lds	r25, 0x0652
    1a42:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1a46:	1f 91       	pop	r17
    1a48:	08 95       	ret

00001a4a <rf_tx_packet>:
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	22 97       	sbiw	r28, 0x02	; 2
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8c 01       	movw	r16, r24
    1a68:	80 91 51 06 	lds	r24, 0x0651
    1a6c:	90 91 52 06 	lds	r25, 0x0652
    1a70:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1a74:	50 91 53 06 	lds	r21, 0x0653
    1a78:	55 23       	and	r21, r21
    1a7a:	39 f0       	breq	.+14     	; 0x1a8a <rf_tx_packet+0x40>
    1a7c:	40 98       	cbi	0x08, 0	; 8
    1a7e:	8d e0       	ldi	r24, 0x0D	; 13
    1a80:	8e bd       	out	0x2e, r24	; 46
    1a82:	0d b4       	in	r0, 0x2d	; 45
    1a84:	07 fe       	sbrs	r0, 7
    1a86:	fd cf       	rjmp	.-6      	; 0x1a82 <rf_tx_packet+0x38>
    1a88:	40 9a       	sbi	0x08, 0	; 8
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	42 81       	ldd	r20, Z+2	; 0x02
    1a8e:	64 2f       	mov	r22, r20
    1a90:	77 27       	eor	r23, r23
    1a92:	67 fd       	sbrc	r22, 7
    1a94:	70 95       	com	r23
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	08 c0       	rjmp	.+16     	; 0x1aae <rf_tx_packet+0x64>
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	83 81       	ldd	r24, Z+3	; 0x03
    1aa2:	94 81       	ldd	r25, Z+4	; 0x04
    1aa4:	e8 0e       	add	r14, r24
    1aa6:	f9 1e       	adc	r15, r25
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	80 81       	ld	r24, Z
    1aac:	a8 0f       	add	r26, r24
    1aae:	82 2f       	mov	r24, r18
    1ab0:	2f 5f       	subi	r18, 0xFF	; 255
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	e8 2e       	mov	r14, r24
    1ab6:	ff 24       	eor	r15, r15
    1ab8:	e6 16       	cp	r14, r22
    1aba:	f7 06       	cpc	r15, r23
    1abc:	84 f3       	brlt	.-32     	; 0x1a9e <rf_tx_packet+0x54>
    1abe:	94 2f       	mov	r25, r20
    1ac0:	94 5f       	subi	r25, 0xF4	; 244
    1ac2:	51 11       	cpse	r21, r1
    1ac4:	9c 5f       	subi	r25, 0xFC	; 252
    1ac6:	67 99       	sbic	0x0c, 7	; 12
    1ac8:	fe cf       	rjmp	.-4      	; 0x1ac6 <rf_tx_packet+0x7c>
    1aca:	4e 99       	sbic	0x09, 6	; 9
    1acc:	fc cf       	rjmp	.-8      	; 0x1ac6 <rf_tx_packet+0x7c>
    1ace:	f8 94       	cli
    1ad0:	40 98       	cbi	0x08, 0	; 8
    1ad2:	89 e0       	ldi	r24, 0x09	; 9
    1ad4:	8e bd       	out	0x2e, r24	; 46
    1ad6:	0d b4       	in	r0, 0x2d	; 45
    1ad8:	07 fe       	sbrs	r0, 7
    1ada:	fd cf       	rjmp	.-6      	; 0x1ad6 <rf_tx_packet+0x8c>
    1adc:	40 9a       	sbi	0x08, 0	; 8
    1ade:	40 98       	cbi	0x08, 0	; 8
    1ae0:	89 e0       	ldi	r24, 0x09	; 9
    1ae2:	8e bd       	out	0x2e, r24	; 46
    1ae4:	0d b4       	in	r0, 0x2d	; 45
    1ae6:	07 fe       	sbrs	r0, 7
    1ae8:	fd cf       	rjmp	.-6      	; 0x1ae4 <rf_tx_packet+0x9a>
    1aea:	40 9a       	sbi	0x08, 0	; 8
    1aec:	40 98       	cbi	0x08, 0	; 8
    1aee:	8e e3       	ldi	r24, 0x3E	; 62
    1af0:	8e bd       	out	0x2e, r24	; 46
    1af2:	0d b4       	in	r0, 0x2d	; 45
    1af4:	07 fc       	sbrc	r0, 7
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <rf_tx_packet+0xb8>
    1af8:	fc cf       	rjmp	.-8      	; 0x1af2 <rf_tx_packet+0xa8>
    1afa:	0d b4       	in	r0, 0x2d	; 45
    1afc:	07 fc       	sbrc	r0, 7
    1afe:	30 c1       	rjmp	.+608    	; 0x1d60 <rf_tx_packet+0x316>
    1b00:	fc cf       	rjmp	.-8      	; 0x1afa <rf_tx_packet+0xb0>
    1b02:	9e bd       	out	0x2e, r25	; 46
    1b04:	fa cf       	rjmp	.-12     	; 0x1afa <rf_tx_packet+0xb0>
    1b06:	81 e6       	ldi	r24, 0x61	; 97
    1b08:	98 e8       	ldi	r25, 0x88	; 136
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	55 23       	and	r21, r21
    1b10:	29 f0       	breq	.+10     	; 0x1b1c <rf_tx_packet+0xd2>
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	88 60       	ori	r24, 0x08	; 8
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	40 98       	cbi	0x08, 0	; 8
    1b1e:	8e e3       	ldi	r24, 0x3E	; 62
    1b20:	8e bd       	out	0x2e, r24	; 46
    1b22:	0d b4       	in	r0, 0x2d	; 45
    1b24:	07 fe       	sbrs	r0, 7
    1b26:	fd cf       	rjmp	.-6      	; 0x1b22 <rf_tx_packet+0xd8>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	31 96       	adiw	r30, 0x01	; 1
    1b2c:	9e 01       	movw	r18, r28
    1b2e:	2d 5f       	subi	r18, 0xFD	; 253
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	8e bd       	out	0x2e, r24	; 46
    1b36:	0d b4       	in	r0, 0x2d	; 45
    1b38:	07 fe       	sbrs	r0, 7
    1b3a:	fd cf       	rjmp	.-6      	; 0x1b36 <rf_tx_packet+0xec>
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	e2 17       	cp	r30, r18
    1b40:	f3 07       	cpc	r31, r19
    1b42:	b9 f7       	brne	.-18     	; 0x1b32 <rf_tx_packet+0xe8>
    1b44:	40 9a       	sbi	0x08, 0	; 8
    1b46:	40 98       	cbi	0x08, 0	; 8
    1b48:	8e e3       	ldi	r24, 0x3E	; 62
    1b4a:	8e bd       	out	0x2e, r24	; 46
    1b4c:	0d b4       	in	r0, 0x2d	; 45
    1b4e:	07 fc       	sbrc	r0, 7
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <rf_tx_packet+0x112>
    1b52:	fc cf       	rjmp	.-8      	; 0x1b4c <rf_tx_packet+0x102>
    1b54:	0d b4       	in	r0, 0x2d	; 45
    1b56:	07 fc       	sbrc	r0, 7
    1b58:	0e c1       	rjmp	.+540    	; 0x1d76 <rf_tx_packet+0x32c>
    1b5a:	fc cf       	rjmp	.-8      	; 0x1b54 <rf_tx_packet+0x10a>
    1b5c:	80 91 58 06 	lds	r24, 0x0658
    1b60:	8e bd       	out	0x2e, r24	; 46
    1b62:	f8 cf       	rjmp	.-16     	; 0x1b54 <rf_tx_packet+0x10a>
    1b64:	0d b4       	in	r0, 0x2d	; 45
    1b66:	07 fe       	sbrs	r0, 7
    1b68:	fd cf       	rjmp	.-6      	; 0x1b64 <rf_tx_packet+0x11a>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	f9 01       	movw	r30, r18
    1b70:	e6 5a       	subi	r30, 0xA6	; 166
    1b72:	f9 4f       	sbci	r31, 0xF9	; 249
    1b74:	80 81       	ld	r24, Z
    1b76:	8e bd       	out	0x2e, r24	; 46
    1b78:	0d b4       	in	r0, 0x2d	; 45
    1b7a:	07 fe       	sbrs	r0, 7
    1b7c:	fd cf       	rjmp	.-6      	; 0x1b78 <rf_tx_packet+0x12e>
    1b7e:	2f 5f       	subi	r18, 0xFF	; 255
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	99 f7       	brne	.-26     	; 0x1b6e <rf_tx_packet+0x124>
    1b88:	40 9a       	sbi	0x08, 0	; 8
    1b8a:	40 98       	cbi	0x08, 0	; 8
    1b8c:	8e e3       	ldi	r24, 0x3E	; 62
    1b8e:	8e bd       	out	0x2e, r24	; 46
    1b90:	0d b4       	in	r0, 0x2d	; 45
    1b92:	07 fe       	sbrs	r0, 7
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <rf_tx_packet+0x146>
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	e2 0f       	add	r30, r18
    1b9e:	f3 1f       	adc	r31, r19
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e bd       	out	0x2e, r24	; 46
    1ba4:	0d b4       	in	r0, 0x2d	; 45
    1ba6:	07 fe       	sbrs	r0, 7
    1ba8:	fd cf       	rjmp	.-6      	; 0x1ba4 <rf_tx_packet+0x15a>
    1baa:	2f 5f       	subi	r18, 0xFF	; 255
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	99 f7       	brne	.-26     	; 0x1b9a <rf_tx_packet+0x150>
    1bb4:	40 9a       	sbi	0x08, 0	; 8
    1bb6:	40 98       	cbi	0x08, 0	; 8
    1bb8:	8e e3       	ldi	r24, 0x3E	; 62
    1bba:	8e bd       	out	0x2e, r24	; 46
    1bbc:	0d b4       	in	r0, 0x2d	; 45
    1bbe:	07 fe       	sbrs	r0, 7
    1bc0:	fd cf       	rjmp	.-6      	; 0x1bbc <rf_tx_packet+0x172>
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	f9 01       	movw	r30, r18
    1bc8:	e4 5a       	subi	r30, 0xA4	; 164
    1bca:	f9 4f       	sbci	r31, 0xF9	; 249
    1bcc:	80 81       	ld	r24, Z
    1bce:	8e bd       	out	0x2e, r24	; 46
    1bd0:	0d b4       	in	r0, 0x2d	; 45
    1bd2:	07 fe       	sbrs	r0, 7
    1bd4:	fd cf       	rjmp	.-6      	; 0x1bd0 <rf_tx_packet+0x186>
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	99 f7       	brne	.-26     	; 0x1bc6 <rf_tx_packet+0x17c>
    1be0:	40 9a       	sbi	0x08, 0	; 8
    1be2:	55 23       	and	r21, r21
    1be4:	99 f0       	breq	.+38     	; 0x1c0c <rf_tx_packet+0x1c2>
    1be6:	40 98       	cbi	0x08, 0	; 8
    1be8:	8e e3       	ldi	r24, 0x3E	; 62
    1bea:	8e bd       	out	0x2e, r24	; 46
    1bec:	0d b4       	in	r0, 0x2d	; 45
    1bee:	07 fe       	sbrs	r0, 7
    1bf0:	fd cf       	rjmp	.-6      	; 0x1bec <rf_tx_packet+0x1a2>
    1bf2:	e3 e6       	ldi	r30, 0x63	; 99
    1bf4:	f6 e0       	ldi	r31, 0x06	; 6
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8e bd       	out	0x2e, r24	; 46
    1bfa:	0d b4       	in	r0, 0x2d	; 45
    1bfc:	07 fe       	sbrs	r0, 7
    1bfe:	fd cf       	rjmp	.-6      	; 0x1bfa <rf_tx_packet+0x1b0>
    1c00:	31 96       	adiw	r30, 0x01	; 1
    1c02:	86 e0       	ldi	r24, 0x06	; 6
    1c04:	e7 36       	cpi	r30, 0x67	; 103
    1c06:	f8 07       	cpc	r31, r24
    1c08:	b1 f7       	brne	.-20     	; 0x1bf6 <rf_tx_packet+0x1ac>
    1c0a:	40 9a       	sbi	0x08, 0	; 8
    1c0c:	40 98       	cbi	0x08, 0	; 8
    1c0e:	8e e3       	ldi	r24, 0x3E	; 62
    1c10:	8e bd       	out	0x2e, r24	; 46
    1c12:	0d b4       	in	r0, 0x2d	; 45
    1c14:	07 fe       	sbrs	r0, 7
    1c16:	fd cf       	rjmp	.-6      	; 0x1c12 <rf_tx_packet+0x1c8>
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <rf_tx_packet+0x1ee>
    1c1e:	f8 01       	movw	r30, r16
    1c20:	83 81       	ldd	r24, Z+3	; 0x03
    1c22:	94 81       	ldd	r25, Z+4	; 0x04
    1c24:	48 0f       	add	r20, r24
    1c26:	59 1f       	adc	r21, r25
    1c28:	fa 01       	movw	r30, r20
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8e bd       	out	0x2e, r24	; 46
    1c2e:	0d b4       	in	r0, 0x2d	; 45
    1c30:	07 fe       	sbrs	r0, 7
    1c32:	fd cf       	rjmp	.-6      	; 0x1c2e <rf_tx_packet+0x1e4>
    1c34:	2f 5f       	subi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	42 2f       	mov	r20, r18
    1c3a:	55 27       	eor	r21, r21
    1c3c:	46 17       	cp	r20, r22
    1c3e:	57 07       	cpc	r21, r23
    1c40:	74 f3       	brlt	.-36     	; 0x1c1e <rf_tx_packet+0x1d4>
    1c42:	40 9a       	sbi	0x08, 0	; 8
    1c44:	40 98       	cbi	0x08, 0	; 8
    1c46:	8e e3       	ldi	r24, 0x3E	; 62
    1c48:	8e bd       	out	0x2e, r24	; 46
    1c4a:	0d b4       	in	r0, 0x2d	; 45
    1c4c:	07 fc       	sbrc	r0, 7
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <rf_tx_packet+0x210>
    1c50:	fc cf       	rjmp	.-8      	; 0x1c4a <rf_tx_packet+0x200>
    1c52:	0d b4       	in	r0, 0x2d	; 45
    1c54:	07 fc       	sbrc	r0, 7
    1c56:	94 c0       	rjmp	.+296    	; 0x1d80 <rf_tx_packet+0x336>
    1c58:	fc cf       	rjmp	.-8      	; 0x1c52 <rf_tx_packet+0x208>
    1c5a:	ae bd       	out	0x2e, r26	; 46
    1c5c:	fa cf       	rjmp	.-12     	; 0x1c52 <rf_tx_packet+0x208>
    1c5e:	80 91 5e 06 	lds	r24, 0x065E
    1c62:	88 23       	and	r24, r24
    1c64:	39 f4       	brne	.+14     	; 0x1c74 <rf_tx_packet+0x22a>
    1c66:	40 98       	cbi	0x08, 0	; 8
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	8e bd       	out	0x2e, r24	; 46
    1c6c:	0d b4       	in	r0, 0x2d	; 45
    1c6e:	07 fe       	sbrs	r0, 7
    1c70:	fd cf       	rjmp	.-6      	; 0x1c6c <rf_tx_packet+0x222>
    1c72:	40 9a       	sbi	0x08, 0	; 8
    1c74:	40 98       	cbi	0x08, 0	; 8
    1c76:	1e bc       	out	0x2e, r1	; 46
    1c78:	0d b4       	in	r0, 0x2d	; 45
    1c7a:	07 fe       	sbrs	r0, 7
    1c7c:	fd cf       	rjmp	.-6      	; 0x1c78 <rf_tx_packet+0x22e>
    1c7e:	8e b5       	in	r24, 0x2e	; 46
    1c80:	40 9a       	sbi	0x08, 0	; 8
    1c82:	81 ff       	sbrs	r24, 1
    1c84:	f7 cf       	rjmp	.-18     	; 0x1c74 <rf_tx_packet+0x22a>
    1c86:	00 e0       	ldi	r16, 0x00	; 0
    1c88:	40 98       	cbi	0x08, 0	; 8
    1c8a:	85 e0       	ldi	r24, 0x05	; 5
    1c8c:	8e bd       	out	0x2e, r24	; 46
    1c8e:	0d b4       	in	r0, 0x2d	; 45
    1c90:	07 fe       	sbrs	r0, 7
    1c92:	fd cf       	rjmp	.-6      	; 0x1c8e <rf_tx_packet+0x244>
    1c94:	40 9a       	sbi	0x08, 0	; 8
    1c96:	40 98       	cbi	0x08, 0	; 8
    1c98:	1e bc       	out	0x2e, r1	; 46
    1c9a:	0d b4       	in	r0, 0x2d	; 45
    1c9c:	07 fe       	sbrs	r0, 7
    1c9e:	fd cf       	rjmp	.-6      	; 0x1c9a <rf_tx_packet+0x250>
    1ca0:	1e b5       	in	r17, 0x2e	; 46
    1ca2:	40 9a       	sbi	0x08, 0	; 8
    1ca4:	0f 5f       	subi	r16, 0xFF	; 255
    1ca6:	05 36       	cpi	r16, 0x65	; 101
    1ca8:	51 f4       	brne	.+20     	; 0x1cbe <rf_tx_packet+0x274>
    1caa:	78 94       	sei
    1cac:	80 91 51 06 	lds	r24, 0x0651
    1cb0:	90 91 52 06 	lds	r25, 0x0652
    1cb4:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	68 c0       	rjmp	.+208    	; 0x1d8e <rf_tx_packet+0x344>
    1cbe:	84 e6       	ldi	r24, 0x64	; 100
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <halWait>
    1cc6:	13 fd       	sbrc	r17, 3
    1cc8:	08 c0       	rjmp	.+16     	; 0x1cda <rf_tx_packet+0x290>
    1cca:	de cf       	rjmp	.-68     	; 0x1c88 <rf_tx_packet+0x23e>
    1ccc:	40 98       	cbi	0x08, 0	; 8
    1cce:	84 e0       	ldi	r24, 0x04	; 4
    1cd0:	8e bd       	out	0x2e, r24	; 46
    1cd2:	0d b4       	in	r0, 0x2d	; 45
    1cd4:	07 fe       	sbrs	r0, 7
    1cd6:	fd cf       	rjmp	.-6      	; 0x1cd2 <rf_tx_packet+0x288>
    1cd8:	40 9a       	sbi	0x08, 0	; 8
    1cda:	78 94       	sei
    1cdc:	4e 9b       	sbis	0x09, 6	; 9
    1cde:	fe cf       	rjmp	.-4      	; 0x1cdc <rf_tx_packet+0x292>
    1ce0:	4e 99       	sbic	0x09, 6	; 9
    1ce2:	fe cf       	rjmp	.-4      	; 0x1ce0 <rf_tx_packet+0x296>
    1ce4:	80 91 61 06 	lds	r24, 0x0661
    1ce8:	88 23       	and	r24, r24
    1cea:	91 f0       	breq	.+36     	; 0x1d10 <rf_tx_packet+0x2c6>
    1cec:	84 ea       	ldi	r24, 0xA4	; 164
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <halWait>
    1cf4:	31 9b       	sbis	0x06, 1	; 6
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <rf_tx_packet+0x2ca>
    1cf8:	40 98       	cbi	0x08, 0	; 8
    1cfa:	8f e7       	ldi	r24, 0x7F	; 127
    1cfc:	8e bd       	out	0x2e, r24	; 46
    1cfe:	0d b4       	in	r0, 0x2d	; 45
    1d00:	07 fe       	sbrs	r0, 7
    1d02:	fd cf       	rjmp	.-6      	; 0x1cfe <rf_tx_packet+0x2b4>
    1d04:	1e bc       	out	0x2e, r1	; 46
    1d06:	0d b4       	in	r0, 0x2d	; 45
    1d08:	07 fe       	sbrs	r0, 7
    1d0a:	fd cf       	rjmp	.-6      	; 0x1d06 <rf_tx_packet+0x2bc>
    1d0c:	8e b5       	in	r24, 0x2e	; 46
    1d0e:	40 9a       	sbi	0x08, 0	; 8
    1d10:	11 e0       	ldi	r17, 0x01	; 1
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <rf_tx_packet+0x2e8>
    1d14:	40 98       	cbi	0x08, 0	; 8
    1d16:	88 e0       	ldi	r24, 0x08	; 8
    1d18:	8e bd       	out	0x2e, r24	; 46
    1d1a:	0d b4       	in	r0, 0x2d	; 45
    1d1c:	07 fe       	sbrs	r0, 7
    1d1e:	fd cf       	rjmp	.-6      	; 0x1d1a <rf_tx_packet+0x2d0>
    1d20:	40 9a       	sbi	0x08, 0	; 8
    1d22:	40 98       	cbi	0x08, 0	; 8
    1d24:	88 e0       	ldi	r24, 0x08	; 8
    1d26:	8e bd       	out	0x2e, r24	; 46
    1d28:	0d b4       	in	r0, 0x2d	; 45
    1d2a:	07 fe       	sbrs	r0, 7
    1d2c:	fd cf       	rjmp	.-6      	; 0x1d28 <rf_tx_packet+0x2de>
    1d2e:	40 9a       	sbi	0x08, 0	; 8
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	f8 94       	cli
    1d34:	40 98       	cbi	0x08, 0	; 8
    1d36:	86 e0       	ldi	r24, 0x06	; 6
    1d38:	8e bd       	out	0x2e, r24	; 46
    1d3a:	0d b4       	in	r0, 0x2d	; 45
    1d3c:	07 fe       	sbrs	r0, 7
    1d3e:	fd cf       	rjmp	.-6      	; 0x1d3a <rf_tx_packet+0x2f0>
    1d40:	40 9a       	sbi	0x08, 0	; 8
    1d42:	78 94       	sei
    1d44:	80 91 58 06 	lds	r24, 0x0658
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	80 93 58 06 	sts	0x0658, r24
    1d4e:	80 91 51 06 	lds	r24, 0x0651
    1d52:	90 91 52 06 	lds	r25, 0x0652
    1d56:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1d5a:	81 2f       	mov	r24, r17
    1d5c:	99 27       	eor	r25, r25
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <rf_tx_packet+0x344>
    1d60:	40 9a       	sbi	0x08, 0	; 8
    1d62:	81 e4       	ldi	r24, 0x41	; 65
    1d64:	98 e8       	ldi	r25, 0x88	; 136
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	80 91 61 06 	lds	r24, 0x0661
    1d6e:	88 23       	and	r24, r24
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <rf_tx_packet+0x32a>
    1d72:	c9 ce       	rjmp	.-622    	; 0x1b06 <rf_tx_packet+0xbc>
    1d74:	cc ce       	rjmp	.-616    	; 0x1b0e <rf_tx_packet+0xc4>
    1d76:	40 9a       	sbi	0x08, 0	; 8
    1d78:	40 98       	cbi	0x08, 0	; 8
    1d7a:	8e e3       	ldi	r24, 0x3E	; 62
    1d7c:	8e bd       	out	0x2e, r24	; 46
    1d7e:	f2 ce       	rjmp	.-540    	; 0x1b64 <rf_tx_packet+0x11a>
    1d80:	40 9a       	sbi	0x08, 0	; 8
    1d82:	f8 01       	movw	r30, r16
    1d84:	85 81       	ldd	r24, Z+5	; 0x05
    1d86:	88 23       	and	r24, r24
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <rf_tx_packet+0x342>
    1d8a:	69 cf       	rjmp	.-302    	; 0x1c5e <rf_tx_packet+0x214>
    1d8c:	9f cf       	rjmp	.-194    	; 0x1ccc <rf_tx_packet+0x282>
    1d8e:	22 96       	adiw	r28, 0x02	; 2
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	08 95       	ret

00001da8 <rf_tx_tdma_packet>:
    1da8:	bf 92       	push	r11
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	22 97       	sbiw	r28, 0x02	; 2
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	8c 01       	movw	r16, r24
    1dcc:	6b 01       	movw	r12, r22
    1dce:	7a 01       	movw	r14, r20
    1dd0:	80 91 51 06 	lds	r24, 0x0651
    1dd4:	90 91 52 06 	lds	r25, 0x0652
    1dd8:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    1ddc:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    1de0:	40 98       	cbi	0x08, 0	; 8
    1de2:	88 e0       	ldi	r24, 0x08	; 8
    1de4:	8e bd       	out	0x2e, r24	; 46
    1de6:	0d b4       	in	r0, 0x2d	; 45
    1de8:	07 fe       	sbrs	r0, 7
    1dea:	fd cf       	rjmp	.-6      	; 0x1de6 <rf_tx_tdma_packet+0x3e>
    1dec:	40 9a       	sbi	0x08, 0	; 8
    1dee:	40 98       	cbi	0x08, 0	; 8
    1df0:	88 e0       	ldi	r24, 0x08	; 8
    1df2:	8e bd       	out	0x2e, r24	; 46
    1df4:	0d b4       	in	r0, 0x2d	; 45
    1df6:	07 fe       	sbrs	r0, 7
    1df8:	fd cf       	rjmp	.-6      	; 0x1df4 <rf_tx_tdma_packet+0x4c>
    1dfa:	40 9a       	sbi	0x08, 0	; 8
    1dfc:	67 99       	sbic	0x0c, 7	; 12
    1dfe:	fe cf       	rjmp	.-4      	; 0x1dfc <rf_tx_tdma_packet+0x54>
    1e00:	4e 99       	sbic	0x09, 6	; 9
    1e02:	fc cf       	rjmp	.-8      	; 0x1dfc <rf_tx_tdma_packet+0x54>
    1e04:	f8 94       	cli
    1e06:	40 98       	cbi	0x08, 0	; 8
    1e08:	89 e0       	ldi	r24, 0x09	; 9
    1e0a:	8e bd       	out	0x2e, r24	; 46
    1e0c:	0d b4       	in	r0, 0x2d	; 45
    1e0e:	07 fe       	sbrs	r0, 7
    1e10:	fd cf       	rjmp	.-6      	; 0x1e0c <rf_tx_tdma_packet+0x64>
    1e12:	40 9a       	sbi	0x08, 0	; 8
    1e14:	40 98       	cbi	0x08, 0	; 8
    1e16:	89 e0       	ldi	r24, 0x09	; 9
    1e18:	8e bd       	out	0x2e, r24	; 46
    1e1a:	0d b4       	in	r0, 0x2d	; 45
    1e1c:	07 fe       	sbrs	r0, 7
    1e1e:	fd cf       	rjmp	.-6      	; 0x1e1a <rf_tx_tdma_packet+0x72>
    1e20:	40 9a       	sbi	0x08, 0	; 8
    1e22:	f8 01       	movw	r30, r16
    1e24:	62 81       	ldd	r22, Z+2	; 0x02
    1e26:	46 2f       	mov	r20, r22
    1e28:	55 27       	eor	r21, r21
    1e2a:	47 fd       	sbrc	r20, 7
    1e2c:	50 95       	com	r21
    1e2e:	bb 24       	eor	r11, r11
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	07 c0       	rjmp	.+14     	; 0x1e44 <rf_tx_tdma_packet+0x9c>
    1e36:	f8 01       	movw	r30, r16
    1e38:	83 81       	ldd	r24, Z+3	; 0x03
    1e3a:	94 81       	ldd	r25, Z+4	; 0x04
    1e3c:	a8 0f       	add	r26, r24
    1e3e:	b9 1f       	adc	r27, r25
    1e40:	8c 91       	ld	r24, X
    1e42:	b8 0e       	add	r11, r24
    1e44:	82 2f       	mov	r24, r18
    1e46:	2f 5f       	subi	r18, 0xFF	; 255
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	a8 2f       	mov	r26, r24
    1e4c:	bb 27       	eor	r27, r27
    1e4e:	a4 17       	cp	r26, r20
    1e50:	b5 07       	cpc	r27, r21
    1e52:	8c f3       	brlt	.-30     	; 0x1e36 <rf_tx_tdma_packet+0x8e>
    1e54:	96 2f       	mov	r25, r22
    1e56:	94 5f       	subi	r25, 0xF4	; 244
    1e58:	40 98       	cbi	0x08, 0	; 8
    1e5a:	8e e3       	ldi	r24, 0x3E	; 62
    1e5c:	8e bd       	out	0x2e, r24	; 46
    1e5e:	0d b4       	in	r0, 0x2d	; 45
    1e60:	07 fc       	sbrc	r0, 7
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <rf_tx_tdma_packet+0xc6>
    1e64:	fc cf       	rjmp	.-8      	; 0x1e5e <rf_tx_tdma_packet+0xb6>
    1e66:	0d b4       	in	r0, 0x2d	; 45
    1e68:	07 fc       	sbrc	r0, 7
    1e6a:	16 c1       	rjmp	.+556    	; 0x2098 <rf_tx_tdma_packet+0x2f0>
    1e6c:	fc cf       	rjmp	.-8      	; 0x1e66 <rf_tx_tdma_packet+0xbe>
    1e6e:	9e bd       	out	0x2e, r25	; 46
    1e70:	fa cf       	rjmp	.-12     	; 0x1e66 <rf_tx_tdma_packet+0xbe>
    1e72:	81 e6       	ldi	r24, 0x61	; 97
    1e74:	98 e8       	ldi	r25, 0x88	; 136
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	40 98       	cbi	0x08, 0	; 8
    1e7c:	8e e3       	ldi	r24, 0x3E	; 62
    1e7e:	8e bd       	out	0x2e, r24	; 46
    1e80:	0d b4       	in	r0, 0x2d	; 45
    1e82:	07 fe       	sbrs	r0, 7
    1e84:	fd cf       	rjmp	.-6      	; 0x1e80 <rf_tx_tdma_packet+0xd8>
    1e86:	fe 01       	movw	r30, r28
    1e88:	31 96       	adiw	r30, 0x01	; 1
    1e8a:	9e 01       	movw	r18, r28
    1e8c:	2d 5f       	subi	r18, 0xFD	; 253
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	8e bd       	out	0x2e, r24	; 46
    1e94:	0d b4       	in	r0, 0x2d	; 45
    1e96:	07 fe       	sbrs	r0, 7
    1e98:	fd cf       	rjmp	.-6      	; 0x1e94 <rf_tx_tdma_packet+0xec>
    1e9a:	31 96       	adiw	r30, 0x01	; 1
    1e9c:	e2 17       	cp	r30, r18
    1e9e:	f3 07       	cpc	r31, r19
    1ea0:	b9 f7       	brne	.-18     	; 0x1e90 <rf_tx_tdma_packet+0xe8>
    1ea2:	40 9a       	sbi	0x08, 0	; 8
    1ea4:	40 98       	cbi	0x08, 0	; 8
    1ea6:	8e e3       	ldi	r24, 0x3E	; 62
    1ea8:	8e bd       	out	0x2e, r24	; 46
    1eaa:	0d b4       	in	r0, 0x2d	; 45
    1eac:	07 fc       	sbrc	r0, 7
    1eae:	05 c0       	rjmp	.+10     	; 0x1eba <rf_tx_tdma_packet+0x112>
    1eb0:	fc cf       	rjmp	.-8      	; 0x1eaa <rf_tx_tdma_packet+0x102>
    1eb2:	0d b4       	in	r0, 0x2d	; 45
    1eb4:	07 fc       	sbrc	r0, 7
    1eb6:	f9 c0       	rjmp	.+498    	; 0x20aa <rf_tx_tdma_packet+0x302>
    1eb8:	fc cf       	rjmp	.-8      	; 0x1eb2 <rf_tx_tdma_packet+0x10a>
    1eba:	80 91 58 06 	lds	r24, 0x0658
    1ebe:	8e bd       	out	0x2e, r24	; 46
    1ec0:	f8 cf       	rjmp	.-16     	; 0x1eb2 <rf_tx_tdma_packet+0x10a>
    1ec2:	0d b4       	in	r0, 0x2d	; 45
    1ec4:	07 fe       	sbrs	r0, 7
    1ec6:	fd cf       	rjmp	.-6      	; 0x1ec2 <rf_tx_tdma_packet+0x11a>
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	f9 01       	movw	r30, r18
    1ece:	e6 5a       	subi	r30, 0xA6	; 166
    1ed0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8e bd       	out	0x2e, r24	; 46
    1ed6:	0d b4       	in	r0, 0x2d	; 45
    1ed8:	07 fe       	sbrs	r0, 7
    1eda:	fd cf       	rjmp	.-6      	; 0x1ed6 <rf_tx_tdma_packet+0x12e>
    1edc:	2f 5f       	subi	r18, 0xFF	; 255
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	22 30       	cpi	r18, 0x02	; 2
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	99 f7       	brne	.-26     	; 0x1ecc <rf_tx_tdma_packet+0x124>
    1ee6:	40 9a       	sbi	0x08, 0	; 8
    1ee8:	40 98       	cbi	0x08, 0	; 8
    1eea:	8e e3       	ldi	r24, 0x3E	; 62
    1eec:	8e bd       	out	0x2e, r24	; 46
    1eee:	0d b4       	in	r0, 0x2d	; 45
    1ef0:	07 fe       	sbrs	r0, 7
    1ef2:	fd cf       	rjmp	.-6      	; 0x1eee <rf_tx_tdma_packet+0x146>
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	f8 01       	movw	r30, r16
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	80 81       	ld	r24, Z
    1f00:	8e bd       	out	0x2e, r24	; 46
    1f02:	0d b4       	in	r0, 0x2d	; 45
    1f04:	07 fe       	sbrs	r0, 7
    1f06:	fd cf       	rjmp	.-6      	; 0x1f02 <rf_tx_tdma_packet+0x15a>
    1f08:	2f 5f       	subi	r18, 0xFF	; 255
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	22 30       	cpi	r18, 0x02	; 2
    1f0e:	31 05       	cpc	r19, r1
    1f10:	99 f7       	brne	.-26     	; 0x1ef8 <rf_tx_tdma_packet+0x150>
    1f12:	40 9a       	sbi	0x08, 0	; 8
    1f14:	40 98       	cbi	0x08, 0	; 8
    1f16:	8e e3       	ldi	r24, 0x3E	; 62
    1f18:	8e bd       	out	0x2e, r24	; 46
    1f1a:	0d b4       	in	r0, 0x2d	; 45
    1f1c:	07 fe       	sbrs	r0, 7
    1f1e:	fd cf       	rjmp	.-6      	; 0x1f1a <rf_tx_tdma_packet+0x172>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	f9 01       	movw	r30, r18
    1f26:	e4 5a       	subi	r30, 0xA4	; 164
    1f28:	f9 4f       	sbci	r31, 0xF9	; 249
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8e bd       	out	0x2e, r24	; 46
    1f2e:	0d b4       	in	r0, 0x2d	; 45
    1f30:	07 fe       	sbrs	r0, 7
    1f32:	fd cf       	rjmp	.-6      	; 0x1f2e <rf_tx_tdma_packet+0x186>
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	99 f7       	brne	.-26     	; 0x1f24 <rf_tx_tdma_packet+0x17c>
    1f3e:	40 9a       	sbi	0x08, 0	; 8
    1f40:	b7 01       	movw	r22, r14
    1f42:	c6 01       	movw	r24, r12
    1f44:	0e 94 cb 2a 	call	0x5596	; 0x5596 <nrk_high_speed_timer_wait>
    1f48:	f8 01       	movw	r30, r16
    1f4a:	85 81       	ldd	r24, Z+5	; 0x05
    1f4c:	88 23       	and	r24, r24
    1f4e:	c1 f1       	breq	.+112    	; 0x1fc0 <rf_tx_tdma_packet+0x218>
    1f50:	80 91 5e 06 	lds	r24, 0x065E
    1f54:	88 23       	and	r24, r24
    1f56:	39 f4       	brne	.+14     	; 0x1f66 <rf_tx_tdma_packet+0x1be>
    1f58:	40 98       	cbi	0x08, 0	; 8
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	8e bd       	out	0x2e, r24	; 46
    1f5e:	0d b4       	in	r0, 0x2d	; 45
    1f60:	07 fe       	sbrs	r0, 7
    1f62:	fd cf       	rjmp	.-6      	; 0x1f5e <rf_tx_tdma_packet+0x1b6>
    1f64:	40 9a       	sbi	0x08, 0	; 8
    1f66:	40 98       	cbi	0x08, 0	; 8
    1f68:	1e bc       	out	0x2e, r1	; 46
    1f6a:	0d b4       	in	r0, 0x2d	; 45
    1f6c:	07 fe       	sbrs	r0, 7
    1f6e:	fd cf       	rjmp	.-6      	; 0x1f6a <rf_tx_tdma_packet+0x1c2>
    1f70:	8e b5       	in	r24, 0x2e	; 46
    1f72:	40 9a       	sbi	0x08, 0	; 8
    1f74:	81 ff       	sbrs	r24, 1
    1f76:	f7 cf       	rjmp	.-18     	; 0x1f66 <rf_tx_tdma_packet+0x1be>
    1f78:	ee 24       	eor	r14, r14
    1f7a:	40 98       	cbi	0x08, 0	; 8
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
    1f7e:	8e bd       	out	0x2e, r24	; 46
    1f80:	0d b4       	in	r0, 0x2d	; 45
    1f82:	07 fe       	sbrs	r0, 7
    1f84:	fd cf       	rjmp	.-6      	; 0x1f80 <rf_tx_tdma_packet+0x1d8>
    1f86:	40 9a       	sbi	0x08, 0	; 8
    1f88:	40 98       	cbi	0x08, 0	; 8
    1f8a:	1e bc       	out	0x2e, r1	; 46
    1f8c:	0d b4       	in	r0, 0x2d	; 45
    1f8e:	07 fe       	sbrs	r0, 7
    1f90:	fd cf       	rjmp	.-6      	; 0x1f8c <rf_tx_tdma_packet+0x1e4>
    1f92:	fe b4       	in	r15, 0x2e	; 46
    1f94:	40 9a       	sbi	0x08, 0	; 8
    1f96:	e3 94       	inc	r14
    1f98:	f5 e6       	ldi	r31, 0x65	; 101
    1f9a:	ef 16       	cp	r14, r31
    1f9c:	51 f4       	brne	.+20     	; 0x1fb2 <rf_tx_tdma_packet+0x20a>
    1f9e:	78 94       	sei
    1fa0:	80 91 51 06 	lds	r24, 0x0651
    1fa4:	90 91 52 06 	lds	r25, 0x0652
    1fa8:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	83 c0       	rjmp	.+262    	; 0x20b8 <rf_tx_tdma_packet+0x310>
    1fb2:	84 e6       	ldi	r24, 0x64	; 100
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <halWait>
    1fba:	f3 fc       	sbrc	r15, 3
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <rf_tx_tdma_packet+0x226>
    1fbe:	dd cf       	rjmp	.-70     	; 0x1f7a <rf_tx_tdma_packet+0x1d2>
    1fc0:	40 98       	cbi	0x08, 0	; 8
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	8e bd       	out	0x2e, r24	; 46
    1fc6:	0d b4       	in	r0, 0x2d	; 45
    1fc8:	07 fe       	sbrs	r0, 7
    1fca:	fd cf       	rjmp	.-6      	; 0x1fc6 <rf_tx_tdma_packet+0x21e>
    1fcc:	40 9a       	sbi	0x08, 0	; 8
    1fce:	40 98       	cbi	0x08, 0	; 8
    1fd0:	8e e3       	ldi	r24, 0x3E	; 62
    1fd2:	8e bd       	out	0x2e, r24	; 46
    1fd4:	0d b4       	in	r0, 0x2d	; 45
    1fd6:	07 fe       	sbrs	r0, 7
    1fd8:	fd cf       	rjmp	.-6      	; 0x1fd4 <rf_tx_tdma_packet+0x22c>
    1fda:	f8 01       	movw	r30, r16
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	48 2f       	mov	r20, r24
    1fe0:	55 27       	eor	r21, r21
    1fe2:	47 fd       	sbrc	r20, 7
    1fe4:	50 95       	com	r21
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	0c c0       	rjmp	.+24     	; 0x2004 <rf_tx_tdma_packet+0x25c>
    1fec:	f8 01       	movw	r30, r16
    1fee:	83 81       	ldd	r24, Z+3	; 0x03
    1ff0:	94 81       	ldd	r25, Z+4	; 0x04
    1ff2:	a8 0f       	add	r26, r24
    1ff4:	b9 1f       	adc	r27, r25
    1ff6:	8c 91       	ld	r24, X
    1ff8:	8e bd       	out	0x2e, r24	; 46
    1ffa:	0d b4       	in	r0, 0x2d	; 45
    1ffc:	07 fe       	sbrs	r0, 7
    1ffe:	fd cf       	rjmp	.-6      	; 0x1ffa <rf_tx_tdma_packet+0x252>
    2000:	2f 5f       	subi	r18, 0xFF	; 255
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	a2 2f       	mov	r26, r18
    2006:	bb 27       	eor	r27, r27
    2008:	a4 17       	cp	r26, r20
    200a:	b5 07       	cpc	r27, r21
    200c:	7c f3       	brlt	.-34     	; 0x1fec <rf_tx_tdma_packet+0x244>
    200e:	40 9a       	sbi	0x08, 0	; 8
    2010:	40 98       	cbi	0x08, 0	; 8
    2012:	8e e3       	ldi	r24, 0x3E	; 62
    2014:	8e bd       	out	0x2e, r24	; 46
    2016:	0d b4       	in	r0, 0x2d	; 45
    2018:	07 fc       	sbrc	r0, 7
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <rf_tx_tdma_packet+0x27e>
    201c:	fc cf       	rjmp	.-8      	; 0x2016 <rf_tx_tdma_packet+0x26e>
    201e:	0d b4       	in	r0, 0x2d	; 45
    2020:	07 fc       	sbrc	r0, 7
    2022:	48 c0       	rjmp	.+144    	; 0x20b4 <rf_tx_tdma_packet+0x30c>
    2024:	fc cf       	rjmp	.-8      	; 0x201e <rf_tx_tdma_packet+0x276>
    2026:	be bc       	out	0x2e, r11	; 46
    2028:	fa cf       	rjmp	.-12     	; 0x201e <rf_tx_tdma_packet+0x276>
    202a:	4e 9b       	sbis	0x09, 6	; 9
    202c:	fe cf       	rjmp	.-4      	; 0x202a <rf_tx_tdma_packet+0x282>
    202e:	f8 94       	cli
    2030:	4e 99       	sbic	0x09, 6	; 9
    2032:	fe cf       	rjmp	.-4      	; 0x2030 <rf_tx_tdma_packet+0x288>
    2034:	40 98       	cbi	0x08, 0	; 8
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	8e bd       	out	0x2e, r24	; 46
    203a:	0d b4       	in	r0, 0x2d	; 45
    203c:	07 fe       	sbrs	r0, 7
    203e:	fd cf       	rjmp	.-6      	; 0x203a <rf_tx_tdma_packet+0x292>
    2040:	40 9a       	sbi	0x08, 0	; 8
    2042:	40 98       	cbi	0x08, 0	; 8
    2044:	88 e0       	ldi	r24, 0x08	; 8
    2046:	8e bd       	out	0x2e, r24	; 46
    2048:	0d b4       	in	r0, 0x2d	; 45
    204a:	07 fe       	sbrs	r0, 7
    204c:	fd cf       	rjmp	.-6      	; 0x2048 <rf_tx_tdma_packet+0x2a0>
    204e:	40 9a       	sbi	0x08, 0	; 8
    2050:	40 98       	cbi	0x08, 0	; 8
    2052:	89 e0       	ldi	r24, 0x09	; 9
    2054:	8e bd       	out	0x2e, r24	; 46
    2056:	0d b4       	in	r0, 0x2d	; 45
    2058:	07 fe       	sbrs	r0, 7
    205a:	fd cf       	rjmp	.-6      	; 0x2056 <rf_tx_tdma_packet+0x2ae>
    205c:	40 9a       	sbi	0x08, 0	; 8
    205e:	40 98       	cbi	0x08, 0	; 8
    2060:	89 e0       	ldi	r24, 0x09	; 9
    2062:	8e bd       	out	0x2e, r24	; 46
    2064:	0d b4       	in	r0, 0x2d	; 45
    2066:	07 fe       	sbrs	r0, 7
    2068:	fd cf       	rjmp	.-6      	; 0x2064 <rf_tx_tdma_packet+0x2bc>
    206a:	40 9a       	sbi	0x08, 0	; 8
    206c:	40 98       	cbi	0x08, 0	; 8
    206e:	86 e0       	ldi	r24, 0x06	; 6
    2070:	8e bd       	out	0x2e, r24	; 46
    2072:	0d b4       	in	r0, 0x2d	; 45
    2074:	07 fe       	sbrs	r0, 7
    2076:	fd cf       	rjmp	.-6      	; 0x2072 <rf_tx_tdma_packet+0x2ca>
    2078:	40 9a       	sbi	0x08, 0	; 8
    207a:	78 94       	sei
    207c:	80 91 58 06 	lds	r24, 0x0658
    2080:	8f 5f       	subi	r24, 0xFF	; 255
    2082:	80 93 58 06 	sts	0x0658, r24
    2086:	80 91 51 06 	lds	r24, 0x0651
    208a:	90 91 52 06 	lds	r25, 0x0652
    208e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	10 c0       	rjmp	.+32     	; 0x20b8 <rf_tx_tdma_packet+0x310>
    2098:	40 9a       	sbi	0x08, 0	; 8
    209a:	f8 01       	movw	r30, r16
    209c:	86 81       	ldd	r24, Z+6	; 0x06
    209e:	88 23       	and	r24, r24
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <rf_tx_tdma_packet+0x2fc>
    20a2:	e7 ce       	rjmp	.-562    	; 0x1e72 <rf_tx_tdma_packet+0xca>
    20a4:	81 e4       	ldi	r24, 0x41	; 65
    20a6:	98 e8       	ldi	r25, 0x88	; 136
    20a8:	e6 ce       	rjmp	.-564    	; 0x1e76 <rf_tx_tdma_packet+0xce>
    20aa:	40 9a       	sbi	0x08, 0	; 8
    20ac:	40 98       	cbi	0x08, 0	; 8
    20ae:	8e e3       	ldi	r24, 0x3E	; 62
    20b0:	8e bd       	out	0x2e, r24	; 46
    20b2:	07 cf       	rjmp	.-498    	; 0x1ec2 <rf_tx_tdma_packet+0x11a>
    20b4:	40 9a       	sbi	0x08, 0	; 8
    20b6:	b9 cf       	rjmp	.-142    	; 0x202a <rf_tx_tdma_packet+0x282>
    20b8:	22 96       	adiw	r28, 0x02	; 2
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	ef 90       	pop	r14
    20d0:	df 90       	pop	r13
    20d2:	cf 90       	pop	r12
    20d4:	bf 90       	pop	r11
    20d6:	08 95       	ret

000020d8 <rf_addr_decode_set_my_mac>:
  nrk_signal_register (tx_done_signal);

  ctr_cnt[0]=0; ctr_cnt[1]=0; ctr_cnt[2]=0; ctr_cnt[3]=0;
  cnt = 0;
  while (1) {
    // Build a TX packet
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	22 97       	sbiw	r28, 0x02	; 2
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    sprintf (tx_buf, "This is a test %d", cnt);
    nrk_led_set (BLUE_LED);
    20f0:	90 93 5d 06 	sts	0x065D, r25
    20f4:	80 93 5c 06 	sts	0x065C, r24

    20f8:	84 ef       	ldi	r24, 0xF4	; 244
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    // Auto ACK is an energy efficient link layer ACK on packets
    2100:	40 98       	cbi	0x08, 0	; 8
    2102:	8a ee       	ldi	r24, 0xEA	; 234
    2104:	8e bd       	out	0x2e, r24	; 46
    2106:	0d b4       	in	r0, 0x2d	; 45
    2108:	07 fe       	sbrs	r0, 7
    210a:	fd cf       	rjmp	.-6      	; 0x2106 <rf_addr_decode_set_my_mac+0x2e>
    210c:	80 e8       	ldi	r24, 0x80	; 128
    210e:	8e bd       	out	0x2e, r24	; 46
    2110:	0d b4       	in	r0, 0x2d	; 45
    2112:	07 fe       	sbrs	r0, 7
    2114:	fd cf       	rjmp	.-6      	; 0x2110 <rf_addr_decode_set_my_mac+0x38>
    2116:	fe 01       	movw	r30, r28
    2118:	31 96       	adiw	r30, 0x01	; 1
    211a:	9e 01       	movw	r18, r28
    211c:	2d 5f       	subi	r18, 0xFD	; 253
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	8e bd       	out	0x2e, r24	; 46
    2124:	0d b4       	in	r0, 0x2d	; 45
    2126:	07 fe       	sbrs	r0, 7
    2128:	fd cf       	rjmp	.-6      	; 0x2124 <rf_addr_decode_set_my_mac+0x4c>
    212a:	31 96       	adiw	r30, 0x01	; 1
    212c:	e2 17       	cp	r30, r18
    212e:	f3 07       	cpc	r31, r19
    2130:	b9 f7       	brne	.-18     	; 0x2120 <rf_addr_decode_set_my_mac+0x48>
    2132:	40 9a       	sbi	0x08, 0	; 8
    // If Auto ACK is enabled, then bmac_tx_pkt() will return failure
    2134:	84 ef       	ldi	r24, 0xF4	; 244
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    213c:	22 96       	adiw	r28, 0x02	; 2
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <rf_security_set_key>:

  bmac_task_config ();

  nrk_create_taskset ();
  nrk_start ();

    214e:	6f 92       	push	r6
    2150:	7f 92       	push	r7
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	22 97       	sbiw	r28, 0x02	; 2
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	8c 01       	movw	r16, r24
  return 0;
}

void rx_task ()
{
    217c:	84 e6       	ldi	r24, 0x64	; 100
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    2184:	78 01       	movw	r14, r16
    2186:	c1 2c       	mov	r12, r1
    2188:	b1 e0       	ldi	r27, 0x01	; 1
    218a:	db 2e       	mov	r13, r27
  uint8_t i, len;
  int8_t rssi, val;
  uint8_t *local_rx_buf;
  nrk_time_t check_period;
  int value = 0;
    218c:	3e 01       	movw	r6, r28
    218e:	08 94       	sec
    2190:	61 1c       	adc	r6, r1
    2192:	71 1c       	adc	r7, r1
    2194:	a3 e0       	ldi	r26, 0x03	; 3
    2196:	8a 2e       	mov	r8, r26
    2198:	91 2c       	mov	r9, r1
    219a:	8c 0e       	add	r8, r28
    219c:	9d 1e       	adc	r9, r29

void rx_task ()
{
  uint8_t i, len;
  int8_t rssi, val;
  uint8_t *local_rx_buf;
    219e:	f7 01       	movw	r30, r14
    21a0:	80 81       	ld	r24, Z
    21a2:	21 81       	ldd	r18, Z+1	; 0x01
    21a4:	33 27       	eor	r19, r19
    21a6:	99 27       	eor	r25, r25
    21a8:	98 2f       	mov	r25, r24
    21aa:	88 27       	eor	r24, r24
    21ac:	28 2b       	or	r18, r24
    21ae:	39 2b       	or	r19, r25
    21b0:	3a 83       	std	Y+2, r19	; 0x02
    21b2:	29 83       	std	Y+1, r18	; 0x01
  nrk_time_t check_period;
    21b4:	84 e6       	ldi	r24, 0x64	; 100
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
  int value = 0;
    21bc:	40 98       	cbi	0x08, 0	; 8
    21be:	8c 2d       	mov	r24, r12
    21c0:	80 68       	ori	r24, 0x80	; 128
    21c2:	8e bd       	out	0x2e, r24	; 46
    21c4:	0d b4       	in	r0, 0x2d	; 45
    21c6:	07 fe       	sbrs	r0, 7
    21c8:	fd cf       	rjmp	.-6      	; 0x21c4 <rf_security_set_key+0x76>
    21ca:	c6 01       	movw	r24, r12
    21cc:	95 95       	asr	r25
    21ce:	87 95       	ror	r24
    21d0:	80 7c       	andi	r24, 0xC0	; 192
    21d2:	8e bd       	out	0x2e, r24	; 46
    21d4:	0d b4       	in	r0, 0x2d	; 45
    21d6:	07 fe       	sbrs	r0, 7
    21d8:	fd cf       	rjmp	.-6      	; 0x21d4 <rf_security_set_key+0x86>
    21da:	83 01       	movw	r16, r6
    21dc:	53 01       	movw	r10, r6
    21de:	f5 01       	movw	r30, r10
    21e0:	80 81       	ld	r24, Z
    21e2:	8e bd       	out	0x2e, r24	; 46
    21e4:	0d b4       	in	r0, 0x2d	; 45
    21e6:	07 fe       	sbrs	r0, 7
    21e8:	fd cf       	rjmp	.-6      	; 0x21e4 <rf_security_set_key+0x96>
    21ea:	08 94       	sec
    21ec:	a1 1c       	adc	r10, r1
    21ee:	b1 1c       	adc	r11, r1
    21f0:	a8 14       	cp	r10, r8
    21f2:	b9 04       	cpc	r11, r9
    21f4:	a1 f7       	brne	.-24     	; 0x21de <rf_security_set_key+0x90>
    21f6:	40 9a       	sbi	0x08, 0	; 8
    21f8:	08 94       	sec
    21fa:	e1 1c       	adc	r14, r1
    21fc:	f1 1c       	adc	r15, r1
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	c8 0e       	add	r12, r24
    2204:	d9 1e       	adc	r13, r25
  return 0;
}

void rx_task ()
{
  uint8_t i, len;
    2206:	90 e1       	ldi	r25, 0x10	; 16
    2208:	c9 16       	cp	r12, r25
    220a:	91 e0       	ldi	r25, 0x01	; 1
    220c:	d9 06       	cpc	r13, r25
    220e:	39 f6       	brne	.-114    	; 0x219e <rf_security_set_key+0x50>
  nrk_time_t check_period;
  int value = 0;
  AccelReading accelReading;
  //printf ("rx_task PID=%d\r\n", nrk_get_pid ());

  // init bmac on channel 20 
    2210:	84 e6       	ldi	r24, 0x64	; 100
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    2218:	20 e1       	ldi	r18, 0x10	; 16
    221a:	31 e0       	ldi	r19, 0x01	; 1
    221c:	40 e4       	ldi	r20, 0x40	; 64
    221e:	51 e0       	ldi	r21, 0x01	; 1
  bmac_init (20);

  // Enable AES 128 bit encryption
    2220:	1a 82       	std	Y+2, r1	; 0x02
    2222:	19 82       	std	Y+1, r1	; 0x01
  // When encryption is active, messages from plaintext
    2224:	40 98       	cbi	0x08, 0	; 8
    2226:	84 2f       	mov	r24, r20
    2228:	80 68       	ori	r24, 0x80	; 128
    222a:	8e bd       	out	0x2e, r24	; 46
    222c:	0d b4       	in	r0, 0x2d	; 45
    222e:	07 fe       	sbrs	r0, 7
    2230:	fd cf       	rjmp	.-6      	; 0x222c <__stack+0x2d>
    2232:	ca 01       	movw	r24, r20
    2234:	95 95       	asr	r25
    2236:	87 95       	ror	r24
    2238:	80 7c       	andi	r24, 0xC0	; 192
    223a:	8e bd       	out	0x2e, r24	; 46
    223c:	0d b4       	in	r0, 0x2d	; 45
    223e:	07 fe       	sbrs	r0, 7
    2240:	fd cf       	rjmp	.-6      	; 0x223c <__stack+0x3d>
    2242:	f8 01       	movw	r30, r16
    2244:	80 81       	ld	r24, Z
    2246:	8e bd       	out	0x2e, r24	; 46
    2248:	0d b4       	in	r0, 0x2d	; 45
    224a:	07 fe       	sbrs	r0, 7
    224c:	fd cf       	rjmp	.-6      	; 0x2248 <__stack+0x49>
    224e:	31 96       	adiw	r30, 0x01	; 1
    2250:	ea 15       	cp	r30, r10
    2252:	fb 05       	cpc	r31, r11
    2254:	b9 f7       	brne	.-18     	; 0x2244 <__stack+0x45>
    2256:	40 9a       	sbi	0x08, 0	; 8
  // source will still be received. 
    2258:	40 98       	cbi	0x08, 0	; 8
    225a:	82 2f       	mov	r24, r18
    225c:	80 68       	ori	r24, 0x80	; 128
    225e:	8e bd       	out	0x2e, r24	; 46
    2260:	0d b4       	in	r0, 0x2d	; 45
    2262:	07 fe       	sbrs	r0, 7
    2264:	fd cf       	rjmp	.-6      	; 0x2260 <__stack+0x61>
    2266:	c9 01       	movw	r24, r18
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	80 7c       	andi	r24, 0xC0	; 192
    226e:	8e bd       	out	0x2e, r24	; 46
    2270:	0d b4       	in	r0, 0x2d	; 45
    2272:	07 fe       	sbrs	r0, 7
    2274:	fd cf       	rjmp	.-6      	; 0x2270 <__stack+0x71>
    2276:	f8 01       	movw	r30, r16
    2278:	80 81       	ld	r24, Z
    227a:	8e bd       	out	0x2e, r24	; 46
    227c:	0d b4       	in	r0, 0x2d	; 45
    227e:	07 fe       	sbrs	r0, 7
    2280:	fd cf       	rjmp	.-6      	; 0x227c <__stack+0x7d>
    2282:	31 96       	adiw	r30, 0x01	; 1
    2284:	ea 15       	cp	r30, r10
    2286:	fb 05       	cpc	r31, r11
    2288:	b9 f7       	brne	.-18     	; 0x2278 <__stack+0x79>
    228a:	40 9a       	sbi	0x08, 0	; 8
    228c:	2e 5f       	subi	r18, 0xFE	; 254
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	4e 5f       	subi	r20, 0xFE	; 254
    2292:	5f 4f       	sbci	r21, 0xFF	; 255
  int value = 0;
  AccelReading accelReading;
  //printf ("rx_task PID=%d\r\n", nrk_get_pid ());

  // init bmac on channel 20 
  bmac_init (20);
    2294:	e1 e0       	ldi	r30, 0x01	; 1
    2296:	2e 31       	cpi	r18, 0x1E	; 30
    2298:	3e 07       	cpc	r19, r30
    229a:	11 f6       	brne	.-124    	; 0x2220 <__stack+0x21>
  // Enable AES 128 bit encryption
  // When encryption is active, messages from plaintext
  // source will still be received. 
  //bmac_encryption_set_key(aes_key,16);
  //bmac_encryption_enable();
  // bmac_encryption_disable();
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01

    22a4:	40 98       	cbi	0x08, 0	; 8
    22a6:	8e ec       	ldi	r24, 0xCE	; 206
    22a8:	8e bd       	out	0x2e, r24	; 46
    22aa:	0d b4       	in	r0, 0x2d	; 45
    22ac:	07 fe       	sbrs	r0, 7
    22ae:	fd cf       	rjmp	.-6      	; 0x22aa <__stack+0xab>
    22b0:	80 e8       	ldi	r24, 0x80	; 128
    22b2:	8e bd       	out	0x2e, r24	; 46
    22b4:	0d b4       	in	r0, 0x2d	; 45
    22b6:	07 fe       	sbrs	r0, 7
    22b8:	fd cf       	rjmp	.-6      	; 0x22b4 <__stack+0xb5>
    22ba:	f8 01       	movw	r30, r16
    22bc:	80 81       	ld	r24, Z
    22be:	8e bd       	out	0x2e, r24	; 46
    22c0:	0d b4       	in	r0, 0x2d	; 45
    22c2:	07 fe       	sbrs	r0, 7
    22c4:	fd cf       	rjmp	.-6      	; 0x22c0 <__stack+0xc1>
    22c6:	31 96       	adiw	r30, 0x01	; 1
    22c8:	ea 15       	cp	r30, r10
    22ca:	fb 05       	cpc	r31, r11
    22cc:	b9 f7       	brne	.-18     	; 0x22bc <__stack+0xbd>
    22ce:	40 9a       	sbi	0x08, 0	; 8
  // By default the RX check rate is 100ms
    22d0:	40 98       	cbi	0x08, 0	; 8
    22d2:	8e e9       	ldi	r24, 0x9E	; 158
    22d4:	8e bd       	out	0x2e, r24	; 46
    22d6:	0d b4       	in	r0, 0x2d	; 45
    22d8:	07 fe       	sbrs	r0, 7
    22da:	fd cf       	rjmp	.-6      	; 0x22d6 <__stack+0xd7>
    22dc:	80 e8       	ldi	r24, 0x80	; 128
    22de:	8e bd       	out	0x2e, r24	; 46
    22e0:	0d b4       	in	r0, 0x2d	; 45
    22e2:	07 fe       	sbrs	r0, 7
    22e4:	fd cf       	rjmp	.-6      	; 0x22e0 <__stack+0xe1>
    22e6:	f8 01       	movw	r30, r16
    22e8:	80 81       	ld	r24, Z
    22ea:	8e bd       	out	0x2e, r24	; 46
    22ec:	0d b4       	in	r0, 0x2d	; 45
    22ee:	07 fe       	sbrs	r0, 7
    22f0:	fd cf       	rjmp	.-6      	; 0x22ec <__stack+0xed>
    22f2:	0f 5f       	subi	r16, 0xFF	; 255
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	0a 15       	cp	r16, r10
    22f8:	1b 05       	cpc	r17, r11
    22fa:	a9 f7       	brne	.-22     	; 0x22e6 <__stack+0xe7>
    22fc:	40 9a       	sbi	0x08, 0	; 8
    22fe:	22 96       	adiw	r28, 0x02	; 2
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	df 90       	pop	r13
    2318:	cf 90       	pop	r12
    231a:	bf 90       	pop	r11
    231c:	af 90       	pop	r10
    231e:	9f 90       	pop	r9
    2320:	8f 90       	pop	r8
    2322:	7f 90       	pop	r7
    2324:	6f 90       	pop	r6
    2326:	08 95       	ret

00002328 <rf_set_rx>:
    // if no ACK was received. In a broadcast domain, the ACK's will
    // typically collide.  To avoid this, one can use address decoding. 
    // The functions are as follows:
    // bmac_auto_ack_enable();
    // bmac_auto_ack_disable();

    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	ec 01       	movw	r28, r24
    2330:	16 2f       	mov	r17, r22
    // Address decoding is a way of preventing the radio from receiving
    // packets that are not address to a particular node.  This will 
    // supress ACK packets from nodes that should not automatically ACK.
    2332:	80 91 51 06 	lds	r24, 0x0651
    2336:	90 91 52 06 	lds	r25, 0x0652
    233a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
    // The functions are as follows:
    // bmac_addr_decode_set_my_mac(uint16_t MAC_ADDR); 
    // bmac_addr_decode_dest_mac(uint16_t DST_ADDR);  // 0xFFFF is broadcast
    233e:	40 98       	cbi	0x08, 0	; 8
    2340:	88 e0       	ldi	r24, 0x08	; 8
    2342:	8e bd       	out	0x2e, r24	; 46
    2344:	0d b4       	in	r0, 0x2d	; 45
    2346:	07 fe       	sbrs	r0, 7
    2348:	fd cf       	rjmp	.-6      	; 0x2344 <rf_set_rx+0x1c>
    234a:	40 9a       	sbi	0x08, 0	; 8
    // bmac_addr_decode_enable();
    234c:	40 98       	cbi	0x08, 0	; 8
    234e:	88 e0       	ldi	r24, 0x08	; 8
    2350:	8e bd       	out	0x2e, r24	; 46
    2352:	0d b4       	in	r0, 0x2d	; 45
    2354:	07 fe       	sbrs	r0, 7
    2356:	fd cf       	rjmp	.-6      	; 0x2352 <rf_set_rx+0x2a>
    2358:	40 9a       	sbi	0x08, 0	; 8
    // bmac_addr_decode_disable();
    235a:	81 2f       	mov	r24, r17
    235c:	0e 94 31 08 	call	0x1062	; 0x1062 <halRfSetChannel>

    2360:	d0 93 57 06 	sts	0x0657, r29
    2364:	c0 93 56 06 	sts	0x0656, r28
     ctr_cnt[0]=cnt; 
     if(ctr_cnt[0]==255) ctr_cnt[1]++; 
     if(ctr_cnt[1]==255) ctr_cnt[2]++; 
    2368:	80 91 51 06 	lds	r24, 0x0651
    236c:	90 91 52 06 	lds	r25, 0x0652
    2370:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	08 95       	ret

0000237c <rf_set_channel>:
    memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
    printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);

    nrk_led_clr (ORANGE_LED);
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
    237c:	1f 93       	push	r17
    237e:	18 2f       	mov	r17, r24
  }

    2380:	80 91 51 06 	lds	r24, 0x0651
    2384:	90 91 52 06 	lds	r25, 0x0652
    2388:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
}

    238c:	81 2f       	mov	r24, r17
    238e:	0e 94 31 08 	call	0x1062	; 0x1062 <halRfSetChannel>
uint8_t ctr_cnt[4];

    2392:	80 91 51 06 	lds	r24, 0x0651
    2396:	90 91 52 06 	lds	r25, 0x0652
    239a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    239e:	1f 91       	pop	r17
    23a0:	08 95       	ret

000023a2 <rf_init>:
    // Just check to be sure signal is okay
    // if(ret & SIG(tx_done_signal) == 0 ) 
    // nrk_kprintf (PSTR ("TX done signal error\r\n"));
   
    // If you want to see your remaining reservation
    // printf( "reserve=%d ",bmac_tx_reserve_get() );
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	22 97       	sbiw	r28, 0x02	; 2
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	8c 01       	movw	r16, r24
    23c2:	d6 2e       	mov	r13, r22
    23c4:	5a 83       	std	Y+2, r21	; 0x02
    23c6:	49 83       	std	Y+1, r20	; 0x01
    23c8:	79 01       	movw	r14, r18
    
    // Task gets control again after TX complete
    nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
    nrk_led_clr (BLUE_LED);
    nrk_wait_until_next_period ();
    23ca:	6a e0       	ldi	r22, 0x0A	; 10
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <nrk_sem_create>
    23d2:	90 93 52 06 	sts	0x0652, r25
    23d6:	80 93 51 06 	sts	0x0651, r24
  }
    23da:	89 2b       	or	r24, r25
    23dc:	31 f4       	brne	.+12     	; 0x23ea <rf_init+0x48>

    23de:	0e 94 b6 20 	call	0x416c	; 0x416c <nrk_get_pid>
    23e2:	68 2f       	mov	r22, r24
    23e4:	8f e0       	ldi	r24, 0x0F	; 15
    23e6:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
}

    23ea:	80 91 51 06 	lds	r24, 0x0651
    23ee:	90 91 52 06 	lds	r25, 0x0652
    23f2:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <nrk_sem_pend>
void nrk_create_taskset ()
    23f6:	8f 3f       	cpi	r24, 0xFF	; 255
    23f8:	21 f4       	brne	.+8      	; 0x2402 <rf_init+0x60>
{
    23fa:	8c ec       	ldi	r24, 0xCC	; 204
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    23fe:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>


  RX_TASK.task = rx_task;
  nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
  RX_TASK.prio = 2;
    2402:	15 9a       	sbi	0x02, 5	; 2
  RX_TASK.FirstActivation = TRUE;
    2404:	88 ee       	ldi	r24, 0xE8	; 232
    2406:	93 e0       	ldi	r25, 0x03	; 3
    2408:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <halWait>
  RX_TASK.Type = BASIC_TASK;
    240c:	16 98       	cbi	0x02, 6	; 2
  RX_TASK.SchType = PREEMPTIVE;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <halWait>
  RX_TASK.period.secs = 0;
    2416:	16 9a       	sbi	0x02, 6	; 2
  RX_TASK.period.nano_secs = 250 * NANOS_PER_MS;
    2418:	84 e6       	ldi	r24, 0x64	; 100
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <halWait>
  RX_TASK.cpu_reserve.nano_secs = 200 * NANOS_PER_MS;
  RX_TASK.offset.secs = 0;
  RX_TASK.offset.nano_secs = 0;
  nrk_activate_task (&RX_TASK);

  /* TX_TASK.task = tx_task; */
    2420:	f8 94       	cli
  /* nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE); */
  /* TX_TASK.prio = 2; */
  /* TX_TASK.FirstActivation = TRUE; */
    2422:	40 98       	cbi	0x08, 0	; 8
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8e bd       	out	0x2e, r24	; 46
    2428:	0d b4       	in	r0, 0x2d	; 45
    242a:	07 fe       	sbrs	r0, 7
    242c:	fd cf       	rjmp	.-6      	; 0x2428 <rf_init+0x86>
    242e:	40 9a       	sbi	0x08, 0	; 8
  /* TX_TASK.Type = BASIC_TASK; */
    2430:	82 ee       	ldi	r24, 0xE2	; 226
    2432:	92 e0       	ldi	r25, 0x02	; 2
    2434:	90 93 55 06 	sts	0x0655, r25
    2438:	80 93 54 06 	sts	0x0654, r24
  /* TX_TASK.SchType = PREEMPTIVE; */
    243c:	40 98       	cbi	0x08, 0	; 8
    243e:	81 e1       	ldi	r24, 0x11	; 17
    2440:	8e bd       	out	0x2e, r24	; 46
    2442:	0d b4       	in	r0, 0x2d	; 45
    2444:	07 fe       	sbrs	r0, 7
    2446:	fd cf       	rjmp	.-6      	; 0x2442 <rf_init+0xa0>
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	8e bd       	out	0x2e, r24	; 46
    244c:	0d b4       	in	r0, 0x2d	; 45
    244e:	07 fe       	sbrs	r0, 7
    2450:	fd cf       	rjmp	.-6      	; 0x244c <rf_init+0xaa>
    2452:	82 ee       	ldi	r24, 0xE2	; 226
    2454:	8e bd       	out	0x2e, r24	; 46
    2456:	0d b4       	in	r0, 0x2d	; 45
    2458:	07 fe       	sbrs	r0, 7
    245a:	fd cf       	rjmp	.-6      	; 0x2456 <rf_init+0xb4>
    245c:	40 9a       	sbi	0x08, 0	; 8
  /* TX_TASK.period.secs = 1; */
  /* TX_TASK.period.nano_secs = 0; */
  /* TX_TASK.cpu_reserve.secs = 1; */
    245e:	40 98       	cbi	0x08, 0	; 8
    2460:	82 e1       	ldi	r24, 0x12	; 18
    2462:	8e bd       	out	0x2e, r24	; 46
    2464:	0d b4       	in	r0, 0x2d	; 45
    2466:	07 fe       	sbrs	r0, 7
    2468:	fd cf       	rjmp	.-6      	; 0x2464 <rf_init+0xc2>
    246a:	85 e0       	ldi	r24, 0x05	; 5
    246c:	8e bd       	out	0x2e, r24	; 46
    246e:	0d b4       	in	r0, 0x2d	; 45
    2470:	07 fe       	sbrs	r0, 7
    2472:	fd cf       	rjmp	.-6      	; 0x246e <rf_init+0xcc>
    2474:	1e bc       	out	0x2e, r1	; 46
    2476:	0d b4       	in	r0, 0x2d	; 45
    2478:	07 fe       	sbrs	r0, 7
    247a:	fd cf       	rjmp	.-6      	; 0x2476 <rf_init+0xd4>
    247c:	40 9a       	sbi	0x08, 0	; 8
  /* TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS; */
    247e:	40 98       	cbi	0x08, 0	; 8
    2480:	8c e1       	ldi	r24, 0x1C	; 28
    2482:	8e bd       	out	0x2e, r24	; 46
    2484:	0d b4       	in	r0, 0x2d	; 45
    2486:	07 fe       	sbrs	r0, 7
    2488:	fd cf       	rjmp	.-6      	; 0x2484 <rf_init+0xe2>
    248a:	1e bc       	out	0x2e, r1	; 46
    248c:	0d b4       	in	r0, 0x2d	; 45
    248e:	07 fe       	sbrs	r0, 7
    2490:	fd cf       	rjmp	.-6      	; 0x248c <rf_init+0xea>
    2492:	8f e7       	ldi	r24, 0x7F	; 127
    2494:	8e bd       	out	0x2e, r24	; 46
    2496:	0d b4       	in	r0, 0x2d	; 45
    2498:	07 fe       	sbrs	r0, 7
    249a:	fd cf       	rjmp	.-6      	; 0x2496 <rf_init+0xf4>
    249c:	40 9a       	sbi	0x08, 0	; 8
  /* TX_TASK.offset.secs = 0; */
    249e:	40 98       	cbi	0x08, 0	; 8
    24a0:	89 e1       	ldi	r24, 0x19	; 25
    24a2:	8e bd       	out	0x2e, r24	; 46
    24a4:	0d b4       	in	r0, 0x2d	; 45
    24a6:	07 fe       	sbrs	r0, 7
    24a8:	fd cf       	rjmp	.-6      	; 0x24a4 <rf_init+0x102>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	8e bd       	out	0x2e, r24	; 46
    24ae:	0d b4       	in	r0, 0x2d	; 45
    24b0:	07 fe       	sbrs	r0, 7
    24b2:	fd cf       	rjmp	.-6      	; 0x24ae <rf_init+0x10c>
    24b4:	84 ec       	ldi	r24, 0xC4	; 196
    24b6:	8e bd       	out	0x2e, r24	; 46
    24b8:	0d b4       	in	r0, 0x2d	; 45
    24ba:	07 fe       	sbrs	r0, 7
    24bc:	fd cf       	rjmp	.-6      	; 0x24b8 <rf_init+0x116>
    24be:	40 9a       	sbi	0x08, 0	; 8
  /* TX_TASK.offset.nano_secs = 0; */
    24c0:	40 98       	cbi	0x08, 0	; 8
    24c2:	87 e1       	ldi	r24, 0x17	; 23
    24c4:	8e bd       	out	0x2e, r24	; 46
    24c6:	0d b4       	in	r0, 0x2d	; 45
    24c8:	07 fe       	sbrs	r0, 7
    24ca:	fd cf       	rjmp	.-6      	; 0x24c6 <rf_init+0x124>
    24cc:	8a e1       	ldi	r24, 0x1A	; 26
    24ce:	8e bd       	out	0x2e, r24	; 46
    24d0:	0d b4       	in	r0, 0x2d	; 45
    24d2:	07 fe       	sbrs	r0, 7
    24d4:	fd cf       	rjmp	.-6      	; 0x24d0 <rf_init+0x12e>
    24d6:	86 e5       	ldi	r24, 0x56	; 86
    24d8:	8e bd       	out	0x2e, r24	; 46
    24da:	0d b4       	in	r0, 0x2d	; 45
    24dc:	07 fe       	sbrs	r0, 7
    24de:	fd cf       	rjmp	.-6      	; 0x24da <rf_init+0x138>
    24e0:	40 9a       	sbi	0x08, 0	; 8
    24e2:	84 ef       	ldi	r24, 0xF4	; 244
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    24ea:	40 98       	cbi	0x08, 0	; 8
    24ec:	88 ee       	ldi	r24, 0xE8	; 232
    24ee:	8e bd       	out	0x2e, r24	; 46
    24f0:	0d b4       	in	r0, 0x2d	; 45
    24f2:	07 fe       	sbrs	r0, 7
    24f4:	fd cf       	rjmp	.-6      	; 0x24f0 <rf_init+0x14e>
    24f6:	80 e8       	ldi	r24, 0x80	; 128
    24f8:	8e bd       	out	0x2e, r24	; 46
    24fa:	0d b4       	in	r0, 0x2d	; 45
    24fc:	07 fe       	sbrs	r0, 7
    24fe:	fd cf       	rjmp	.-6      	; 0x24fa <rf_init+0x158>
    2500:	fe 01       	movw	r30, r28
    2502:	31 96       	adiw	r30, 0x01	; 1
    2504:	9e 01       	movw	r18, r28
    2506:	2d 5f       	subi	r18, 0xFD	; 253
    2508:	3f 4f       	sbci	r19, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	8e bd       	out	0x2e, r24	; 46
    250e:	0d b4       	in	r0, 0x2d	; 45
    2510:	07 fe       	sbrs	r0, 7
    2512:	fd cf       	rjmp	.-6      	; 0x250e <rf_init+0x16c>
    2514:	31 96       	adiw	r30, 0x01	; 1
    2516:	e2 17       	cp	r30, r18
    2518:	f3 07       	cpc	r31, r19
    251a:	b9 f7       	brne	.-18     	; 0x250a <rf_init+0x168>
    251c:	40 9a       	sbi	0x08, 0	; 8
    251e:	84 ef       	ldi	r24, 0xF4	; 244
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    2526:	78 94       	sei
    2528:	8d 2d       	mov	r24, r13
    252a:	0e 94 31 08 	call	0x1062	; 0x1062 <halRfSetChannel>
    252e:	78 94       	sei
    2530:	10 93 57 06 	sts	0x0657, r17
    2534:	00 93 56 06 	sts	0x0656, r16
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	90 93 5b 06 	sts	0x065B, r25
    2540:	80 93 5a 06 	sts	0x065A, r24
    2544:	f0 92 5d 06 	sts	0x065D, r15
    2548:	e0 92 5c 06 	sts	0x065C, r14
    254c:	10 92 58 06 	sts	0x0658, r1
    2550:	10 92 5e 06 	sts	0x065E, r1
    2554:	0e 94 50 08 	call	0x10a0	; 0x10a0 <halRfWaitForCrystalOscillator>
    2558:	80 91 51 06 	lds	r24, 0x0651
    255c:	90 91 52 06 	lds	r25, 0x0652
    2560:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <nrk_sem_post>
    2564:	8f 3f       	cpi	r24, 0xFF	; 255
    2566:	39 f4       	brne	.+14     	; 0x2576 <rf_init+0x1d4>
    2568:	8f e9       	ldi	r24, 0x9F	; 159
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    2576:	10 92 61 06 	sts	0x0661, r1
    257a:	10 92 53 06 	sts	0x0653, r1
    257e:	10 92 62 06 	sts	0x0662, r1
    2582:	22 96       	adiw	r28, 0x02	; 2
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	df 90       	pop	r13
    259c:	08 95       	ret

0000259e <getc1>:
  nrk_create_taskset ();
  nrk_start ();

  return 0;
}

    259e:	20 91 7a 06 	lds	r18, 0x067A
    25a2:	80 91 68 06 	lds	r24, 0x0668
    25a6:	28 17       	cp	r18, r24
    25a8:	81 f0       	breq	.+32     	; 0x25ca <getc1+0x2c>
void rx_task ()
{
    25aa:	e2 2f       	mov	r30, r18
    25ac:	ff 27       	eor	r31, r31
    25ae:	e7 59       	subi	r30, 0x97	; 151
    25b0:	f9 4f       	sbci	r31, 0xF9	; 249
    25b2:	e0 81       	ld	r30, Z
  uint8_t i, len;
    25b4:	82 2f       	mov	r24, r18
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	80 93 7a 06 	sts	0x067A, r24
  int8_t rssi, val;
    25bc:	80 31       	cpi	r24, 0x10	; 16
    25be:	11 f4       	brne	.+4      	; 0x25c4 <getc1+0x26>
    25c0:	10 92 7a 06 	sts	0x067A, r1
  uint8_t *local_rx_buf;
    25c4:	8e 2f       	mov	r24, r30
    25c6:	99 27       	eor	r25, r25
    25c8:	08 95       	ret
  nrk_time_t check_period;
  int value = 0;
  AccelReading accelReading;
    25ca:	80 91 c8 00 	lds	r24, 0x00C8
    25ce:	87 ff       	sbrs	r24, 7
    25d0:	fc cf       	rjmp	.-8      	; 0x25ca <getc1+0x2c>
    25d2:	80 91 c8 00 	lds	r24, 0x00C8
    25d6:	8f 77       	andi	r24, 0x7F	; 127
    25d8:	80 93 c8 00 	sts	0x00C8, r24
    25dc:	80 91 ce 00 	lds	r24, 0x00CE
  //printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    25e0:	99 27       	eor	r25, r25

    25e2:	08 95       	ret

000025e4 <nrk_uart_data_ready>:
  // init bmac on channel 20 
  bmac_init (20);

  // Enable AES 128 bit encryption
    25e4:	88 23       	and	r24, r24
    25e6:	51 f4       	brne	.+20     	; 0x25fc <nrk_uart_data_ready+0x18>
  // When encryption is active, messages from plaintext
  // source will still be received. 
    25e8:	80 91 c0 00 	lds	r24, 0x00C0
    25ec:	99 27       	eor	r25, r25
    25ee:	87 fd       	sbrc	r24, 7
    25f0:	90 95       	com	r25
    25f2:	88 27       	eor	r24, r24
    25f4:	99 0f       	add	r25, r25
    25f6:	88 1f       	adc	r24, r24
    25f8:	99 27       	eor	r25, r25
    25fa:	08 95       	ret
  //bmac_encryption_set_key(aes_key,16);
  //bmac_encryption_enable();
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	19 f0       	breq	.+6      	; 0x2606 <nrk_uart_data_ready+0x22>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	08 95       	ret
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	90 91 7a 06 	lds	r25, 0x067A
    260e:	80 91 68 06 	lds	r24, 0x0668
    2612:	98 17       	cp	r25, r24
    2614:	11 f0       	breq	.+4      	; 0x261a <nrk_uart_data_ready+0x36>
    2616:	21 e0       	ldi	r18, 0x01	; 1
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	c9 01       	movw	r24, r18
  // bmac_encryption_disable();

  // By default the RX check rate is 100ms
  // below shows how to change that
  check_period.secs=0;
    261c:	08 95       	ret

0000261e <PORT_INIT>:
     ctr_cnt[0]=cnt; 
     if(ctr_cnt[0]==255) ctr_cnt[1]++; 
     if(ctr_cnt[1]==255) ctr_cnt[2]++; 
     if(ctr_cnt[2]==255) ctr_cnt[3]++; 
     // You need to increase the ctr on each packet to make the 
     // stream cipher not repeat.
    261e:	85 b7       	in	r24, 0x35	; 53
    2620:	80 61       	ori	r24, 0x10	; 16
    2622:	85 bf       	out	0x35, r24	; 53
     bmac_encryption_set_ctr_counter(&ctr_cnt,4);
    2624:	86 e0       	ldi	r24, 0x06	; 6
    2626:	84 b9       	out	0x04, r24	; 4

    2628:	87 e0       	ldi	r24, 0x07	; 7
    262a:	85 b9       	out	0x05, r24	; 5
    // For blocking transmits, use the following function call.
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	87 b9       	out	0x07, r24	; 7
    // For this there is no need to register  
    2630:	88 b9       	out	0x08, r24	; 8
     val=bmac_tx_pkt(tx_buf, strlen(tx_buf));
    2632:	8c e3       	ldi	r24, 0x3C	; 60
    2634:	8d b9       	out	0x0d, r24	; 13
     if(val==NRK_OK) cnt++;
    2636:	8b e0       	ldi	r24, 0x0B	; 11
    2638:	8a b9       	out	0x0a, r24	; 10
     else nrk_kprintf( PSTR( "NO ack or Reserve Violated!\r\n" ));
    263a:	8e e3       	ldi	r24, 0x3E	; 62
    263c:	8e b9       	out	0x0e, r24	; 14

    263e:	88 e7       	ldi	r24, 0x78	; 120
    2640:	81 b9       	out	0x01, r24	; 1

    2642:	80 e4       	ldi	r24, 0x40	; 64
    2644:	82 b9       	out	0x02, r24	; 2
    2646:	08 95       	ret

00002648 <nrk_setup_ports>:
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
  }

}

    2648:	0e 94 0f 13 	call	0x261e	; 0x261e <PORT_INIT>
uint8_t ctr_cnt[4];
    264c:	80 e5       	ldi	r24, 0x50	; 80
    264e:	8c bd       	out	0x2c, r24	; 44
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	8d bd       	out	0x2d, r24	; 45
    2654:	08 95       	ret

00002656 <nrk_gpio_set>:
    // This functions waits on the tx_done_signal
    // ret = nrk_event_wait (SIG(tx_done_signal));

    // Just check to be sure signal is okay
    // if(ret & SIG(tx_done_signal) == 0 ) 
    // nrk_kprintf (PSTR ("TX done signal error\r\n"));
    2656:	8f 3f       	cpi	r24, 0xFF	; 255
    2658:	09 f4       	brne	.+2      	; 0x265c <nrk_gpio_set+0x6>
    265a:	7f c0       	rjmp	.+254    	; 0x275a <nrk_gpio_set+0x104>
   
    265c:	48 2f       	mov	r20, r24
    265e:	55 27       	eor	r21, r21
    2660:	9a 01       	movw	r18, r20
    2662:	27 70       	andi	r18, 0x07	; 7
    2664:	30 70       	andi	r19, 0x00	; 0
    2666:	22 30       	cpi	r18, 0x02	; 2
    2668:	31 05       	cpc	r19, r1
    266a:	a9 f1       	breq	.+106    	; 0x26d6 <nrk_gpio_set+0x80>
    266c:	23 30       	cpi	r18, 0x03	; 3
    266e:	31 05       	cpc	r19, r1
    2670:	44 f4       	brge	.+16     	; 0x2682 <nrk_gpio_set+0x2c>
    2672:	21 15       	cp	r18, r1
    2674:	31 05       	cpc	r19, r1
    2676:	89 f0       	breq	.+34     	; 0x269a <nrk_gpio_set+0x44>
    2678:	21 30       	cpi	r18, 0x01	; 1
    267a:	31 05       	cpc	r19, r1
    267c:	09 f0       	breq	.+2      	; 0x2680 <nrk_gpio_set+0x2a>
    267e:	6d c0       	rjmp	.+218    	; 0x275a <nrk_gpio_set+0x104>
    2680:	1c c0       	rjmp	.+56     	; 0x26ba <nrk_gpio_set+0x64>
    2682:	24 30       	cpi	r18, 0x04	; 4
    2684:	31 05       	cpc	r19, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <nrk_gpio_set+0x34>
    2688:	46 c0       	rjmp	.+140    	; 0x2716 <nrk_gpio_set+0xc0>
    268a:	24 30       	cpi	r18, 0x04	; 4
    268c:	31 05       	cpc	r19, r1
    268e:	9c f1       	brlt	.+102    	; 0x26f6 <nrk_gpio_set+0xa0>
    2690:	25 30       	cpi	r18, 0x05	; 5
    2692:	31 05       	cpc	r19, r1
    2694:	09 f0       	breq	.+2      	; 0x2698 <nrk_gpio_set+0x42>
    2696:	61 c0       	rjmp	.+194    	; 0x275a <nrk_gpio_set+0x104>
    2698:	4e c0       	rjmp	.+156    	; 0x2736 <nrk_gpio_set+0xe0>
    // If you want to see your remaining reservation
    // printf( "reserve=%d ",bmac_tx_reserve_get() );
    269a:	22 b1       	in	r18, 0x02	; 2
    269c:	a3 e0       	ldi	r26, 0x03	; 3
    269e:	56 95       	lsr	r21
    26a0:	47 95       	ror	r20
    26a2:	aa 95       	dec	r26
    26a4:	e1 f7       	brne	.-8      	; 0x269e <nrk_gpio_set+0x48>
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <nrk_gpio_set+0x5a>
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	4a 95       	dec	r20
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <nrk_gpio_set+0x56>
    26b4:	28 2b       	or	r18, r24
    26b6:	22 b9       	out	0x02, r18	; 2
    26b8:	4d c0       	rjmp	.+154    	; 0x2754 <nrk_gpio_set+0xfe>
    
    // Task gets control again after TX complete
    26ba:	85 b1       	in	r24, 0x05	; 5
    26bc:	f3 e0       	ldi	r31, 0x03	; 3
    26be:	56 95       	lsr	r21
    26c0:	47 95       	ror	r20
    26c2:	fa 95       	dec	r31
    26c4:	e1 f7       	brne	.-8      	; 0x26be <nrk_gpio_set+0x68>
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <nrk_gpio_set+0x76>
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	4a 95       	dec	r20
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <nrk_gpio_set+0x72>
    26d0:	82 2b       	or	r24, r18
    26d2:	85 b9       	out	0x05, r24	; 5
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <nrk_gpio_set+0xfe>
    nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
    nrk_led_clr (BLUE_LED);
    26d6:	28 b1       	in	r18, 0x08	; 8
    26d8:	e3 e0       	ldi	r30, 0x03	; 3
    26da:	56 95       	lsr	r21
    26dc:	47 95       	ror	r20
    26de:	ea 95       	dec	r30
    26e0:	e1 f7       	brne	.-8      	; 0x26da <nrk_gpio_set+0x84>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <nrk_gpio_set+0x96>
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	4a 95       	dec	r20
    26ee:	e2 f7       	brpl	.-8      	; 0x26e8 <nrk_gpio_set+0x92>
    26f0:	28 2b       	or	r18, r24
    26f2:	28 b9       	out	0x08, r18	; 8
    26f4:	2f c0       	rjmp	.+94     	; 0x2754 <nrk_gpio_set+0xfe>
    nrk_wait_until_next_period ();
  }
    26f6:	2b b1       	in	r18, 0x0b	; 11
    26f8:	73 e0       	ldi	r23, 0x03	; 3
    26fa:	56 95       	lsr	r21
    26fc:	47 95       	ror	r20
    26fe:	7a 95       	dec	r23
    2700:	e1 f7       	brne	.-8      	; 0x26fa <nrk_gpio_set+0xa4>
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	02 c0       	rjmp	.+4      	; 0x270c <nrk_gpio_set+0xb6>
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	4a 95       	dec	r20
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <nrk_gpio_set+0xb2>
    2710:	28 2b       	or	r18, r24
    2712:	2b b9       	out	0x0b, r18	; 11
    2714:	1f c0       	rjmp	.+62     	; 0x2754 <nrk_gpio_set+0xfe>

}
    2716:	2e b1       	in	r18, 0x0e	; 14
    2718:	63 e0       	ldi	r22, 0x03	; 3
    271a:	56 95       	lsr	r21
    271c:	47 95       	ror	r20
    271e:	6a 95       	dec	r22
    2720:	e1 f7       	brne	.-8      	; 0x271a <nrk_gpio_set+0xc4>
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	02 c0       	rjmp	.+4      	; 0x272c <nrk_gpio_set+0xd6>
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	4a 95       	dec	r20
    272e:	e2 f7       	brpl	.-8      	; 0x2728 <nrk_gpio_set+0xd2>
    2730:	28 2b       	or	r18, r24
    2732:	2e b9       	out	0x0e, r18	; 14
    2734:	0f c0       	rjmp	.+30     	; 0x2754 <nrk_gpio_set+0xfe>

void nrk_create_taskset ()
    2736:	21 b3       	in	r18, 0x11	; 17
    2738:	33 e0       	ldi	r19, 0x03	; 3
    273a:	56 95       	lsr	r21
    273c:	47 95       	ror	r20
    273e:	3a 95       	dec	r19
    2740:	e1 f7       	brne	.-8      	; 0x273a <nrk_gpio_set+0xe4>
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	02 c0       	rjmp	.+4      	; 0x274c <nrk_gpio_set+0xf6>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	4a 95       	dec	r20
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <nrk_gpio_set+0xf2>
    2750:	28 2b       	or	r18, r24
    2752:	21 bb       	out	0x11, r18	; 17
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	08 95       	ret
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	9f ef       	ldi	r25, 0xFF	; 255
{


  RX_TASK.task = rx_task;
    275e:	08 95       	ret

00002760 <nrk_gpio_clr>:
  nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
  RX_TASK.prio = 2;
  RX_TASK.FirstActivation = TRUE;
  RX_TASK.Type = BASIC_TASK;
    2760:	8f 3f       	cpi	r24, 0xFF	; 255
    2762:	09 f4       	brne	.+2      	; 0x2766 <nrk_gpio_clr+0x6>
    2764:	86 c0       	rjmp	.+268    	; 0x2872 <nrk_gpio_clr+0x112>
  RX_TASK.SchType = PREEMPTIVE;
    2766:	48 2f       	mov	r20, r24
    2768:	55 27       	eor	r21, r21
    276a:	9a 01       	movw	r18, r20
    276c:	27 70       	andi	r18, 0x07	; 7
    276e:	30 70       	andi	r19, 0x00	; 0
    2770:	22 30       	cpi	r18, 0x02	; 2
    2772:	31 05       	cpc	r19, r1
    2774:	c1 f1       	breq	.+112    	; 0x27e6 <nrk_gpio_clr+0x86>
    2776:	23 30       	cpi	r18, 0x03	; 3
    2778:	31 05       	cpc	r19, r1
    277a:	44 f4       	brge	.+16     	; 0x278c <nrk_gpio_clr+0x2c>
    277c:	21 15       	cp	r18, r1
    277e:	31 05       	cpc	r19, r1
    2780:	89 f0       	breq	.+34     	; 0x27a4 <nrk_gpio_clr+0x44>
    2782:	21 30       	cpi	r18, 0x01	; 1
    2784:	31 05       	cpc	r19, r1
    2786:	09 f0       	breq	.+2      	; 0x278a <nrk_gpio_clr+0x2a>
    2788:	74 c0       	rjmp	.+232    	; 0x2872 <nrk_gpio_clr+0x112>
    278a:	1d c0       	rjmp	.+58     	; 0x27c6 <nrk_gpio_clr+0x66>
    278c:	24 30       	cpi	r18, 0x04	; 4
    278e:	31 05       	cpc	r19, r1
    2790:	09 f4       	brne	.+2      	; 0x2794 <nrk_gpio_clr+0x34>
    2792:	4b c0       	rjmp	.+150    	; 0x282a <nrk_gpio_clr+0xca>
    2794:	24 30       	cpi	r18, 0x04	; 4
    2796:	31 05       	cpc	r19, r1
    2798:	bc f1       	brlt	.+110    	; 0x2808 <nrk_gpio_clr+0xa8>
    279a:	25 30       	cpi	r18, 0x05	; 5
    279c:	31 05       	cpc	r19, r1
    279e:	09 f0       	breq	.+2      	; 0x27a2 <nrk_gpio_clr+0x42>
    27a0:	68 c0       	rjmp	.+208    	; 0x2872 <nrk_gpio_clr+0x112>
    27a2:	54 c0       	rjmp	.+168    	; 0x284c <nrk_gpio_clr+0xec>
  RX_TASK.period.secs = 0;
  RX_TASK.period.nano_secs = 250 * NANOS_PER_MS;
    27a4:	22 b1       	in	r18, 0x02	; 2
    27a6:	73 e0       	ldi	r23, 0x03	; 3
    27a8:	56 95       	lsr	r21
    27aa:	47 95       	ror	r20
    27ac:	7a 95       	dec	r23
    27ae:	e1 f7       	brne	.-8      	; 0x27a8 <nrk_gpio_clr+0x48>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <nrk_gpio_clr+0x5a>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	4a 95       	dec	r20
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <nrk_gpio_clr+0x56>
    27be:	80 95       	com	r24
    27c0:	82 23       	and	r24, r18
    27c2:	82 b9       	out	0x02, r24	; 2
    27c4:	53 c0       	rjmp	.+166    	; 0x286c <nrk_gpio_clr+0x10c>
  RX_TASK.cpu_reserve.secs = 1;
  RX_TASK.cpu_reserve.nano_secs = 200 * NANOS_PER_MS;
    27c6:	95 b1       	in	r25, 0x05	; 5
    27c8:	63 e0       	ldi	r22, 0x03	; 3
    27ca:	56 95       	lsr	r21
    27cc:	47 95       	ror	r20
    27ce:	6a 95       	dec	r22
    27d0:	e1 f7       	brne	.-8      	; 0x27ca <nrk_gpio_clr+0x6a>
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <nrk_gpio_clr+0x78>
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	4a 95       	dec	r20
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <nrk_gpio_clr+0x74>
    27dc:	82 2f       	mov	r24, r18
    27de:	80 95       	com	r24
    27e0:	89 23       	and	r24, r25
    27e2:	85 b9       	out	0x05, r24	; 5
    27e4:	43 c0       	rjmp	.+134    	; 0x286c <nrk_gpio_clr+0x10c>
  RX_TASK.offset.secs = 0;
  RX_TASK.offset.nano_secs = 0;
    27e6:	28 b1       	in	r18, 0x08	; 8
    27e8:	33 e0       	ldi	r19, 0x03	; 3
    27ea:	56 95       	lsr	r21
    27ec:	47 95       	ror	r20
    27ee:	3a 95       	dec	r19
    27f0:	e1 f7       	brne	.-8      	; 0x27ea <nrk_gpio_clr+0x8a>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <nrk_gpio_clr+0x9c>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	4a 95       	dec	r20
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <nrk_gpio_clr+0x98>
    2800:	80 95       	com	r24
    2802:	82 23       	and	r24, r18
    2804:	88 b9       	out	0x08, r24	; 8
    2806:	32 c0       	rjmp	.+100    	; 0x286c <nrk_gpio_clr+0x10c>
  nrk_activate_task (&RX_TASK);

    2808:	2b b1       	in	r18, 0x0b	; 11
    280a:	93 e0       	ldi	r25, 0x03	; 3
    280c:	56 95       	lsr	r21
    280e:	47 95       	ror	r20
    2810:	9a 95       	dec	r25
    2812:	e1 f7       	brne	.-8      	; 0x280c <nrk_gpio_clr+0xac>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	02 c0       	rjmp	.+4      	; 0x281e <nrk_gpio_clr+0xbe>
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	4a 95       	dec	r20
    2820:	e2 f7       	brpl	.-8      	; 0x281a <nrk_gpio_clr+0xba>
    2822:	80 95       	com	r24
    2824:	82 23       	and	r24, r18
    2826:	8b b9       	out	0x0b, r24	; 11
    2828:	21 c0       	rjmp	.+66     	; 0x286c <nrk_gpio_clr+0x10c>
  /* TX_TASK.task = tx_task; */
  /* nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE); */
    282a:	2e b1       	in	r18, 0x0e	; 14
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	56 95       	lsr	r21
    2830:	47 95       	ror	r20
    2832:	8a 95       	dec	r24
    2834:	e1 f7       	brne	.-8      	; 0x282e <nrk_gpio_clr+0xce>
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <nrk_gpio_clr+0xe0>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	4a 95       	dec	r20
    2842:	e2 f7       	brpl	.-8      	; 0x283c <nrk_gpio_clr+0xdc>
    2844:	80 95       	com	r24
    2846:	82 23       	and	r24, r18
    2848:	8e b9       	out	0x0e, r24	; 14
    284a:	10 c0       	rjmp	.+32     	; 0x286c <nrk_gpio_clr+0x10c>
  /* TX_TASK.prio = 2; */
  /* TX_TASK.FirstActivation = TRUE; */
    284c:	21 b3       	in	r18, 0x11	; 17
    284e:	b3 e0       	ldi	r27, 0x03	; 3
    2850:	56 95       	lsr	r21
    2852:	47 95       	ror	r20
    2854:	ba 95       	dec	r27
    2856:	e1 f7       	brne	.-8      	; 0x2850 <nrk_gpio_clr+0xf0>
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <nrk_gpio_clr+0x102>
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	4a 95       	dec	r20
    2864:	e2 f7       	brpl	.-8      	; 0x285e <nrk_gpio_clr+0xfe>
    2866:	80 95       	com	r24
    2868:	82 23       	and	r24, r18
    286a:	81 bb       	out	0x11, r24	; 17
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	08 95       	ret
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	9f ef       	ldi	r25, 0xFF	; 255
  /* TX_TASK.Type = BASIC_TASK; */
  /* TX_TASK.SchType = PREEMPTIVE; */
  /* TX_TASK.period.secs = 1; */
  /* TX_TASK.period.nano_secs = 0; */
    2876:	08 95       	ret

00002878 <nrk_gpio_get>:
  /* TX_TASK.cpu_reserve.secs = 1; */
  /* TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS; */
  /* TX_TASK.offset.secs = 0; */
  /* TX_TASK.offset.nano_secs = 0; */
    2878:	8f 3f       	cpi	r24, 0xFF	; 255
    287a:	a9 f1       	breq	.+106    	; 0x28e6 <nrk_gpio_get+0x6e>
  /* nrk_activate_task (&TX_TASK); */
    287c:	28 2f       	mov	r18, r24
    287e:	33 27       	eor	r19, r19
    2880:	c9 01       	movw	r24, r18
    2882:	87 70       	andi	r24, 0x07	; 7
    2884:	90 70       	andi	r25, 0x00	; 0
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	91 05       	cpc	r25, r1
    288a:	a9 f0       	breq	.+42     	; 0x28b6 <nrk_gpio_get+0x3e>
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	91 05       	cpc	r25, r1
    2890:	2c f4       	brge	.+10     	; 0x289c <nrk_gpio_get+0x24>
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	61 f0       	breq	.+24     	; 0x28ae <nrk_gpio_get+0x36>
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	31 f5       	brne	.+76     	; 0x28e6 <nrk_gpio_get+0x6e>
    289a:	0b c0       	rjmp	.+22     	; 0x28b2 <nrk_gpio_get+0x3a>
    289c:	84 30       	cpi	r24, 0x04	; 4
    289e:	91 05       	cpc	r25, r1
    28a0:	71 f0       	breq	.+28     	; 0x28be <nrk_gpio_get+0x46>
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	91 05       	cpc	r25, r1
    28a6:	4c f0       	brlt	.+18     	; 0x28ba <nrk_gpio_get+0x42>
    28a8:	05 97       	sbiw	r24, 0x05	; 5
    28aa:	e9 f4       	brne	.+58     	; 0x28e6 <nrk_gpio_get+0x6e>
    28ac:	0a c0       	rjmp	.+20     	; 0x28c2 <nrk_gpio_get+0x4a>


    28ae:	80 b1       	in	r24, 0x00	; 0
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <nrk_gpio_get+0x4c>

  printf ("Create done\r\n");
    28b2:	83 b1       	in	r24, 0x03	; 3
    28b4:	07 c0       	rjmp	.+14     	; 0x28c4 <nrk_gpio_get+0x4c>
}
    28b6:	86 b1       	in	r24, 0x06	; 6
    28b8:	05 c0       	rjmp	.+10     	; 0x28c4 <nrk_gpio_get+0x4c>
    28ba:	89 b1       	in	r24, 0x09	; 9
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <nrk_gpio_get+0x4c>
    28be:	8c b1       	in	r24, 0x0c	; 12
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <nrk_gpio_get+0x4c>
    28c2:	8f b1       	in	r24, 0x0f	; 15
    28c4:	99 27       	eor	r25, r25
    28c6:	e3 e0       	ldi	r30, 0x03	; 3
    28c8:	36 95       	lsr	r19
    28ca:	27 95       	ror	r18
    28cc:	ea 95       	dec	r30
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <nrk_gpio_get+0x50>
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <nrk_gpio_get+0x5e>
    28d2:	95 95       	asr	r25
    28d4:	87 95       	ror	r24
    28d6:	2a 95       	dec	r18
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <nrk_gpio_get+0x5a>
    28da:	99 27       	eor	r25, r25
    28dc:	87 fd       	sbrc	r24, 7
    28de:	90 95       	com	r25
    28e0:	81 70       	andi	r24, 0x01	; 1
    28e2:	90 70       	andi	r25, 0x00	; 0
    28e4:	08 95       	ret
    28e6:	8f ef       	ldi	r24, 0xFF	; 255
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <nrk_gpio_toggle>:
    28ec:	8f 3f       	cpi	r24, 0xFF	; 255
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <nrk_gpio_toggle+0x6>
    28f0:	03 c1       	rjmp	.+518    	; 0x2af8 <nrk_gpio_toggle+0x20c>
    28f2:	28 2f       	mov	r18, r24
    28f4:	33 27       	eor	r19, r19
    28f6:	a9 01       	movw	r20, r18
    28f8:	47 70       	andi	r20, 0x07	; 7
    28fa:	50 70       	andi	r21, 0x00	; 0
    28fc:	42 30       	cpi	r20, 0x02	; 2
    28fe:	51 05       	cpc	r21, r1
    2900:	09 f4       	brne	.+2      	; 0x2904 <nrk_gpio_toggle+0x18>
    2902:	5c c0       	rjmp	.+184    	; 0x29bc <nrk_gpio_toggle+0xd0>
    2904:	43 30       	cpi	r20, 0x03	; 3
    2906:	51 05       	cpc	r21, r1
    2908:	44 f4       	brge	.+16     	; 0x291a <nrk_gpio_toggle+0x2e>
    290a:	41 15       	cp	r20, r1
    290c:	51 05       	cpc	r21, r1
    290e:	91 f0       	breq	.+36     	; 0x2934 <nrk_gpio_toggle+0x48>
    2910:	41 30       	cpi	r20, 0x01	; 1
    2912:	51 05       	cpc	r21, r1
    2914:	09 f0       	breq	.+2      	; 0x2918 <nrk_gpio_toggle+0x2c>
    2916:	f0 c0       	rjmp	.+480    	; 0x2af8 <nrk_gpio_toggle+0x20c>
    2918:	34 c0       	rjmp	.+104    	; 0x2982 <nrk_gpio_toggle+0x96>
    291a:	44 30       	cpi	r20, 0x04	; 4
    291c:	51 05       	cpc	r21, r1
    291e:	09 f4       	brne	.+2      	; 0x2922 <nrk_gpio_toggle+0x36>
    2920:	9b c0       	rjmp	.+310    	; 0x2a58 <nrk_gpio_toggle+0x16c>
    2922:	44 30       	cpi	r20, 0x04	; 4
    2924:	51 05       	cpc	r21, r1
    2926:	0c f4       	brge	.+2      	; 0x292a <nrk_gpio_toggle+0x3e>
    2928:	70 c0       	rjmp	.+224    	; 0x2a0a <nrk_gpio_toggle+0x11e>
    292a:	45 30       	cpi	r20, 0x05	; 5
    292c:	51 05       	cpc	r21, r1
    292e:	09 f0       	breq	.+2      	; 0x2932 <nrk_gpio_toggle+0x46>
    2930:	e3 c0       	rjmp	.+454    	; 0x2af8 <nrk_gpio_toggle+0x20c>
    2932:	b9 c0       	rjmp	.+370    	; 0x2aa6 <nrk_gpio_toggle+0x1ba>
    2934:	80 b1       	in	r24, 0x00	; 0
    2936:	a9 01       	movw	r20, r18
    2938:	73 e0       	ldi	r23, 0x03	; 3
    293a:	56 95       	lsr	r21
    293c:	47 95       	ror	r20
    293e:	7a 95       	dec	r23
    2940:	e1 f7       	brne	.-8      	; 0x293a <nrk_gpio_toggle+0x4e>
    2942:	99 27       	eor	r25, r25
    2944:	04 2e       	mov	r0, r20
    2946:	02 c0       	rjmp	.+4      	; 0x294c <nrk_gpio_toggle+0x60>
    2948:	95 95       	asr	r25
    294a:	87 95       	ror	r24
    294c:	0a 94       	dec	r0
    294e:	e2 f7       	brpl	.-8      	; 0x2948 <nrk_gpio_toggle+0x5c>
    2950:	80 fd       	sbrc	r24, 0
    2952:	0b c0       	rjmp	.+22     	; 0x296a <nrk_gpio_toggle+0x7e>
    2954:	22 b1       	in	r18, 0x02	; 2
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <nrk_gpio_toggle+0x74>
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	4a 95       	dec	r20
    2962:	e2 f7       	brpl	.-8      	; 0x295c <nrk_gpio_toggle+0x70>
    2964:	28 2b       	or	r18, r24
    2966:	22 b9       	out	0x02, r18	; 2
    2968:	c4 c0       	rjmp	.+392    	; 0x2af2 <nrk_gpio_toggle+0x206>
    296a:	22 b1       	in	r18, 0x02	; 2
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <nrk_gpio_toggle+0x8a>
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	4a 95       	dec	r20
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <nrk_gpio_toggle+0x86>
    297a:	80 95       	com	r24
    297c:	82 23       	and	r24, r18
    297e:	82 b9       	out	0x02, r24	; 2
    2980:	b8 c0       	rjmp	.+368    	; 0x2af2 <nrk_gpio_toggle+0x206>
    2982:	83 b1       	in	r24, 0x03	; 3
    2984:	63 e0       	ldi	r22, 0x03	; 3
    2986:	36 95       	lsr	r19
    2988:	27 95       	ror	r18
    298a:	6a 95       	dec	r22
    298c:	e1 f7       	brne	.-8      	; 0x2986 <nrk_gpio_toggle+0x9a>
    298e:	99 27       	eor	r25, r25
    2990:	02 2e       	mov	r0, r18
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <nrk_gpio_toggle+0xac>
    2994:	95 95       	asr	r25
    2996:	87 95       	ror	r24
    2998:	0a 94       	dec	r0
    299a:	e2 f7       	brpl	.-8      	; 0x2994 <nrk_gpio_toggle+0xa8>
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <nrk_gpio_toggle+0xb6>
    299e:	44 0f       	add	r20, r20
    29a0:	55 1f       	adc	r21, r21
    29a2:	2a 95       	dec	r18
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <nrk_gpio_toggle+0xb2>
    29a6:	80 fd       	sbrc	r24, 0
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <nrk_gpio_toggle+0xc4>
    29aa:	85 b1       	in	r24, 0x05	; 5
    29ac:	84 2b       	or	r24, r20
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <nrk_gpio_toggle+0xcc>
    29b0:	95 b1       	in	r25, 0x05	; 5
    29b2:	84 2f       	mov	r24, r20
    29b4:	80 95       	com	r24
    29b6:	89 23       	and	r24, r25
    29b8:	85 b9       	out	0x05, r24	; 5
    29ba:	9b c0       	rjmp	.+310    	; 0x2af2 <nrk_gpio_toggle+0x206>
    29bc:	86 b1       	in	r24, 0x06	; 6
    29be:	a9 01       	movw	r20, r18
    29c0:	93 e0       	ldi	r25, 0x03	; 3
    29c2:	56 95       	lsr	r21
    29c4:	47 95       	ror	r20
    29c6:	9a 95       	dec	r25
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <nrk_gpio_toggle+0xd6>
    29ca:	99 27       	eor	r25, r25
    29cc:	04 2e       	mov	r0, r20
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <nrk_gpio_toggle+0xe8>
    29d0:	95 95       	asr	r25
    29d2:	87 95       	ror	r24
    29d4:	0a 94       	dec	r0
    29d6:	e2 f7       	brpl	.-8      	; 0x29d0 <nrk_gpio_toggle+0xe4>
    29d8:	80 fd       	sbrc	r24, 0
    29da:	0b c0       	rjmp	.+22     	; 0x29f2 <nrk_gpio_toggle+0x106>
    29dc:	28 b1       	in	r18, 0x08	; 8
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <nrk_gpio_toggle+0xfc>
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	4a 95       	dec	r20
    29ea:	e2 f7       	brpl	.-8      	; 0x29e4 <nrk_gpio_toggle+0xf8>
    29ec:	28 2b       	or	r18, r24
    29ee:	28 b9       	out	0x08, r18	; 8
    29f0:	80 c0       	rjmp	.+256    	; 0x2af2 <nrk_gpio_toggle+0x206>
    29f2:	28 b1       	in	r18, 0x08	; 8
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <nrk_gpio_toggle+0x112>
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	4a 95       	dec	r20
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <nrk_gpio_toggle+0x10e>
    2a02:	80 95       	com	r24
    2a04:	82 23       	and	r24, r18
    2a06:	88 b9       	out	0x08, r24	; 8
    2a08:	74 c0       	rjmp	.+232    	; 0x2af2 <nrk_gpio_toggle+0x206>
    2a0a:	89 b1       	in	r24, 0x09	; 9
    2a0c:	a9 01       	movw	r20, r18
    2a0e:	b3 e0       	ldi	r27, 0x03	; 3
    2a10:	56 95       	lsr	r21
    2a12:	47 95       	ror	r20
    2a14:	ba 95       	dec	r27
    2a16:	e1 f7       	brne	.-8      	; 0x2a10 <nrk_gpio_toggle+0x124>
    2a18:	99 27       	eor	r25, r25
    2a1a:	04 2e       	mov	r0, r20
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <nrk_gpio_toggle+0x136>
    2a1e:	95 95       	asr	r25
    2a20:	87 95       	ror	r24
    2a22:	0a 94       	dec	r0
    2a24:	e2 f7       	brpl	.-8      	; 0x2a1e <nrk_gpio_toggle+0x132>
    2a26:	80 fd       	sbrc	r24, 0
    2a28:	0b c0       	rjmp	.+22     	; 0x2a40 <nrk_gpio_toggle+0x154>
    2a2a:	2b b1       	in	r18, 0x0b	; 11
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <nrk_gpio_toggle+0x14a>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	4a 95       	dec	r20
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <nrk_gpio_toggle+0x146>
    2a3a:	28 2b       	or	r18, r24
    2a3c:	2b b9       	out	0x0b, r18	; 11
    2a3e:	59 c0       	rjmp	.+178    	; 0x2af2 <nrk_gpio_toggle+0x206>
    2a40:	2b b1       	in	r18, 0x0b	; 11
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <nrk_gpio_toggle+0x160>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	4a 95       	dec	r20
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <nrk_gpio_toggle+0x15c>
    2a50:	80 95       	com	r24
    2a52:	82 23       	and	r24, r18
    2a54:	8b b9       	out	0x0b, r24	; 11
    2a56:	4d c0       	rjmp	.+154    	; 0x2af2 <nrk_gpio_toggle+0x206>
    2a58:	8c b1       	in	r24, 0x0c	; 12
    2a5a:	a9 01       	movw	r20, r18
    2a5c:	a3 e0       	ldi	r26, 0x03	; 3
    2a5e:	56 95       	lsr	r21
    2a60:	47 95       	ror	r20
    2a62:	aa 95       	dec	r26
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <nrk_gpio_toggle+0x172>
    2a66:	99 27       	eor	r25, r25
    2a68:	04 2e       	mov	r0, r20
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <nrk_gpio_toggle+0x184>
    2a6c:	95 95       	asr	r25
    2a6e:	87 95       	ror	r24
    2a70:	0a 94       	dec	r0
    2a72:	e2 f7       	brpl	.-8      	; 0x2a6c <nrk_gpio_toggle+0x180>
    2a74:	80 fd       	sbrc	r24, 0
    2a76:	0b c0       	rjmp	.+22     	; 0x2a8e <nrk_gpio_toggle+0x1a2>
    2a78:	2e b1       	in	r18, 0x0e	; 14
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <nrk_gpio_toggle+0x198>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	4a 95       	dec	r20
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <nrk_gpio_toggle+0x194>
    2a88:	28 2b       	or	r18, r24
    2a8a:	2e b9       	out	0x0e, r18	; 14
    2a8c:	32 c0       	rjmp	.+100    	; 0x2af2 <nrk_gpio_toggle+0x206>
    2a8e:	2e b1       	in	r18, 0x0e	; 14
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <nrk_gpio_toggle+0x1ae>
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	4a 95       	dec	r20
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <nrk_gpio_toggle+0x1aa>
    2a9e:	80 95       	com	r24
    2aa0:	82 23       	and	r24, r18
    2aa2:	8e b9       	out	0x0e, r24	; 14
    2aa4:	26 c0       	rjmp	.+76     	; 0x2af2 <nrk_gpio_toggle+0x206>
    2aa6:	8f b1       	in	r24, 0x0f	; 15
    2aa8:	a9 01       	movw	r20, r18
    2aaa:	f3 e0       	ldi	r31, 0x03	; 3
    2aac:	56 95       	lsr	r21
    2aae:	47 95       	ror	r20
    2ab0:	fa 95       	dec	r31
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <nrk_gpio_toggle+0x1c0>
    2ab4:	99 27       	eor	r25, r25
    2ab6:	04 2e       	mov	r0, r20
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <nrk_gpio_toggle+0x1d2>
    2aba:	95 95       	asr	r25
    2abc:	87 95       	ror	r24
    2abe:	0a 94       	dec	r0
    2ac0:	e2 f7       	brpl	.-8      	; 0x2aba <nrk_gpio_toggle+0x1ce>
    2ac2:	80 fd       	sbrc	r24, 0
    2ac4:	0b c0       	rjmp	.+22     	; 0x2adc <nrk_gpio_toggle+0x1f0>
    2ac6:	21 b3       	in	r18, 0x11	; 17
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <nrk_gpio_toggle+0x1e6>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	4a 95       	dec	r20
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <nrk_gpio_toggle+0x1e2>
    2ad6:	28 2b       	or	r18, r24
    2ad8:	21 bb       	out	0x11, r18	; 17
    2ada:	0b c0       	rjmp	.+22     	; 0x2af2 <nrk_gpio_toggle+0x206>
    2adc:	21 b3       	in	r18, 0x11	; 17
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <nrk_gpio_toggle+0x1fc>
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	4a 95       	dec	r20
    2aea:	e2 f7       	brpl	.-8      	; 0x2ae4 <nrk_gpio_toggle+0x1f8>
    2aec:	80 95       	com	r24
    2aee:	82 23       	and	r24, r18
    2af0:	81 bb       	out	0x11, r24	; 17
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	08 95       	ret
    2af8:	8f ef       	ldi	r24, 0xFF	; 255
    2afa:	9f ef       	ldi	r25, 0xFF	; 255
    2afc:	08 95       	ret

00002afe <nrk_gpio_direction>:
    2afe:	8f 3f       	cpi	r24, 0xFF	; 255
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <nrk_gpio_direction+0x6>
    2b02:	12 c1       	rjmp	.+548    	; 0x2d28 <nrk_gpio_direction+0x22a>
    2b04:	48 2f       	mov	r20, r24
    2b06:	55 27       	eor	r21, r21
    2b08:	66 23       	and	r22, r22
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <nrk_gpio_direction+0x10>
    2b0c:	90 c0       	rjmp	.+288    	; 0x2c2e <nrk_gpio_direction+0x130>
    2b0e:	ca 01       	movw	r24, r20
    2b10:	87 70       	andi	r24, 0x07	; 7
    2b12:	90 70       	andi	r25, 0x00	; 0
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	91 05       	cpc	r25, r1
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <nrk_gpio_direction+0x1e>
    2b1a:	3e c0       	rjmp	.+124    	; 0x2b98 <nrk_gpio_direction+0x9a>
    2b1c:	83 30       	cpi	r24, 0x03	; 3
    2b1e:	91 05       	cpc	r25, r1
    2b20:	3c f4       	brge	.+14     	; 0x2b30 <nrk_gpio_direction+0x32>
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	89 f0       	breq	.+34     	; 0x2b48 <nrk_gpio_direction+0x4a>
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	91 05       	cpc	r25, r1
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <nrk_gpio_direction+0x30>
    2b2c:	fd c0       	rjmp	.+506    	; 0x2d28 <nrk_gpio_direction+0x22a>
    2b2e:	21 c0       	rjmp	.+66     	; 0x2b72 <nrk_gpio_direction+0x74>
    2b30:	84 30       	cpi	r24, 0x04	; 4
    2b32:	91 05       	cpc	r25, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <nrk_gpio_direction+0x3a>
    2b36:	54 c0       	rjmp	.+168    	; 0x2be0 <nrk_gpio_direction+0xe2>
    2b38:	84 30       	cpi	r24, 0x04	; 4
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	0c f4       	brge	.+2      	; 0x2b40 <nrk_gpio_direction+0x42>
    2b3e:	3e c0       	rjmp	.+124    	; 0x2bbc <nrk_gpio_direction+0xbe>
    2b40:	05 97       	sbiw	r24, 0x05	; 5
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <nrk_gpio_direction+0x48>
    2b44:	f1 c0       	rjmp	.+482    	; 0x2d28 <nrk_gpio_direction+0x22a>
    2b46:	5e c0       	rjmp	.+188    	; 0x2c04 <nrk_gpio_direction+0x106>
    2b48:	31 b1       	in	r19, 0x01	; 1
    2b4a:	b3 e0       	ldi	r27, 0x03	; 3
    2b4c:	56 95       	lsr	r21
    2b4e:	47 95       	ror	r20
    2b50:	ba 95       	dec	r27
    2b52:	e1 f7       	brne	.-8      	; 0x2b4c <nrk_gpio_direction+0x4e>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <nrk_gpio_direction+0x60>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	4a 95       	dec	r20
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <nrk_gpio_direction+0x5c>
    2b62:	28 2f       	mov	r18, r24
    2b64:	20 95       	com	r18
    2b66:	23 23       	and	r18, r19
    2b68:	21 b9       	out	0x01, r18	; 1
    2b6a:	22 b1       	in	r18, 0x02	; 2
    2b6c:	82 2b       	or	r24, r18
    2b6e:	82 b9       	out	0x02, r24	; 2
    2b70:	d8 c0       	rjmp	.+432    	; 0x2d22 <nrk_gpio_direction+0x224>
    2b72:	24 b1       	in	r18, 0x04	; 4
    2b74:	a3 e0       	ldi	r26, 0x03	; 3
    2b76:	56 95       	lsr	r21
    2b78:	47 95       	ror	r20
    2b7a:	aa 95       	dec	r26
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <nrk_gpio_direction+0x78>
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <nrk_gpio_direction+0x86>
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	4a 95       	dec	r20
    2b86:	e2 f7       	brpl	.-8      	; 0x2b80 <nrk_gpio_direction+0x82>
    2b88:	98 2f       	mov	r25, r24
    2b8a:	80 95       	com	r24
    2b8c:	82 23       	and	r24, r18
    2b8e:	84 b9       	out	0x04, r24	; 4
    2b90:	85 b1       	in	r24, 0x05	; 5
    2b92:	98 2b       	or	r25, r24
    2b94:	95 b9       	out	0x05, r25	; 5
    2b96:	c5 c0       	rjmp	.+394    	; 0x2d22 <nrk_gpio_direction+0x224>
    2b98:	37 b1       	in	r19, 0x07	; 7
    2b9a:	f3 e0       	ldi	r31, 0x03	; 3
    2b9c:	56 95       	lsr	r21
    2b9e:	47 95       	ror	r20
    2ba0:	fa 95       	dec	r31
    2ba2:	e1 f7       	brne	.-8      	; 0x2b9c <nrk_gpio_direction+0x9e>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <nrk_gpio_direction+0xb0>
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	4a 95       	dec	r20
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <nrk_gpio_direction+0xac>
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	20 95       	com	r18
    2bb6:	23 23       	and	r18, r19
    2bb8:	27 b9       	out	0x07, r18	; 7
    2bba:	35 c0       	rjmp	.+106    	; 0x2c26 <nrk_gpio_direction+0x128>
    2bbc:	3a b1       	in	r19, 0x0a	; 10
    2bbe:	e3 e0       	ldi	r30, 0x03	; 3
    2bc0:	56 95       	lsr	r21
    2bc2:	47 95       	ror	r20
    2bc4:	ea 95       	dec	r30
    2bc6:	e1 f7       	brne	.-8      	; 0x2bc0 <nrk_gpio_direction+0xc2>
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <nrk_gpio_direction+0xd4>
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	4a 95       	dec	r20
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <nrk_gpio_direction+0xd0>
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	20 95       	com	r18
    2bda:	23 23       	and	r18, r19
    2bdc:	2a b9       	out	0x0a, r18	; 10
    2bde:	23 c0       	rjmp	.+70     	; 0x2c26 <nrk_gpio_direction+0x128>
    2be0:	3d b1       	in	r19, 0x0d	; 13
    2be2:	73 e0       	ldi	r23, 0x03	; 3
    2be4:	56 95       	lsr	r21
    2be6:	47 95       	ror	r20
    2be8:	7a 95       	dec	r23
    2bea:	e1 f7       	brne	.-8      	; 0x2be4 <nrk_gpio_direction+0xe6>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <nrk_gpio_direction+0xf8>
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	4a 95       	dec	r20
    2bf8:	e2 f7       	brpl	.-8      	; 0x2bf2 <nrk_gpio_direction+0xf4>
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	20 95       	com	r18
    2bfe:	23 23       	and	r18, r19
    2c00:	2d b9       	out	0x0d, r18	; 13
    2c02:	11 c0       	rjmp	.+34     	; 0x2c26 <nrk_gpio_direction+0x128>
    2c04:	30 b3       	in	r19, 0x10	; 16
    2c06:	63 e0       	ldi	r22, 0x03	; 3
    2c08:	56 95       	lsr	r21
    2c0a:	47 95       	ror	r20
    2c0c:	6a 95       	dec	r22
    2c0e:	e1 f7       	brne	.-8      	; 0x2c08 <nrk_gpio_direction+0x10a>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <nrk_gpio_direction+0x11c>
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	4a 95       	dec	r20
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <nrk_gpio_direction+0x118>
    2c1e:	28 2f       	mov	r18, r24
    2c20:	20 95       	com	r18
    2c22:	23 23       	and	r18, r19
    2c24:	20 bb       	out	0x10, r18	; 16
    2c26:	25 b1       	in	r18, 0x05	; 5
    2c28:	82 2b       	or	r24, r18
    2c2a:	85 b9       	out	0x05, r24	; 5
    2c2c:	7a c0       	rjmp	.+244    	; 0x2d22 <nrk_gpio_direction+0x224>
    2c2e:	9a 01       	movw	r18, r20
    2c30:	27 70       	andi	r18, 0x07	; 7
    2c32:	30 70       	andi	r19, 0x00	; 0
    2c34:	22 30       	cpi	r18, 0x02	; 2
    2c36:	31 05       	cpc	r19, r1
    2c38:	a9 f1       	breq	.+106    	; 0x2ca4 <nrk_gpio_direction+0x1a6>
    2c3a:	23 30       	cpi	r18, 0x03	; 3
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	44 f4       	brge	.+16     	; 0x2c50 <nrk_gpio_direction+0x152>
    2c40:	21 15       	cp	r18, r1
    2c42:	31 05       	cpc	r19, r1
    2c44:	89 f0       	breq	.+34     	; 0x2c68 <nrk_gpio_direction+0x16a>
    2c46:	21 30       	cpi	r18, 0x01	; 1
    2c48:	31 05       	cpc	r19, r1
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <nrk_gpio_direction+0x150>
    2c4c:	6d c0       	rjmp	.+218    	; 0x2d28 <nrk_gpio_direction+0x22a>
    2c4e:	1c c0       	rjmp	.+56     	; 0x2c88 <nrk_gpio_direction+0x18a>
    2c50:	24 30       	cpi	r18, 0x04	; 4
    2c52:	31 05       	cpc	r19, r1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <nrk_gpio_direction+0x15a>
    2c56:	46 c0       	rjmp	.+140    	; 0x2ce4 <nrk_gpio_direction+0x1e6>
    2c58:	24 30       	cpi	r18, 0x04	; 4
    2c5a:	31 05       	cpc	r19, r1
    2c5c:	9c f1       	brlt	.+102    	; 0x2cc4 <nrk_gpio_direction+0x1c6>
    2c5e:	25 30       	cpi	r18, 0x05	; 5
    2c60:	31 05       	cpc	r19, r1
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <nrk_gpio_direction+0x168>
    2c64:	61 c0       	rjmp	.+194    	; 0x2d28 <nrk_gpio_direction+0x22a>
    2c66:	4e c0       	rjmp	.+156    	; 0x2d04 <nrk_gpio_direction+0x206>
    2c68:	21 b1       	in	r18, 0x01	; 1
    2c6a:	33 e0       	ldi	r19, 0x03	; 3
    2c6c:	56 95       	lsr	r21
    2c6e:	47 95       	ror	r20
    2c70:	3a 95       	dec	r19
    2c72:	e1 f7       	brne	.-8      	; 0x2c6c <nrk_gpio_direction+0x16e>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <nrk_gpio_direction+0x180>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	4a 95       	dec	r20
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <nrk_gpio_direction+0x17c>
    2c82:	28 2b       	or	r18, r24
    2c84:	21 b9       	out	0x01, r18	; 1
    2c86:	4d c0       	rjmp	.+154    	; 0x2d22 <nrk_gpio_direction+0x224>
    2c88:	84 b1       	in	r24, 0x04	; 4
    2c8a:	93 e0       	ldi	r25, 0x03	; 3
    2c8c:	56 95       	lsr	r21
    2c8e:	47 95       	ror	r20
    2c90:	9a 95       	dec	r25
    2c92:	e1 f7       	brne	.-8      	; 0x2c8c <nrk_gpio_direction+0x18e>
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <nrk_gpio_direction+0x19c>
    2c96:	22 0f       	add	r18, r18
    2c98:	33 1f       	adc	r19, r19
    2c9a:	4a 95       	dec	r20
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <nrk_gpio_direction+0x198>
    2c9e:	82 2b       	or	r24, r18
    2ca0:	84 b9       	out	0x04, r24	; 4
    2ca2:	3f c0       	rjmp	.+126    	; 0x2d22 <nrk_gpio_direction+0x224>
    2ca4:	27 b1       	in	r18, 0x07	; 7
    2ca6:	b3 e0       	ldi	r27, 0x03	; 3
    2ca8:	56 95       	lsr	r21
    2caa:	47 95       	ror	r20
    2cac:	ba 95       	dec	r27
    2cae:	e1 f7       	brne	.-8      	; 0x2ca8 <nrk_gpio_direction+0x1aa>
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <nrk_gpio_direction+0x1bc>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	4a 95       	dec	r20
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <nrk_gpio_direction+0x1b8>
    2cbe:	28 2b       	or	r18, r24
    2cc0:	27 b9       	out	0x07, r18	; 7
    2cc2:	2f c0       	rjmp	.+94     	; 0x2d22 <nrk_gpio_direction+0x224>
    2cc4:	2a b1       	in	r18, 0x0a	; 10
    2cc6:	a3 e0       	ldi	r26, 0x03	; 3
    2cc8:	56 95       	lsr	r21
    2cca:	47 95       	ror	r20
    2ccc:	aa 95       	dec	r26
    2cce:	e1 f7       	brne	.-8      	; 0x2cc8 <nrk_gpio_direction+0x1ca>
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <nrk_gpio_direction+0x1dc>
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	4a 95       	dec	r20
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <nrk_gpio_direction+0x1d8>
    2cde:	28 2b       	or	r18, r24
    2ce0:	2a b9       	out	0x0a, r18	; 10
    2ce2:	1f c0       	rjmp	.+62     	; 0x2d22 <nrk_gpio_direction+0x224>
    2ce4:	2d b1       	in	r18, 0x0d	; 13
    2ce6:	f3 e0       	ldi	r31, 0x03	; 3
    2ce8:	56 95       	lsr	r21
    2cea:	47 95       	ror	r20
    2cec:	fa 95       	dec	r31
    2cee:	e1 f7       	brne	.-8      	; 0x2ce8 <nrk_gpio_direction+0x1ea>
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <nrk_gpio_direction+0x1fc>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	4a 95       	dec	r20
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <nrk_gpio_direction+0x1f8>
    2cfe:	28 2b       	or	r18, r24
    2d00:	2d b9       	out	0x0d, r18	; 13
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <nrk_gpio_direction+0x224>
    2d04:	20 b3       	in	r18, 0x10	; 16
    2d06:	e3 e0       	ldi	r30, 0x03	; 3
    2d08:	56 95       	lsr	r21
    2d0a:	47 95       	ror	r20
    2d0c:	ea 95       	dec	r30
    2d0e:	e1 f7       	brne	.-8      	; 0x2d08 <nrk_gpio_direction+0x20a>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <nrk_gpio_direction+0x21c>
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	4a 95       	dec	r20
    2d1c:	e2 f7       	brpl	.-8      	; 0x2d16 <nrk_gpio_direction+0x218>
    2d1e:	28 2b       	or	r18, r24
    2d20:	20 bb       	out	0x10, r18	; 16
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	08 95       	ret
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	9f ef       	ldi	r25, 0xFF	; 255
    2d2c:	08 95       	ret

00002d2e <nrk_get_button>:
    2d2e:	88 23       	and	r24, r24
    2d30:	19 f0       	breq	.+6      	; 0x2d38 <nrk_get_button+0xa>
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	9f ef       	ldi	r25, 0xFF	; 255
    2d36:	08 95       	ret
    2d38:	80 b1       	in	r24, 0x00	; 0
    2d3a:	99 27       	eor	r25, r25
    2d3c:	87 fd       	sbrc	r24, 7
    2d3e:	90 95       	com	r25
    2d40:	80 95       	com	r24
    2d42:	90 95       	com	r25
    2d44:	88 27       	eor	r24, r24
    2d46:	99 0f       	add	r25, r25
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 27       	eor	r25, r25
    2d4c:	08 95       	ret

00002d4e <nrk_led_toggle>:
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	11 f4       	brne	.+4      	; 0x2d56 <nrk_led_toggle+0x8>
    2d52:	84 e1       	ldi	r24, 0x14	; 20
    2d54:	09 c0       	rjmp	.+18     	; 0x2d68 <nrk_led_toggle+0x1a>
    2d56:	81 30       	cpi	r24, 0x01	; 1
    2d58:	91 05       	cpc	r25, r1
    2d5a:	11 f4       	brne	.+4      	; 0x2d60 <nrk_led_toggle+0x12>
    2d5c:	8c e1       	ldi	r24, 0x1C	; 28
    2d5e:	04 c0       	rjmp	.+8      	; 0x2d68 <nrk_led_toggle+0x1a>
    2d60:	82 30       	cpi	r24, 0x02	; 2
    2d62:	91 05       	cpc	r25, r1
    2d64:	31 f4       	brne	.+12     	; 0x2d72 <nrk_led_toggle+0x24>
    2d66:	84 e2       	ldi	r24, 0x24	; 36
    2d68:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_gpio_toggle>
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	08 95       	ret
    2d72:	03 97       	sbiw	r24, 0x03	; 3
    2d74:	19 f0       	breq	.+6      	; 0x2d7c <nrk_led_toggle+0x2e>
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	9f ef       	ldi	r25, 0xFF	; 255
    2d7a:	08 95       	ret
    2d7c:	8c e2       	ldi	r24, 0x2C	; 44
    2d7e:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_gpio_toggle>
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	08 95       	ret

00002d88 <nrk_led_clr>:
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	11 f4       	brne	.+4      	; 0x2d90 <nrk_led_clr+0x8>
    2d8c:	84 e1       	ldi	r24, 0x14	; 20
    2d8e:	09 c0       	rjmp	.+18     	; 0x2da2 <nrk_led_clr+0x1a>
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	91 05       	cpc	r25, r1
    2d94:	11 f4       	brne	.+4      	; 0x2d9a <nrk_led_clr+0x12>
    2d96:	8c e1       	ldi	r24, 0x1C	; 28
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <nrk_led_clr+0x1a>
    2d9a:	82 30       	cpi	r24, 0x02	; 2
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	31 f4       	brne	.+12     	; 0x2dac <nrk_led_clr+0x24>
    2da0:	84 e2       	ldi	r24, 0x24	; 36
    2da2:	0e 94 2b 13 	call	0x2656	; 0x2656 <nrk_gpio_set>
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	08 95       	ret
    2dac:	03 97       	sbiw	r24, 0x03	; 3
    2dae:	19 f0       	breq	.+6      	; 0x2db6 <nrk_led_clr+0x2e>
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	9f ef       	ldi	r25, 0xFF	; 255
    2db4:	08 95       	ret
    2db6:	8c e2       	ldi	r24, 0x2C	; 44
    2db8:	0e 94 2b 13 	call	0x2656	; 0x2656 <nrk_gpio_set>
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	08 95       	ret

00002dc2 <nrk_led_set>:
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	11 f4       	brne	.+4      	; 0x2dca <nrk_led_set+0x8>
    2dc6:	84 e1       	ldi	r24, 0x14	; 20
    2dc8:	09 c0       	rjmp	.+18     	; 0x2ddc <nrk_led_set+0x1a>
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	91 05       	cpc	r25, r1
    2dce:	11 f4       	brne	.+4      	; 0x2dd4 <nrk_led_set+0x12>
    2dd0:	8c e1       	ldi	r24, 0x1C	; 28
    2dd2:	04 c0       	rjmp	.+8      	; 0x2ddc <nrk_led_set+0x1a>
    2dd4:	82 30       	cpi	r24, 0x02	; 2
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	31 f4       	brne	.+12     	; 0x2de6 <nrk_led_set+0x24>
    2dda:	84 e2       	ldi	r24, 0x24	; 36
    2ddc:	0e 94 b0 13 	call	0x2760	; 0x2760 <nrk_gpio_clr>
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	08 95       	ret
    2de6:	03 97       	sbiw	r24, 0x03	; 3
    2de8:	19 f0       	breq	.+6      	; 0x2df0 <nrk_led_set+0x2e>
    2dea:	8f ef       	ldi	r24, 0xFF	; 255
    2dec:	9f ef       	ldi	r25, 0xFF	; 255
    2dee:	08 95       	ret
    2df0:	8c e2       	ldi	r24, 0x2C	; 44
    2df2:	0e 94 b0 13 	call	0x2760	; 0x2760 <nrk_gpio_clr>
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	08 95       	ret

00002dfc <nrk_gpio_pullups>:
    2dfc:	88 23       	and	r24, r24
    2dfe:	19 f0       	breq	.+6      	; 0x2e06 <nrk_gpio_pullups+0xa>
    2e00:	85 b7       	in	r24, 0x35	; 53
    2e02:	8f 7e       	andi	r24, 0xEF	; 239
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <nrk_gpio_pullups+0xe>
    2e06:	85 b7       	in	r24, 0x35	; 53
    2e08:	80 61       	ori	r24, 0x10	; 16
    2e0a:	85 bf       	out	0x35, r24	; 53
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	08 95       	ret

00002e12 <putc0>:
    2e12:	98 2f       	mov	r25, r24
    2e14:	80 91 c0 00 	lds	r24, 0x00C0
    2e18:	85 ff       	sbrs	r24, 5
    2e1a:	fc cf       	rjmp	.-8      	; 0x2e14 <putc0+0x2>
    2e1c:	80 91 c0 00 	lds	r24, 0x00C0
    2e20:	8f 7d       	andi	r24, 0xDF	; 223
    2e22:	80 93 c0 00 	sts	0x00C0, r24
    2e26:	90 93 c6 00 	sts	0x00C6, r25
    2e2a:	08 95       	ret

00002e2c <putc1>:
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	80 91 c8 00 	lds	r24, 0x00C8
    2e32:	85 ff       	sbrs	r24, 5
    2e34:	fc cf       	rjmp	.-8      	; 0x2e2e <putc1+0x2>
    2e36:	90 93 ce 00 	sts	0x00CE, r25
    2e3a:	08 95       	ret

00002e3c <setup_uart0>:
    2e3c:	29 2f       	mov	r18, r25
    2e3e:	33 27       	eor	r19, r19
    2e40:	20 93 c5 00 	sts	0x00C5, r18
    2e44:	80 93 c4 00 	sts	0x00C4, r24
    2e48:	86 e0       	ldi	r24, 0x06	; 6
    2e4a:	80 93 c2 00 	sts	0x00C2, r24
    2e4e:	e1 ec       	ldi	r30, 0xC1	; 193
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	8b 7f       	andi	r24, 0xFB	; 251
    2e56:	80 83       	st	Z, r24
    2e58:	a0 ec       	ldi	r26, 0xC0	; 192
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	8c 91       	ld	r24, X
    2e5e:	82 60       	ori	r24, 0x02	; 2
    2e60:	8c 93       	st	X, r24
    2e62:	80 81       	ld	r24, Z
    2e64:	88 61       	ori	r24, 0x18	; 24
    2e66:	80 83       	st	Z, r24
    2e68:	08 95       	ret

00002e6a <setup_uart1>:
    2e6a:	29 2f       	mov	r18, r25
    2e6c:	33 27       	eor	r19, r19
    2e6e:	20 93 cd 00 	sts	0x00CD, r18
    2e72:	80 93 cc 00 	sts	0x00CC, r24
    2e76:	86 e0       	ldi	r24, 0x06	; 6
    2e78:	80 93 ca 00 	sts	0x00CA, r24
    2e7c:	e9 ec       	ldi	r30, 0xC9	; 201
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	8b 7f       	andi	r24, 0xFB	; 251
    2e84:	80 83       	st	Z, r24
    2e86:	a8 ec       	ldi	r26, 0xC8	; 200
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	8c 91       	ld	r24, X
    2e8c:	82 60       	ori	r24, 0x02	; 2
    2e8e:	8c 93       	st	X, r24
    2e90:	80 81       	ld	r24, Z
    2e92:	88 61       	ori	r24, 0x18	; 24
    2e94:	80 83       	st	Z, r24
    2e96:	08 95       	ret

00002e98 <getc0>:
    2e98:	80 91 c0 00 	lds	r24, 0x00C0
    2e9c:	87 ff       	sbrs	r24, 7
    2e9e:	fc cf       	rjmp	.-8      	; 0x2e98 <getc0>
    2ea0:	80 91 c0 00 	lds	r24, 0x00C0
    2ea4:	8f 77       	andi	r24, 0x7F	; 127
    2ea6:	80 93 c0 00 	sts	0x00C0, r24
    2eaa:	80 91 c6 00 	lds	r24, 0x00C6
    2eae:	99 27       	eor	r25, r25
    2eb0:	08 95       	ret

00002eb2 <nrk_setup_uart>:
    2eb2:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <setup_uart1>
    2eb6:	6f ec       	ldi	r22, 0xCF	; 207
    2eb8:	72 e1       	ldi	r23, 0x12	; 18
    2eba:	86 e1       	ldi	r24, 0x16	; 22
    2ebc:	97 e1       	ldi	r25, 0x17	; 23
    2ebe:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <fdevopen>
    2ec2:	90 93 a0 07 	sts	0x07A0, r25
    2ec6:	80 93 9f 07 	sts	0x079F, r24
    2eca:	6f ec       	ldi	r22, 0xCF	; 207
    2ecc:	72 e1       	ldi	r23, 0x12	; 18
    2ece:	86 e1       	ldi	r24, 0x16	; 22
    2ed0:	97 e1       	ldi	r25, 0x17	; 23
    2ed2:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <fdevopen>
    2ed6:	90 93 9e 07 	sts	0x079E, r25
    2eda:	80 93 9d 07 	sts	0x079D, r24
    2ede:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_signal_create>
    2ee2:	80 93 79 06 	sts	0x0679, r24
    2ee6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ee8:	19 f4       	brne	.+6      	; 0x2ef0 <nrk_setup_uart+0x3e>
    2eea:	8e e0       	ldi	r24, 0x0E	; 14
    2eec:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    2ef0:	10 92 7a 06 	sts	0x067A, r1
    2ef4:	10 92 68 06 	sts	0x0668, r1
    2ef8:	80 91 c9 00 	lds	r24, 0x00C9
    2efc:	80 68       	ori	r24, 0x80	; 128
    2efe:	80 93 c9 00 	sts	0x00C9, r24
    2f02:	08 95       	ret

00002f04 <nrk_uart_rx_signal_get>:
  // below shows how to change that
  check_period.secs=0;
  check_period.nano_secs=CSMA_CHECK_PERIOD*NANOS_PER_MS;
  val=bmac_set_rx_check_rate(check_period);

  bmac_addr_decode_set_my_mac(1);
    2f04:	80 91 79 06 	lds	r24, 0x0679
    2f08:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0a:	19 f4       	brne	.+6      	; 0x2f12 <nrk_uart_rx_signal_get+0xe>
    2f0c:	8e e0       	ldi	r24, 0x0E	; 14
    2f0e:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    2f12:	80 91 79 06 	lds	r24, 0x0679
  bmac_addr_decode_enable();
  bmac_auto_ack_enable();
    2f16:	99 27       	eor	r25, r25
    2f18:	87 fd       	sbrc	r24, 7
    2f1a:	90 95       	com	r25
    2f1c:	08 95       	ret

00002f1e <nrk_kprintf>:
      else value = 32768 - value;
      //  printf("%d,%d, \n\r",value,rx_buf[0]);
    }

    memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
    printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	ec 01       	movw	r28, r24
    2f24:	07 c0       	rjmp	.+14     	; 0x2f34 <nrk_kprintf+0x16>

    nrk_led_clr (ORANGE_LED);
    // Release the RX buffer so future packets can arrive 
    2f26:	60 91 9f 07 	lds	r22, 0x079F
    2f2a:	70 91 a0 07 	lds	r23, 0x07A0
    2f2e:	99 27       	eor	r25, r25
    2f30:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    2f34:	fe 01       	movw	r30, r28
    }

    memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
    printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);

    nrk_led_clr (ORANGE_LED);
    2f36:	21 96       	adiw	r28, 0x01	; 1
    2f38:	84 91       	lpm	r24, Z
    2f3a:	88 23       	and	r24, r24
    2f3c:	a1 f7       	brne	.-24     	; 0x2f26 <nrk_kprintf+0x8>
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	08 95       	ret

00002f44 <__vector_36>:
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
//uint8_t aes_key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 0x0f};

int main ()
{
  uint16_t div;
    2f44:	1f 92       	push	r1
    2f46:	0f 92       	push	r0
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	0f 92       	push	r0
    2f4c:	11 24       	eor	r1, r1
    2f4e:	2f 93       	push	r18
    2f50:	3f 93       	push	r19
    2f52:	4f 93       	push	r20
    2f54:	5f 93       	push	r21
    2f56:	6f 93       	push	r22
    2f58:	7f 93       	push	r23
    2f5a:	8f 93       	push	r24
    2f5c:	9f 93       	push	r25
    2f5e:	af 93       	push	r26
    2f60:	bf 93       	push	r27
    2f62:	ef 93       	push	r30
    2f64:	ff 93       	push	r31
  nrk_setup_ports ();
  nrk_setup_uart (UART_BAUDRATE_115K2);

  nrk_init ();
    2f66:	80 91 c9 00 	lds	r24, 0x00C9
    2f6a:	8f 77       	andi	r24, 0x7F	; 127
    2f6c:	80 93 c9 00 	sts	0x00C9, r24

    2f70:	80 91 c8 00 	lds	r24, 0x00C8
    2f74:	87 ff       	sbrs	r24, 7
    2f76:	fc cf       	rjmp	.-8      	; 0x2f70 <__vector_36+0x2c>
    2f78:	80 91 c8 00 	lds	r24, 0x00C8
    2f7c:	8f 77       	andi	r24, 0x7F	; 127
    2f7e:	80 93 c8 00 	sts	0x00C8, r24
    2f82:	90 91 ce 00 	lds	r25, 0x00CE
  nrk_led_clr (0);
    2f86:	80 91 68 06 	lds	r24, 0x0668
    2f8a:	e8 2f       	mov	r30, r24
    2f8c:	ff 27       	eor	r31, r31
    2f8e:	e7 59       	subi	r30, 0x97	; 151
    2f90:	f9 4f       	sbci	r31, 0xF9	; 249
    2f92:	90 83       	st	Z, r25
  nrk_led_clr (1);
  nrk_led_clr (2);
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	80 93 68 06 	sts	0x0668, r24
  nrk_led_clr (3);
    2f9a:	80 31       	cpi	r24, 0x10	; 16
    2f9c:	11 f4       	brne	.+4      	; 0x2fa2 <__vector_36+0x5e>
    2f9e:	10 92 68 06 	sts	0x0668, r1

    2fa2:	80 91 79 06 	lds	r24, 0x0679
    2fa6:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <nrk_event_signal>
  nrk_time_set (0, 0);
    2faa:	80 91 c8 00 	lds	r24, 0x00C8
    2fae:	8f 77       	andi	r24, 0x7F	; 127
    2fb0:	80 93 c8 00 	sts	0x00C8, r24

    2fb4:	80 91 c9 00 	lds	r24, 0x00C9
    2fb8:	80 68       	ori	r24, 0x80	; 128
    2fba:	80 93 c9 00 	sts	0x00C9, r24
    2fbe:	ff 91       	pop	r31
    2fc0:	ef 91       	pop	r30
    2fc2:	bf 91       	pop	r27
    2fc4:	af 91       	pop	r26
    2fc6:	9f 91       	pop	r25
    2fc8:	8f 91       	pop	r24
    2fca:	7f 91       	pop	r23
    2fcc:	6f 91       	pop	r22
    2fce:	5f 91       	pop	r21
    2fd0:	4f 91       	pop	r20
    2fd2:	3f 91       	pop	r19
    2fd4:	2f 91       	pop	r18
    2fd6:	0f 90       	pop	r0
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	0f 90       	pop	r0
    2fdc:	1f 90       	pop	r1
    2fde:	18 95       	reti

00002fe0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	d1 f7       	brne	.-12     	; 0x2fe0 <halWait>
    2fec:	08 95       	ret

00002fee <read_eeprom_current_image_checksum>:
    2fee:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    2ff0:	a7 e0       	ldi	r26, 0x07	; 7
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    2ff8:	80 2d       	mov	r24, r0
    2ffa:	80 83       	st	Z, r24
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	08 95       	ret

00003002 <write_eeprom_current_image_checksum>:
    3002:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3004:	80 81       	ld	r24, Z
    3006:	a7 e0       	ldi	r26, 0x07	; 7
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	08 2e       	mov	r0, r24
    300c:	0e 94 6f 32 	call	0x64de	; 0x64de <__eeprom_write_byte_1F2021>
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	08 95       	ret

00003016 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3016:	dc 01       	movw	r26, r24
    3018:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    301c:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    301e:	99 27       	eor	r25, r25
    3020:	08 95       	ret

00003022 <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    3022:	fc 01       	movw	r30, r24
    3024:	a0 e0       	ldi	r26, 0x00	; 0
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    302c:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Chipcon Development Team 
    302e:	43 83       	std	Z+3, r20	; 0x03
    3030:	a1 e0       	ldi	r26, 0x01	; 1
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    3038:	80 2d       	mov	r24, r0
*******************************************************************************/
    303a:	82 83       	std	Z+2, r24	; 0x02
    303c:	a2 e0       	ldi	r26, 0x02	; 2
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    3044:	30 2d       	mov	r19, r0

    3046:	31 83       	std	Z+1, r19	; 0x01
    3048:	a3 e0       	ldi	r26, 0x03	; 3
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    3050:	90 2d       	mov	r25, r0

    3052:	90 83       	st	Z, r25
    3054:	a4 e0       	ldi	r26, 0x04	; 4
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    305c:	20 2d       	mov	r18, r0
#include <include.h>


    305e:	83 0f       	add	r24, r19
//-------------------------------------------------------------------------------------------------------
    3060:	84 0f       	add	r24, r20
//	void halWait(uint16_t timeout)
//
    3062:	89 0f       	add	r24, r25
    3064:	28 17       	cp	r18, r24
    3066:	19 f4       	brne	.+6      	; 0x306e <read_eeprom_mac_address+0x4c>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	08 95       	ret
    306e:	8f ef       	ldi	r24, 0xFF	; 255
    3070:	9f ef       	ldi	r25, 0xFF	; 255
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
    3072:	08 95       	ret

00003074 <read_eeprom_channel>:
//  ARGUMENTS:
//      uint16_t timeout
//          The timeout in microseconds
    3074:	fc 01       	movw	r30, r24
    3076:	a5 e0       	ldi	r26, 0x05	; 5
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    307e:	80 2d       	mov	r24, r0
//-------------------------------------------------------------------------------------------------------
    3080:	80 83       	st	Z, r24
void halWait(uint16_t timeout) {

    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	08 95       	ret

00003088 <read_eeprom_load_img_pages>:
        NOP();
        NOP();
        NOP();
    } while (--timeout);

} // halWait
    3088:	fc 01       	movw	r30, r24
    308a:	a6 e0       	ldi	r26, 0x06	; 6
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    3092:	80 2d       	mov	r24, r0
    3094:	80 83       	st	Z, r24
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	08 95       	ret

0000309c <read_eeprom_aes_key>:
    309c:	ac 01       	movw	r20, r24
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	d9 01       	movw	r26, r18
    30a4:	18 96       	adiw	r26, 0x08	; 8
    30a6:	0e 94 67 32 	call	0x64ce	; 0x64ce <__eeprom_read_byte_1F2021>
    30aa:	80 2d       	mov	r24, r0
    30ac:	fa 01       	movw	r30, r20
    30ae:	e2 0f       	add	r30, r18
    30b0:	f3 1f       	adc	r31, r19
    30b2:	80 83       	st	Z, r24
    30b4:	2f 5f       	subi	r18, 0xFF	; 255
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	20 31       	cpi	r18, 0x10	; 16
    30ba:	31 05       	cpc	r19, r1
    30bc:	91 f7       	brne	.-28     	; 0x30a2 <read_eeprom_aes_key+0x6>
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	08 95       	ret

000030c4 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    30c4:	dc 01       	movw	r26, r24
    30c6:	06 2e       	mov	r0, r22
    30c8:	0e 94 6f 32 	call	0x64de	; 0x64de <__eeprom_write_byte_1F2021>
    30cc:	08 95       	ret

000030ce <write_eeprom_load_img_pages>:
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
    30ce:	fc 01       	movw	r30, r24
    30d0:	80 81       	ld	r24, Z
    30d2:	a6 e0       	ldi	r26, 0x06	; 6
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	08 2e       	mov	r0, r24
    30d8:	0e 94 6f 32 	call	0x64de	; 0x64de <__eeprom_write_byte_1F2021>
        NOP();
        NOP();
        NOP();
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	08 95       	ret

000030e2 <write_eeprom_aes_key>:
    30e2:	ac 01       	movw	r20, r24
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	d9 01       	movw	r26, r18
    30ea:	18 96       	adiw	r26, 0x08	; 8
    30ec:	fa 01       	movw	r30, r20
    30ee:	e2 0f       	add	r30, r18
    30f0:	f3 1f       	adc	r31, r19
    30f2:	80 81       	ld	r24, Z
    30f4:	08 2e       	mov	r0, r24
    30f6:	0e 94 6f 32 	call	0x64de	; 0x64de <__eeprom_write_byte_1F2021>
    30fa:	2f 5f       	subi	r18, 0xFF	; 255
    30fc:	3f 4f       	sbci	r19, 0xFF	; 255
    30fe:	20 31       	cpi	r18, 0x10	; 16
    3100:	31 05       	cpc	r19, r1
    3102:	91 f7       	brne	.-28     	; 0x30e8 <write_eeprom_aes_key+0x6>
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	08 95       	ret

0000310a <nrk_int_disable>:
    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    310a:	f8 94       	cli
    310c:	08 95       	ret

0000310e <nrk_int_enable>:
    } while (--timeout);

} // halWait
    310e:	78 94       	sei
    3110:	08 95       	ret

00003112 <nrk_version>:
    3112:	85 e6       	ldi	r24, 0x65	; 101
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	08 95       	ret

00003118 <_nrk_timer_tick>:
    3118:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <_nrk_scheduler>
    311c:	08 95       	ret

0000311e <nrk_TCB_init>:
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	0f 93       	push	r16
    3124:	1f 93       	push	r17
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	ec 01       	movw	r28, r24
    312c:	8b 01       	movw	r16, r22
    312e:	7a 01       	movw	r14, r20
    3130:	89 85       	ldd	r24, Y+9	; 0x09
    3132:	82 30       	cpi	r24, 0x02	; 2
    3134:	21 f0       	breq	.+8      	; 0x313e <nrk_TCB_init+0x20>
    3136:	80 91 09 07 	lds	r24, 0x0709
    313a:	88 83       	st	Y, r24
    313c:	01 c0       	rjmp	.+2      	; 0x3140 <nrk_TCB_init+0x22>
    313e:	18 82       	st	Y, r1
    3140:	80 91 09 07 	lds	r24, 0x0709
    3144:	84 30       	cpi	r24, 0x04	; 4
    3146:	20 f0       	brcs	.+8      	; 0x3150 <nrk_TCB_init+0x32>
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	87 e0       	ldi	r24, 0x07	; 7
    314c:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	82 30       	cpi	r24, 0x02	; 2
    3154:	29 f0       	breq	.+10     	; 0x3160 <nrk_TCB_init+0x42>
    3156:	80 91 09 07 	lds	r24, 0x0709
    315a:	8f 5f       	subi	r24, 0xFF	; 255
    315c:	80 93 09 07 	sts	0x0709, r24
    3160:	80 91 09 07 	lds	r24, 0x0709
    3164:	88 23       	and	r24, r24
    3166:	19 f4       	brne	.+6      	; 0x316e <nrk_TCB_init+0x50>
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	80 93 09 07 	sts	0x0709, r24
    316e:	88 81       	ld	r24, Y
    3170:	99 27       	eor	r25, r25
    3172:	87 fd       	sbrc	r24, 7
    3174:	90 95       	com	r25
    3176:	fc 01       	movw	r30, r24
    3178:	45 e0       	ldi	r20, 0x05	; 5
    317a:	ee 0f       	add	r30, r30
    317c:	ff 1f       	adc	r31, r31
    317e:	4a 95       	dec	r20
    3180:	e1 f7       	brne	.-8      	; 0x317a <nrk_TCB_init+0x5c>
    3182:	e8 0f       	add	r30, r24
    3184:	f9 1f       	adc	r31, r25
    3186:	e3 58       	subi	r30, 0x83	; 131
    3188:	f9 4f       	sbci	r31, 0xF9	; 249
    318a:	11 83       	std	Z+1, r17	; 0x01
    318c:	00 83       	st	Z, r16
    318e:	88 81       	ld	r24, Y
    3190:	99 27       	eor	r25, r25
    3192:	87 fd       	sbrc	r24, 7
    3194:	90 95       	com	r25
    3196:	fc 01       	movw	r30, r24
    3198:	35 e0       	ldi	r19, 0x05	; 5
    319a:	ee 0f       	add	r30, r30
    319c:	ff 1f       	adc	r31, r31
    319e:	3a 95       	dec	r19
    31a0:	e1 f7       	brne	.-8      	; 0x319a <nrk_TCB_init+0x7c>
    31a2:	e8 0f       	add	r30, r24
    31a4:	f9 1f       	adc	r31, r25
    31a6:	e3 58       	subi	r30, 0x83	; 131
    31a8:	f9 4f       	sbci	r31, 0xF9	; 249
    31aa:	88 85       	ldd	r24, Y+8	; 0x08
    31ac:	82 87       	std	Z+10, r24	; 0x0a
    31ae:	88 81       	ld	r24, Y
    31b0:	99 27       	eor	r25, r25
    31b2:	87 fd       	sbrc	r24, 7
    31b4:	90 95       	com	r25
    31b6:	fc 01       	movw	r30, r24
    31b8:	25 e0       	ldi	r18, 0x05	; 5
    31ba:	ee 0f       	add	r30, r30
    31bc:	ff 1f       	adc	r31, r31
    31be:	2a 95       	dec	r18
    31c0:	e1 f7       	brne	.-8      	; 0x31ba <nrk_TCB_init+0x9c>
    31c2:	e8 0f       	add	r30, r24
    31c4:	f9 1f       	adc	r31, r25
    31c6:	e3 58       	subi	r30, 0x83	; 131
    31c8:	f9 4f       	sbci	r31, 0xF9	; 249
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	81 87       	std	Z+9, r24	; 0x09
    31ce:	28 81       	ld	r18, Y
    31d0:	82 2f       	mov	r24, r18
    31d2:	99 27       	eor	r25, r25
    31d4:	87 fd       	sbrc	r24, 7
    31d6:	90 95       	com	r25
    31d8:	fc 01       	movw	r30, r24
    31da:	05 e0       	ldi	r16, 0x05	; 5
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	0a 95       	dec	r16
    31e2:	e1 f7       	brne	.-8      	; 0x31dc <nrk_TCB_init+0xbe>
    31e4:	e8 0f       	add	r30, r24
    31e6:	f9 1f       	adc	r31, r25
    31e8:	e3 58       	subi	r30, 0x83	; 131
    31ea:	f9 4f       	sbci	r31, 0xF9	; 249
    31ec:	20 87       	std	Z+8, r18	; 0x08
    31ee:	88 81       	ld	r24, Y
    31f0:	99 27       	eor	r25, r25
    31f2:	87 fd       	sbrc	r24, 7
    31f4:	90 95       	com	r25
    31f6:	fc 01       	movw	r30, r24
    31f8:	15 e0       	ldi	r17, 0x05	; 5
    31fa:	ee 0f       	add	r30, r30
    31fc:	ff 1f       	adc	r31, r31
    31fe:	1a 95       	dec	r17
    3200:	e1 f7       	brne	.-8      	; 0x31fa <nrk_TCB_init+0xdc>
    3202:	e8 0f       	add	r30, r24
    3204:	f9 1f       	adc	r31, r25
    3206:	e3 58       	subi	r30, 0x83	; 131
    3208:	f9 4f       	sbci	r31, 0xF9	; 249
    320a:	15 82       	std	Z+5, r1	; 0x05
    320c:	08 81       	ld	r16, Y
    320e:	11 27       	eor	r17, r17
    3210:	07 fd       	sbrc	r16, 7
    3212:	10 95       	com	r17
    3214:	2b 85       	ldd	r18, Y+11	; 0x0b
    3216:	3c 85       	ldd	r19, Y+12	; 0x0c
    3218:	4d 85       	ldd	r20, Y+13	; 0x0d
    321a:	5e 85       	ldd	r21, Y+14	; 0x0e
    321c:	6f 85       	ldd	r22, Y+15	; 0x0f
    321e:	78 89       	ldd	r23, Y+16	; 0x10
    3220:	89 89       	ldd	r24, Y+17	; 0x11
    3222:	9a 89       	ldd	r25, Y+18	; 0x12
    3224:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
    3228:	f8 01       	movw	r30, r16
    322a:	b5 e0       	ldi	r27, 0x05	; 5
    322c:	ee 0f       	add	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	ba 95       	dec	r27
    3232:	e1 f7       	brne	.-8      	; 0x322c <nrk_TCB_init+0x10e>
    3234:	e0 0f       	add	r30, r16
    3236:	f1 1f       	adc	r31, r17
    3238:	e3 58       	subi	r30, 0x83	; 131
    323a:	f9 4f       	sbci	r31, 0xF9	; 249
    323c:	94 8f       	std	Z+28, r25	; 0x1c
    323e:	83 8f       	std	Z+27, r24	; 0x1b
    3240:	08 81       	ld	r16, Y
    3242:	11 27       	eor	r17, r17
    3244:	07 fd       	sbrc	r16, 7
    3246:	10 95       	com	r17
    3248:	2b 8d       	ldd	r18, Y+27	; 0x1b
    324a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    324c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    324e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3250:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3252:	78 a1       	ldd	r23, Y+32	; 0x20
    3254:	89 a1       	ldd	r24, Y+33	; 0x21
    3256:	9a a1       	ldd	r25, Y+34	; 0x22
    3258:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
    325c:	f8 01       	movw	r30, r16
    325e:	a5 e0       	ldi	r26, 0x05	; 5
    3260:	ee 0f       	add	r30, r30
    3262:	ff 1f       	adc	r31, r31
    3264:	aa 95       	dec	r26
    3266:	e1 f7       	brne	.-8      	; 0x3260 <nrk_TCB_init+0x142>
    3268:	e0 0f       	add	r30, r16
    326a:	f1 1f       	adc	r31, r17
    326c:	e3 58       	subi	r30, 0x83	; 131
    326e:	f9 4f       	sbci	r31, 0xF9	; 249
    3270:	96 8b       	std	Z+22, r25	; 0x16
    3272:	85 8b       	std	Z+21, r24	; 0x15
    3274:	88 81       	ld	r24, Y
    3276:	99 27       	eor	r25, r25
    3278:	87 fd       	sbrc	r24, 7
    327a:	90 95       	com	r25
    327c:	fc 01       	movw	r30, r24
    327e:	75 e0       	ldi	r23, 0x05	; 5
    3280:	ee 0f       	add	r30, r30
    3282:	ff 1f       	adc	r31, r31
    3284:	7a 95       	dec	r23
    3286:	e1 f7       	brne	.-8      	; 0x3280 <nrk_TCB_init+0x162>
    3288:	e8 0f       	add	r30, r24
    328a:	f9 1f       	adc	r31, r25
    328c:	e3 58       	subi	r30, 0x83	; 131
    328e:	f9 4f       	sbci	r31, 0xF9	; 249
    3290:	85 89       	ldd	r24, Z+21	; 0x15
    3292:	96 89       	ldd	r25, Z+22	; 0x16
    3294:	23 8d       	ldd	r18, Z+27	; 0x1b
    3296:	34 8d       	ldd	r19, Z+28	; 0x1c
    3298:	82 0f       	add	r24, r18
    329a:	93 1f       	adc	r25, r19
    329c:	90 8f       	std	Z+24, r25	; 0x18
    329e:	87 8b       	std	Z+23, r24	; 0x17
    32a0:	08 81       	ld	r16, Y
    32a2:	11 27       	eor	r17, r17
    32a4:	07 fd       	sbrc	r16, 7
    32a6:	10 95       	com	r17
    32a8:	2b 89       	ldd	r18, Y+19	; 0x13
    32aa:	3c 89       	ldd	r19, Y+20	; 0x14
    32ac:	4d 89       	ldd	r20, Y+21	; 0x15
    32ae:	5e 89       	ldd	r21, Y+22	; 0x16
    32b0:	6f 89       	ldd	r22, Y+23	; 0x17
    32b2:	78 8d       	ldd	r23, Y+24	; 0x18
    32b4:	89 8d       	ldd	r24, Y+25	; 0x19
    32b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32b8:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
    32bc:	f8 01       	movw	r30, r16
    32be:	65 e0       	ldi	r22, 0x05	; 5
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	6a 95       	dec	r22
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <nrk_TCB_init+0x1a2>
    32c8:	e0 0f       	add	r30, r16
    32ca:	f1 1f       	adc	r31, r17
    32cc:	e3 58       	subi	r30, 0x83	; 131
    32ce:	f9 4f       	sbci	r31, 0xF9	; 249
    32d0:	96 8f       	std	Z+30, r25	; 0x1e
    32d2:	85 8f       	std	Z+29, r24	; 0x1d
    32d4:	88 81       	ld	r24, Y
    32d6:	99 27       	eor	r25, r25
    32d8:	87 fd       	sbrc	r24, 7
    32da:	90 95       	com	r25
    32dc:	fc 01       	movw	r30, r24
    32de:	55 e0       	ldi	r21, 0x05	; 5
    32e0:	ee 0f       	add	r30, r30
    32e2:	ff 1f       	adc	r31, r31
    32e4:	5a 95       	dec	r21
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <nrk_TCB_init+0x1c2>
    32e8:	e8 0f       	add	r30, r24
    32ea:	f9 1f       	adc	r31, r25
    32ec:	e3 58       	subi	r30, 0x83	; 131
    32ee:	f9 4f       	sbci	r31, 0xF9	; 249
    32f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    32f2:	96 8d       	ldd	r25, Z+30	; 0x1e
    32f4:	92 8f       	std	Z+26, r25	; 0x1a
    32f6:	81 8f       	std	Z+25, r24	; 0x19
    32f8:	88 81       	ld	r24, Y
    32fa:	99 27       	eor	r25, r25
    32fc:	87 fd       	sbrc	r24, 7
    32fe:	90 95       	com	r25
    3300:	fc 01       	movw	r30, r24
    3302:	45 e0       	ldi	r20, 0x05	; 5
    3304:	ee 0f       	add	r30, r30
    3306:	ff 1f       	adc	r31, r31
    3308:	4a 95       	dec	r20
    330a:	e1 f7       	brne	.-8      	; 0x3304 <nrk_TCB_init+0x1e6>
    330c:	e8 0f       	add	r30, r24
    330e:	f9 1f       	adc	r31, r25
    3310:	e3 58       	subi	r30, 0x83	; 131
    3312:	f9 4f       	sbci	r31, 0xF9	; 249
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	90 a3       	std	Z+32, r25	; 0x20
    331a:	87 8f       	std	Z+31, r24	; 0x1f
    331c:	88 81       	ld	r24, Y
    331e:	99 27       	eor	r25, r25
    3320:	87 fd       	sbrc	r24, 7
    3322:	90 95       	com	r25
    3324:	fc 01       	movw	r30, r24
    3326:	35 e0       	ldi	r19, 0x05	; 5
    3328:	ee 0f       	add	r30, r30
    332a:	ff 1f       	adc	r31, r31
    332c:	3a 95       	dec	r19
    332e:	e1 f7       	brne	.-8      	; 0x3328 <nrk_TCB_init+0x20a>
    3330:	e8 0f       	add	r30, r24
    3332:	f9 1f       	adc	r31, r25
    3334:	e3 58       	subi	r30, 0x83	; 131
    3336:	f9 4f       	sbci	r31, 0xF9	; 249
    3338:	f3 82       	std	Z+3, r15	; 0x03
    333a:	e2 82       	std	Z+2, r14	; 0x02
    333c:	88 81       	ld	r24, Y
    333e:	99 27       	eor	r25, r25
    3340:	87 fd       	sbrc	r24, 7
    3342:	90 95       	com	r25
    3344:	fc 01       	movw	r30, r24
    3346:	25 e0       	ldi	r18, 0x05	; 5
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	2a 95       	dec	r18
    334e:	e1 f7       	brne	.-8      	; 0x3348 <nrk_TCB_init+0x22a>
    3350:	e8 0f       	add	r30, r24
    3352:	f9 1f       	adc	r31, r25
    3354:	e3 58       	subi	r30, 0x83	; 131
    3356:	f9 4f       	sbci	r31, 0xF9	; 249
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	84 87       	std	Z+12, r24	; 0x0c
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	ff 90       	pop	r15
    336a:	ef 90       	pop	r14
    336c:	08 95       	ret

0000336e <nrk_start>:
    336e:	8f 92       	push	r8
    3370:	9f 92       	push	r9
    3372:	af 92       	push	r10
    3374:	bf 92       	push	r11
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	65 e8       	ldi	r22, 0x85	; 133
    3388:	a6 2e       	mov	r10, r22
    338a:	66 e0       	ldi	r22, 0x06	; 6
    338c:	b6 2e       	mov	r11, r22
    338e:	cc 24       	eor	r12, r12
    3390:	dd 24       	eor	r13, r13
    3392:	45 01       	movw	r8, r10
    3394:	ec 2c       	mov	r14, r12
    3396:	f5 01       	movw	r30, r10
    3398:	f0 80       	ld	r15, Z
    339a:	ff ef       	ldi	r31, 0xFF	; 255
    339c:	ff 16       	cp	r15, r31
    339e:	91 f0       	breq	.+36     	; 0x33c4 <nrk_start+0x56>
    33a0:	e4 01       	movw	r28, r8
    33a2:	00 e0       	ldi	r16, 0x00	; 0
    33a4:	10 e0       	ldi	r17, 0x00	; 0
    33a6:	e0 16       	cp	r14, r16
    33a8:	39 f0       	breq	.+14     	; 0x33b8 <nrk_start+0x4a>
    33aa:	88 81       	ld	r24, Y
    33ac:	f8 16       	cp	r15, r24
    33ae:	21 f4       	brne	.+8      	; 0x33b8 <nrk_start+0x4a>
    33b0:	6f 2d       	mov	r22, r15
    33b2:	85 e0       	ldi	r24, 0x05	; 5
    33b4:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    33b8:	0f 5f       	subi	r16, 0xFF	; 255
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    33bc:	a1 96       	adiw	r28, 0x21	; 33
    33be:	04 30       	cpi	r16, 0x04	; 4
    33c0:	11 05       	cpc	r17, r1
    33c2:	89 f7       	brne	.-30     	; 0x33a6 <nrk_start+0x38>
    33c4:	08 94       	sec
    33c6:	c1 1c       	adc	r12, r1
    33c8:	d1 1c       	adc	r13, r1
    33ca:	81 e2       	ldi	r24, 0x21	; 33
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a8 0e       	add	r10, r24
    33d0:	b9 1e       	adc	r11, r25
    33d2:	94 e0       	ldi	r25, 0x04	; 4
    33d4:	c9 16       	cp	r12, r25
    33d6:	d1 04       	cpc	r13, r1
    33d8:	e9 f6       	brne	.-70     	; 0x3394 <nrk_start+0x26>
    33da:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <nrk_get_high_ready_task_ID>
    33de:	28 2f       	mov	r18, r24
    33e0:	33 27       	eor	r19, r19
    33e2:	27 fd       	sbrc	r18, 7
    33e4:	30 95       	com	r19
    33e6:	f9 01       	movw	r30, r18
    33e8:	55 e0       	ldi	r21, 0x05	; 5
    33ea:	ee 0f       	add	r30, r30
    33ec:	ff 1f       	adc	r31, r31
    33ee:	5a 95       	dec	r21
    33f0:	e1 f7       	brne	.-8      	; 0x33ea <nrk_start+0x7c>
    33f2:	e2 0f       	add	r30, r18
    33f4:	f3 1f       	adc	r31, r19
    33f6:	e3 58       	subi	r30, 0x83	; 131
    33f8:	f9 4f       	sbci	r31, 0xF9	; 249
    33fa:	32 85       	ldd	r19, Z+10	; 0x0a
    33fc:	30 93 1c 07 	sts	0x071C, r19
    3400:	21 e2       	ldi	r18, 0x21	; 33
    3402:	82 02       	muls	r24, r18
    3404:	c0 01       	movw	r24, r0
    3406:	11 24       	eor	r1, r1
    3408:	83 58       	subi	r24, 0x83	; 131
    340a:	99 4f       	sbci	r25, 0xF9	; 249
    340c:	90 93 1b 07 	sts	0x071B, r25
    3410:	80 93 1a 07 	sts	0x071A, r24
    3414:	90 93 0c 07 	sts	0x070C, r25
    3418:	80 93 0b 07 	sts	0x070B, r24
    341c:	30 93 0d 07 	sts	0x070D, r19
    3420:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <nrk_target_start>
    3424:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <nrk_stack_pointer_init>
    3428:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <nrk_start_high_ready_task>
    342c:	ff cf       	rjmp	.-2      	; 0x342c <nrk_start+0xbe>

0000342e <nrk_init>:
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	a3 97       	sbiw	r28, 0x23	; 35
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_signal_create>
    344a:	80 93 0a 07 	sts	0x070A, r24
    344e:	8f 3f       	cpi	r24, 0xFF	; 255
    3450:	21 f4       	brne	.+8      	; 0x345a <nrk_init+0x2c>
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	8e e0       	ldi	r24, 0x0E	; 14
    3456:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    345a:	0e 94 c5 2c 	call	0x598a	; 0x598a <_nrk_startup_ok>
    345e:	88 23       	and	r24, r24
    3460:	21 f4       	brne	.+8      	; 0x346a <nrk_init+0x3c>
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	86 e0       	ldi	r24, 0x06	; 6
    3466:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    346a:	10 92 0d 07 	sts	0x070D, r1
    346e:	10 92 1b 07 	sts	0x071B, r1
    3472:	10 92 1a 07 	sts	0x071A, r1
    3476:	10 92 0c 07 	sts	0x070C, r1
    347a:	10 92 0b 07 	sts	0x070B, r1
    347e:	10 92 1c 07 	sts	0x071C, r1
    3482:	0e 94 06 28 	call	0x500c	; 0x500c <_nrk_reserve_init>
    3486:	10 92 19 07 	sts	0x0719, r1
    348a:	8f ef       	ldi	r24, 0xFF	; 255
    348c:	80 93 03 07 	sts	0x0703, r24
    3490:	80 93 05 07 	sts	0x0705, r24
    3494:	80 93 04 07 	sts	0x0704, r24
    3498:	80 93 06 07 	sts	0x0706, r24
    349c:	80 93 08 07 	sts	0x0708, r24
    34a0:	80 93 07 07 	sts	0x0707, r24
    34a4:	ed e7       	ldi	r30, 0x7D	; 125
    34a6:	f6 e0       	ldi	r31, 0x06	; 6
    34a8:	83 e6       	ldi	r24, 0x63	; 99
    34aa:	82 87       	std	Z+10, r24	; 0x0a
    34ac:	8f ef       	ldi	r24, 0xFF	; 255
    34ae:	80 87       	std	Z+8, r24	; 0x08
    34b0:	b1 96       	adiw	r30, 0x21	; 33
    34b2:	27 e0       	ldi	r18, 0x07	; 7
    34b4:	e1 30       	cpi	r30, 0x01	; 1
    34b6:	f2 07       	cpc	r31, r18
    34b8:	b9 f7       	brne	.-18     	; 0x34a8 <nrk_init+0x7a>
    34ba:	ed e1       	ldi	r30, 0x1D	; 29
    34bc:	f7 e0       	ldi	r31, 0x07	; 7
    34be:	cf 01       	movw	r24, r30
    34c0:	05 96       	adiw	r24, 0x05	; 5
    34c2:	94 83       	std	Z+4, r25	; 0x04
    34c4:	83 83       	std	Z+3, r24	; 0x03
    34c6:	f7 83       	std	Z+7, r31	; 0x07
    34c8:	e6 83       	std	Z+6, r30	; 0x06
    34ca:	fc 01       	movw	r30, r24
    34cc:	27 e0       	ldi	r18, 0x07	; 7
    34ce:	81 33       	cpi	r24, 0x31	; 49
    34d0:	92 07       	cpc	r25, r18
    34d2:	a9 f7       	brne	.-22     	; 0x34be <nrk_init+0x90>
    34d4:	10 92 1f 07 	sts	0x071F, r1
    34d8:	10 92 1e 07 	sts	0x071E, r1
    34dc:	10 92 35 07 	sts	0x0735, r1
    34e0:	10 92 34 07 	sts	0x0734, r1
    34e4:	10 92 10 07 	sts	0x0710, r1
    34e8:	10 92 0f 07 	sts	0x070F, r1
    34ec:	44 97       	sbiw	r24, 0x14	; 20
    34ee:	90 93 7c 06 	sts	0x067C, r25
    34f2:	80 93 7b 06 	sts	0x067B, r24
    34f6:	6a ee       	ldi	r22, 0xEA	; 234
    34f8:	75 e2       	ldi	r23, 0x25	; 37
    34fa:	8e 01       	movw	r16, r28
    34fc:	0f 5f       	subi	r16, 0xFF	; 255
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	c8 01       	movw	r24, r16
    3502:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <nrk_task_set_entry_function>
    3506:	40 e8       	ldi	r20, 0x80	; 128
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	6d eb       	ldi	r22, 0xBD	; 189
    350c:	75 e0       	ldi	r23, 0x05	; 5
    350e:	c8 01       	movw	r24, r16
    3510:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <nrk_task_set_stk>
    3514:	85 e5       	ldi	r24, 0x55	; 85
    3516:	80 93 bd 05 	sts	0x05BD, r24
    351a:	19 86       	std	Y+9, r1	; 0x09
    351c:	1c 8e       	std	Y+28, r1	; 0x1c
    351e:	1d 8e       	std	Y+29, r1	; 0x1d
    3520:	1e 8e       	std	Y+30, r1	; 0x1e
    3522:	1f 8e       	std	Y+31, r1	; 0x1f
    3524:	18 a2       	std	Y+32, r1	; 0x20
    3526:	19 a2       	std	Y+33, r1	; 0x21
    3528:	1a a2       	std	Y+34, r1	; 0x22
    352a:	1b a2       	std	Y+35, r1	; 0x23
    352c:	91 e0       	ldi	r25, 0x01	; 1
    352e:	98 87       	std	Y+8, r25	; 0x08
    3530:	82 e0       	ldi	r24, 0x02	; 2
    3532:	8a 87       	std	Y+10, r24	; 0x0a
    3534:	9b 87       	std	Y+11, r25	; 0x0b
    3536:	c8 01       	movw	r24, r16
    3538:	0e 94 b4 22 	call	0x4568	; 0x4568 <nrk_activate_task>
    353c:	a3 96       	adiw	r28, 0x23	; 35
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	1f 91       	pop	r17
    354e:	0f 91       	pop	r16
    3550:	08 95       	ret

00003552 <nrk_halt>:
    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    3552:	f8 94       	cli
    3554:	ff cf       	rjmp	.-2      	; 0x3554 <nrk_halt+0x2>

00003556 <_nrk_errno_set>:
//
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
//      uint16_t timeout
    3556:	e0 91 1a 07 	lds	r30, 0x071A
    355a:	f0 91 1b 07 	lds	r31, 0x071B
    355e:	84 87       	std	Z+12, r24	; 0x0c
    3560:	08 95       	ret

00003562 <nrk_errno_get>:
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    3562:	e0 91 1a 07 	lds	r30, 0x071A
    3566:	f0 91 1b 07 	lds	r31, 0x071B
    356a:	84 85       	ldd	r24, Z+12	; 0x0c
    // This sequence uses exactly 8 clock cycle for each round
    do {
    356c:	99 27       	eor	r25, r25
    356e:	08 95       	ret

00003570 <nrk_error_get>:
    3570:	dc 01       	movw	r26, r24
    3572:	fb 01       	movw	r30, r22
    3574:	80 91 bc 05 	lds	r24, 0x05BC
    3578:	88 23       	and	r24, r24
    357a:	19 f4       	brne	.+6      	; 0x3582 <nrk_error_get+0x12>
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	08 95       	ret
    3582:	80 83       	st	Z, r24
    3584:	80 91 4b 03 	lds	r24, 0x034B
    3588:	8c 93       	st	X, r24
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	08 95       	ret

00003590 <nrk_error_print>:
    3590:	2f 92       	push	r2
    3592:	3f 92       	push	r3
    3594:	4f 92       	push	r4
    3596:	5f 92       	push	r5
    3598:	6f 92       	push	r6
    359a:	7f 92       	push	r7
    359c:	8f 92       	push	r8
    359e:	9f 92       	push	r9
    35a0:	af 92       	push	r10
    35a2:	bf 92       	push	r11
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	1f 93       	push	r17
    35ae:	cf 93       	push	r28
    35b0:	df 93       	push	r29
    35b2:	80 91 bc 05 	lds	r24, 0x05BC
    35b6:	88 23       	and	r24, r24
    35b8:	09 f4       	brne	.+2      	; 0x35bc <nrk_error_print+0x2c>
    35ba:	b4 c0       	rjmp	.+360    	; 0x3724 <nrk_error_print+0x194>
    35bc:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    35c0:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    35c4:	60 ef       	ldi	r22, 0xF0	; 240
    35c6:	26 2e       	mov	r2, r22
    35c8:	62 e0       	ldi	r22, 0x02	; 2
    35ca:	36 2e       	mov	r3, r22
    35cc:	53 e0       	ldi	r21, 0x03	; 3
    35ce:	45 2e       	mov	r4, r21
    35d0:	53 e0       	ldi	r21, 0x03	; 3
    35d2:	55 2e       	mov	r5, r21
    35d4:	46 e1       	ldi	r20, 0x16	; 22
    35d6:	64 2e       	mov	r6, r20
    35d8:	43 e0       	ldi	r20, 0x03	; 3
    35da:	74 2e       	mov	r7, r20
    35dc:	3e e2       	ldi	r19, 0x2E	; 46
    35de:	83 2e       	mov	r8, r19
    35e0:	33 e0       	ldi	r19, 0x03	; 3
    35e2:	93 2e       	mov	r9, r19
    35e4:	24 e4       	ldi	r18, 0x44	; 68
    35e6:	a2 2e       	mov	r10, r18
    35e8:	23 e0       	ldi	r18, 0x03	; 3
    35ea:	b2 2e       	mov	r11, r18
    35ec:	9f e5       	ldi	r25, 0x5F	; 95
    35ee:	c9 2e       	mov	r12, r25
    35f0:	93 e0       	ldi	r25, 0x03	; 3
    35f2:	d9 2e       	mov	r13, r25
    35f4:	85 e7       	ldi	r24, 0x75	; 117
    35f6:	e8 2e       	mov	r14, r24
    35f8:	83 e0       	ldi	r24, 0x03	; 3
    35fa:	f8 2e       	mov	r15, r24
    35fc:	c9 e8       	ldi	r28, 0x89	; 137
    35fe:	d3 e0       	ldi	r29, 0x03	; 3
    3600:	84 eb       	ldi	r24, 0xB4	; 180
    3602:	93 e0       	ldi	r25, 0x03	; 3
    3604:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
    3608:	80 91 4b 03 	lds	r24, 0x034B
    360c:	99 27       	eor	r25, r25
    360e:	9f 93       	push	r25
    3610:	8f 93       	push	r24
    3612:	8e e5       	ldi	r24, 0x5E	; 94
    3614:	92 e0       	ldi	r25, 0x02	; 2
    3616:	9f 93       	push	r25
    3618:	8f 93       	push	r24
    361a:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    361e:	80 eb       	ldi	r24, 0xB0	; 176
    3620:	93 e0       	ldi	r25, 0x03	; 3
    3622:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	80 91 bc 05 	lds	r24, 0x05BC
    3632:	84 31       	cpi	r24, 0x14	; 20
    3634:	10 f0       	brcs	.+4      	; 0x363a <nrk_error_print+0xaa>
    3636:	10 92 bc 05 	sts	0x05BC, r1
    363a:	80 91 bc 05 	lds	r24, 0x05BC
    363e:	99 27       	eor	r25, r25
    3640:	aa 27       	eor	r26, r26
    3642:	bb 27       	eor	r27, r27
    3644:	fc 01       	movw	r30, r24
    3646:	31 97       	sbiw	r30, 0x01	; 1
    3648:	e2 31       	cpi	r30, 0x12	; 18
    364a:	f1 05       	cpc	r31, r1
    364c:	b0 f5       	brcc	.+108    	; 0x36ba <nrk_error_print+0x12a>
    364e:	ea 59       	subi	r30, 0x9A	; 154
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	ee 0f       	add	r30, r30
    3654:	ff 1f       	adc	r31, r31
    3656:	05 90       	lpm	r0, Z+
    3658:	f4 91       	lpm	r31, Z
    365a:	e0 2d       	mov	r30, r0
    365c:	09 94       	ijmp
    365e:	ce 01       	movw	r24, r28
    3660:	2e c0       	rjmp	.+92     	; 0x36be <nrk_error_print+0x12e>
    3662:	c7 01       	movw	r24, r14
    3664:	2c c0       	rjmp	.+88     	; 0x36be <nrk_error_print+0x12e>
    3666:	c6 01       	movw	r24, r12
    3668:	2a c0       	rjmp	.+84     	; 0x36be <nrk_error_print+0x12e>
    366a:	c5 01       	movw	r24, r10
    366c:	28 c0       	rjmp	.+80     	; 0x36be <nrk_error_print+0x12e>
    366e:	c4 01       	movw	r24, r8
    3670:	26 c0       	rjmp	.+76     	; 0x36be <nrk_error_print+0x12e>
    3672:	c3 01       	movw	r24, r6
    3674:	24 c0       	rjmp	.+72     	; 0x36be <nrk_error_print+0x12e>
    3676:	c2 01       	movw	r24, r4
    3678:	22 c0       	rjmp	.+68     	; 0x36be <nrk_error_print+0x12e>
    367a:	c1 01       	movw	r24, r2
    367c:	20 c0       	rjmp	.+64     	; 0x36be <nrk_error_print+0x12e>
    367e:	82 ed       	ldi	r24, 0xD2	; 210
    3680:	92 e0       	ldi	r25, 0x02	; 2
    3682:	1d c0       	rjmp	.+58     	; 0x36be <nrk_error_print+0x12e>
    3684:	8d ea       	ldi	r24, 0xAD	; 173
    3686:	92 e0       	ldi	r25, 0x02	; 2
    3688:	1a c0       	rjmp	.+52     	; 0x36be <nrk_error_print+0x12e>
    368a:	81 ea       	ldi	r24, 0xA1	; 161
    368c:	92 e0       	ldi	r25, 0x02	; 2
    368e:	17 c0       	rjmp	.+46     	; 0x36be <nrk_error_print+0x12e>
    3690:	86 e8       	ldi	r24, 0x86	; 134
    3692:	92 e0       	ldi	r25, 0x02	; 2
    3694:	14 c0       	rjmp	.+40     	; 0x36be <nrk_error_print+0x12e>
    3696:	87 e7       	ldi	r24, 0x77	; 119
    3698:	92 e0       	ldi	r25, 0x02	; 2
    369a:	11 c0       	rjmp	.+34     	; 0x36be <nrk_error_print+0x12e>
    369c:	86 e6       	ldi	r24, 0x66	; 102
    369e:	92 e0       	ldi	r25, 0x02	; 2
    36a0:	0e c0       	rjmp	.+28     	; 0x36be <nrk_error_print+0x12e>
    36a2:	82 e5       	ldi	r24, 0x52	; 82
    36a4:	92 e0       	ldi	r25, 0x02	; 2
    36a6:	0b c0       	rjmp	.+22     	; 0x36be <nrk_error_print+0x12e>
    36a8:	82 e3       	ldi	r24, 0x32	; 50
    36aa:	92 e0       	ldi	r25, 0x02	; 2
    36ac:	08 c0       	rjmp	.+16     	; 0x36be <nrk_error_print+0x12e>
    36ae:	8a e1       	ldi	r24, 0x1A	; 26
    36b0:	92 e0       	ldi	r25, 0x02	; 2
    36b2:	05 c0       	rjmp	.+10     	; 0x36be <nrk_error_print+0x12e>
    36b4:	8f ef       	ldi	r24, 0xFF	; 255
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <nrk_error_print+0x12e>
    36ba:	88 ef       	ldi	r24, 0xF8	; 248
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
    36c2:	60 91 9f 07 	lds	r22, 0x079F
    36c6:	70 91 a0 07 	lds	r23, 0x07A0
    36ca:	8d e0       	ldi	r24, 0x0D	; 13
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    36d2:	60 91 9f 07 	lds	r22, 0x079F
    36d6:	70 91 a0 07 	lds	r23, 0x07A0
    36da:	8a e0       	ldi	r24, 0x0A	; 10
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <nrk_led_set>
    36ea:	83 e0       	ldi	r24, 0x03	; 3
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
    36f2:	10 e0       	ldi	r17, 0x00	; 0
    36f4:	88 ee       	ldi	r24, 0xE8	; 232
    36f6:	93 e0       	ldi	r25, 0x03	; 3
    36f8:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    36fc:	1f 5f       	subi	r17, 0xFF	; 255
    36fe:	14 36       	cpi	r17, 0x64	; 100
    3700:	c9 f7       	brne	.-14     	; 0x36f4 <nrk_error_print+0x164>
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <nrk_led_set>
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <nrk_led_clr>
    3712:	10 e0       	ldi	r17, 0x00	; 0
    3714:	88 ee       	ldi	r24, 0xE8	; 232
    3716:	93 e0       	ldi	r25, 0x03	; 3
    3718:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    371c:	1f 5f       	subi	r17, 0xFF	; 255
    371e:	14 36       	cpi	r17, 0x64	; 100
    3720:	c9 f7       	brne	.-14     	; 0x3714 <nrk_error_print+0x184>
    3722:	6e cf       	rjmp	.-292    	; 0x3600 <nrk_error_print+0x70>
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	df 91       	pop	r29
    372a:	cf 91       	pop	r28
    372c:	1f 91       	pop	r17
    372e:	ff 90       	pop	r15
    3730:	ef 90       	pop	r14
    3732:	df 90       	pop	r13
    3734:	cf 90       	pop	r12
    3736:	bf 90       	pop	r11
    3738:	af 90       	pop	r10
    373a:	9f 90       	pop	r9
    373c:	8f 90       	pop	r8
    373e:	7f 90       	pop	r7
    3740:	6f 90       	pop	r6
    3742:	5f 90       	pop	r5
    3744:	4f 90       	pop	r4
    3746:	3f 90       	pop	r3
    3748:	2f 90       	pop	r2
    374a:	08 95       	ret

0000374c <nrk_kernel_error_add>:
    374c:	80 93 bc 05 	sts	0x05BC, r24
    3750:	60 93 4b 03 	sts	0x034B, r22
    3754:	0e 94 c8 1a 	call	0x3590	; 0x3590 <nrk_error_print>
    3758:	08 95       	ret

0000375a <nrk_error_add>:
    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    375a:	80 93 bc 05 	sts	0x05BC, r24
    } while (--timeout);
    375e:	e0 91 1a 07 	lds	r30, 0x071A
    3762:	f0 91 1b 07 	lds	r31, 0x071B
    3766:	80 85       	ldd	r24, Z+8	; 0x08
    3768:	80 93 4b 03 	sts	0x034B, r24

} // halWait
    376c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <nrk_error_print>
    3770:	08 95       	ret

00003772 <nrk_stack_check_pid>:
    3772:	99 27       	eor	r25, r25
    3774:	87 fd       	sbrc	r24, 7
    3776:	90 95       	com	r25
    3778:	fc 01       	movw	r30, r24
    377a:	25 e0       	ldi	r18, 0x05	; 5
    377c:	ee 0f       	add	r30, r30
    377e:	ff 1f       	adc	r31, r31
    3780:	2a 95       	dec	r18
    3782:	e1 f7       	brne	.-8      	; 0x377c <nrk_stack_check_pid+0xa>
    3784:	e8 0f       	add	r30, r24
    3786:	f9 1f       	adc	r31, r25
    3788:	e3 58       	subi	r30, 0x83	; 131
    378a:	f9 4f       	sbci	r31, 0xF9	; 249
    378c:	a2 81       	ldd	r26, Z+2	; 0x02
    378e:	b3 81       	ldd	r27, Z+3	; 0x03
    3790:	8c 91       	ld	r24, X
    3792:	85 35       	cpi	r24, 0x55	; 85
    3794:	29 f0       	breq	.+10     	; 0x37a0 <nrk_stack_check_pid+0x2e>
    3796:	85 e5       	ldi	r24, 0x55	; 85
    3798:	8c 93       	st	X, r24
    379a:	8f ef       	ldi	r24, 0xFF	; 255
    379c:	9f ef       	ldi	r25, 0xFF	; 255
    379e:	08 95       	ret
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	80 50       	subi	r24, 0x00	; 0
    37a6:	92 42       	sbci	r25, 0x22	; 34
    37a8:	18 f4       	brcc	.+6      	; 0x37b0 <nrk_stack_check_pid+0x3e>
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	08 95       	ret
    37b0:	82 e1       	ldi	r24, 0x12	; 18
    37b2:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    37b6:	8f ef       	ldi	r24, 0xFF	; 255
    37b8:	9f ef       	ldi	r25, 0xFF	; 255
    37ba:	08 95       	ret

000037bc <dump_stack_info>:


//-------------------------------------------------------------------------------------------------------
//	void halWait(uint16_t timeout)
//
//	DESCRIPTION:
    37bc:	6f 92       	push	r6
    37be:	7f 92       	push	r7
    37c0:	8f 92       	push	r8
    37c2:	9f 92       	push	r9
    37c4:	af 92       	push	r10
    37c6:	bf 92       	push	r11
    37c8:	cf 92       	push	r12
    37ca:	df 92       	push	r13
    37cc:	ef 92       	push	r14
    37ce:	ff 92       	push	r15
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
//      uint16_t timeout
//          The timeout in microseconds
    37d8:	80 ec       	ldi	r24, 0xC0	; 192
    37da:	93 e0       	ldi	r25, 0x03	; 3
    37dc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_kprintf>
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {
    37e0:	e0 91 1a 07 	lds	r30, 0x071A
    37e4:	f0 91 1b 07 	lds	r31, 0x071B
    37e8:	80 85       	ldd	r24, Z+8	; 0x08
    37ea:	99 27       	eor	r25, r25
    37ec:	87 fd       	sbrc	r24, 7
    37ee:	90 95       	com	r25
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	81 e6       	ldi	r24, 0x61	; 97
    37f6:	92 e0       	ldi	r25, 0x02	; 2
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>

    3800:	e0 91 1a 07 	lds	r30, 0x071A
    3804:	f0 91 1b 07 	lds	r31, 0x071B
    3808:	02 81       	ldd	r16, Z+2	; 0x02
    380a:	13 81       	ldd	r17, Z+3	; 0x03
    // This sequence uses exactly 8 clock cycle for each round
    do {
    380c:	1f 93       	push	r17
    380e:	0f 93       	push	r16
    3810:	8a e6       	ldi	r24, 0x6A	; 106
    3812:	92 e0       	ldi	r25, 0x02	; 2
    3814:	9f 93       	push	r25
    3816:	8f 93       	push	r24
    3818:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
        NOP();
    381c:	f8 01       	movw	r30, r16
    381e:	80 81       	ld	r24, Z
    3820:	99 27       	eor	r25, r25
    3822:	9f 93       	push	r25
    3824:	8f 93       	push	r24
    3826:	57 e7       	ldi	r21, 0x77	; 119
    3828:	c5 2e       	mov	r12, r21
    382a:	52 e0       	ldi	r21, 0x02	; 2
    382c:	d5 2e       	mov	r13, r21
    382e:	df 92       	push	r13
    3830:	cf 92       	push	r12
    3832:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
        NOP();
        NOP();
        NOP();
    3836:	e0 91 1a 07 	lds	r30, 0x071A
    383a:	f0 91 1b 07 	lds	r31, 0x071B
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	9f 93       	push	r25
    3844:	8f 93       	push	r24
    3846:	44 e8       	ldi	r20, 0x84	; 132
    3848:	e4 2e       	mov	r14, r20
    384a:	42 e0       	ldi	r20, 0x02	; 2
    384c:	f4 2e       	mov	r15, r20
    384e:	ff 92       	push	r15
    3850:	ef 92       	push	r14
    3852:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    } while (--timeout);
    3856:	80 91 1a 07 	lds	r24, 0x071A
    385a:	90 91 1b 07 	lds	r25, 0x071B
    385e:	9f 93       	push	r25
    3860:	8f 93       	push	r24
    3862:	0e e8       	ldi	r16, 0x8E	; 142
    3864:	12 e0       	ldi	r17, 0x02	; 2
    3866:	1f 93       	push	r17
    3868:	0f 93       	push	r16
    386a:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    386e:	cd e7       	ldi	r28, 0x7D	; 125
    3870:	d6 e0       	ldi	r29, 0x06	; 6
    3872:	aa 24       	eor	r10, r10
    3874:	bb 24       	eor	r11, r11
    3876:	8d b7       	in	r24, 0x3d	; 61
    3878:	9e b7       	in	r25, 0x3e	; 62
    387a:	44 96       	adiw	r24, 0x14	; 20
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	9e bf       	out	0x3e, r25	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	8d bf       	out	0x3d, r24	; 61

} // halWait
    3886:	3e e9       	ldi	r19, 0x9E	; 158
    3888:	63 2e       	mov	r6, r19
    388a:	32 e0       	ldi	r19, 0x02	; 2
    388c:	73 2e       	mov	r7, r19
    388e:	46 01       	movw	r8, r12
    3890:	67 01       	movw	r12, r14
    3892:	78 01       	movw	r14, r16
        NOP();
    } while (--timeout);

} // halWait
    3894:	0a 81       	ldd	r16, Y+2	; 0x02
    3896:	1b 81       	ldd	r17, Y+3	; 0x03
    3898:	1f 93       	push	r17
    389a:	0f 93       	push	r16
    389c:	bf 92       	push	r11
    389e:	af 92       	push	r10
    38a0:	7f 92       	push	r7
    38a2:	6f 92       	push	r6
    38a4:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    38a8:	f8 01       	movw	r30, r16
    38aa:	80 81       	ld	r24, Z
    38ac:	99 27       	eor	r25, r25
    38ae:	9f 93       	push	r25
    38b0:	8f 93       	push	r24
    38b2:	9f 92       	push	r9
    38b4:	8f 92       	push	r8
    38b6:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    38ba:	88 81       	ld	r24, Y
    38bc:	99 81       	ldd	r25, Y+1	; 0x01
    38be:	9f 93       	push	r25
    38c0:	8f 93       	push	r24
    38c2:	df 92       	push	r13
    38c4:	cf 92       	push	r12
    38c6:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	ff 92       	push	r15
    38d0:	ef 92       	push	r14
    38d2:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <printf>
    38d6:	08 94       	sec
    38d8:	a1 1c       	adc	r10, r1
    38da:	b1 1c       	adc	r11, r1
    38dc:	a1 96       	adiw	r28, 0x21	; 33
        NOP();
        NOP();
        NOP();
    } while (--timeout);

} // halWait
    38de:	8d b7       	in	r24, 0x3d	; 61
    38e0:	9e b7       	in	r25, 0x3e	; 62
    38e2:	42 96       	adiw	r24, 0x12	; 18
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	9e bf       	out	0x3e, r25	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	8d bf       	out	0x3d, r24	; 61
    38ee:	94 e0       	ldi	r25, 0x04	; 4
    38f0:	a9 16       	cp	r10, r25
    38f2:	b1 04       	cpc	r11, r1
    38f4:	79 f6       	brne	.-98     	; 0x3894 <dump_stack_info+0xd8>
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	ff 90       	pop	r15
    3900:	ef 90       	pop	r14
    3902:	df 90       	pop	r13
    3904:	cf 90       	pop	r12
    3906:	bf 90       	pop	r11
    3908:	af 90       	pop	r10
    390a:	9f 90       	pop	r9
    390c:	8f 90       	pop	r8
    390e:	7f 90       	pop	r7
    3910:	6f 90       	pop	r6
    3912:	08 95       	ret

00003914 <nrk_stack_check>:
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	e0 91 1a 07 	lds	r30, 0x071A
    391c:	f0 91 1b 07 	lds	r31, 0x071B
    3920:	c2 81       	ldd	r28, Z+2	; 0x02
    3922:	d3 81       	ldd	r29, Z+3	; 0x03
    3924:	88 81       	ld	r24, Y
    3926:	85 35       	cpi	r24, 0x55	; 85
    3928:	39 f0       	breq	.+14     	; 0x3938 <nrk_stack_check+0x24>
    392a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <dump_stack_info>
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    3934:	85 e5       	ldi	r24, 0x55	; 85
    3936:	88 83       	st	Y, r24
    3938:	e0 91 1a 07 	lds	r30, 0x071A
    393c:	f0 91 1b 07 	lds	r31, 0x071B
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	80 50       	subi	r24, 0x00	; 0
    3946:	92 42       	sbci	r25, 0x22	; 34
    3948:	28 f0       	brcs	.+10     	; 0x3954 <nrk_stack_check+0x40>
    394a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <dump_stack_info>
    394e:	82 e1       	ldi	r24, 0x12	; 18
    3950:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	08 95       	ret

0000395a <nrk_signal_create>:
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
    395a:	40 91 f8 03 	lds	r20, 0x03F8
    395e:	50 91 f9 03 	lds	r21, 0x03F9
    3962:	60 91 fa 03 	lds	r22, 0x03FA
    3966:	70 91 fb 03 	lds	r23, 0x03FB
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	db 01       	movw	r26, r22
    3970:	ca 01       	movw	r24, r20
    3972:	02 2e       	mov	r0, r18
    3974:	04 c0       	rjmp	.+8      	; 0x397e <nrk_signal_create+0x24>
    3976:	b6 95       	lsr	r27
    3978:	a7 95       	ror	r26
    397a:	97 95       	ror	r25
    397c:	87 95       	ror	r24
    397e:	0a 94       	dec	r0
    3980:	d2 f7       	brpl	.-12     	; 0x3976 <nrk_signal_create+0x1c>
    3982:	81 70       	andi	r24, 0x01	; 1
    3984:	90 70       	andi	r25, 0x00	; 0
    3986:	89 2b       	or	r24, r25
    3988:	e9 f4       	brne	.+58     	; 0x39c4 <nrk_signal_create+0x6a>
        NOP();
        NOP();
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e0       	ldi	r26, 0x00	; 0
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	02 2e       	mov	r0, r18
    3994:	04 c0       	rjmp	.+8      	; 0x399e <nrk_signal_create+0x44>
    3996:	88 0f       	add	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	aa 1f       	adc	r26, r26
    399c:	bb 1f       	adc	r27, r27
    399e:	0a 94       	dec	r0
    39a0:	d2 f7       	brpl	.-12     	; 0x3996 <nrk_signal_create+0x3c>
    39a2:	84 2b       	or	r24, r20
    39a4:	95 2b       	or	r25, r21
    39a6:	a6 2b       	or	r26, r22
    39a8:	b7 2b       	or	r27, r23
    39aa:	80 93 f8 03 	sts	0x03F8, r24
    39ae:	90 93 f9 03 	sts	0x03F9, r25
    39b2:	a0 93 fa 03 	sts	0x03FA, r26
    39b6:	b0 93 fb 03 	sts	0x03FB, r27
    } while (--timeout);
    39ba:	82 2f       	mov	r24, r18
    39bc:	99 27       	eor	r25, r25
    39be:	87 fd       	sbrc	r24, 7
    39c0:	90 95       	com	r25
    39c2:	08 95       	ret
    39c4:	2f 5f       	subi	r18, 0xFF	; 255
    39c6:	3f 4f       	sbci	r19, 0xFF	; 255
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
    39c8:	20 32       	cpi	r18, 0x20	; 32
    39ca:	31 05       	cpc	r19, r1
    39cc:	81 f6       	brne	.-96     	; 0x396e <nrk_signal_create+0x14>
    39ce:	8f ef       	ldi	r24, 0xFF	; 255
    39d0:	9f ef       	ldi	r25, 0xFF	; 255

} // halWait
    39d2:	08 95       	ret

000039d4 <nrk_signal_get_registered_mask>:
    39d4:	e0 91 1a 07 	lds	r30, 0x071A
    39d8:	f0 91 1b 07 	lds	r31, 0x071B
    39dc:	65 85       	ldd	r22, Z+13	; 0x0d
    39de:	76 85       	ldd	r23, Z+14	; 0x0e
    39e0:	87 85       	ldd	r24, Z+15	; 0x0f
    39e2:	90 89       	ldd	r25, Z+16	; 0x10
    39e4:	08 95       	ret

000039e6 <nrk_signal_unregister>:
    39e6:	ef 92       	push	r14
    39e8:	ff 92       	push	r15
    39ea:	0f 93       	push	r16
    39ec:	1f 93       	push	r17
    39ee:	21 e0       	ldi	r18, 0x01	; 1
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e0       	ldi	r20, 0x00	; 0
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	04 c0       	rjmp	.+8      	; 0x3a00 <nrk_signal_unregister+0x1a>
    39f8:	22 0f       	add	r18, r18
    39fa:	33 1f       	adc	r19, r19
    39fc:	44 1f       	adc	r20, r20
    39fe:	55 1f       	adc	r21, r21
    3a00:	8a 95       	dec	r24
    3a02:	d2 f7       	brpl	.-12     	; 0x39f8 <nrk_signal_unregister+0x12>
    3a04:	e0 91 1a 07 	lds	r30, 0x071A
    3a08:	f0 91 1b 07 	lds	r31, 0x071B
    3a0c:	e5 84       	ldd	r14, Z+13	; 0x0d
    3a0e:	f6 84       	ldd	r15, Z+14	; 0x0e
    3a10:	07 85       	ldd	r16, Z+15	; 0x0f
    3a12:	10 89       	ldd	r17, Z+16	; 0x10
    3a14:	da 01       	movw	r26, r20
    3a16:	c9 01       	movw	r24, r18
    3a18:	8e 21       	and	r24, r14
    3a1a:	9f 21       	and	r25, r15
    3a1c:	a0 23       	and	r26, r16
    3a1e:	b1 23       	and	r27, r17
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	a1 05       	cpc	r26, r1
    3a24:	b1 05       	cpc	r27, r1
    3a26:	19 f4       	brne	.+6      	; 0x3a2e <nrk_signal_unregister+0x48>
    3a28:	8f ef       	ldi	r24, 0xFF	; 255
    3a2a:	9f ef       	ldi	r25, 0xFF	; 255
    3a2c:	1a c0       	rjmp	.+52     	; 0x3a62 <nrk_signal_unregister+0x7c>
    3a2e:	20 95       	com	r18
    3a30:	30 95       	com	r19
    3a32:	40 95       	com	r20
    3a34:	50 95       	com	r21
    3a36:	e2 22       	and	r14, r18
    3a38:	f3 22       	and	r15, r19
    3a3a:	04 23       	and	r16, r20
    3a3c:	15 23       	and	r17, r21
    3a3e:	e5 86       	std	Z+13, r14	; 0x0d
    3a40:	f6 86       	std	Z+14, r15	; 0x0e
    3a42:	07 87       	std	Z+15, r16	; 0x0f
    3a44:	10 8b       	std	Z+16, r17	; 0x10
    3a46:	81 89       	ldd	r24, Z+17	; 0x11
    3a48:	92 89       	ldd	r25, Z+18	; 0x12
    3a4a:	a3 89       	ldd	r26, Z+19	; 0x13
    3a4c:	b4 89       	ldd	r27, Z+20	; 0x14
    3a4e:	82 23       	and	r24, r18
    3a50:	93 23       	and	r25, r19
    3a52:	a4 23       	and	r26, r20
    3a54:	b5 23       	and	r27, r21
    3a56:	81 8b       	std	Z+17, r24	; 0x11
    3a58:	92 8b       	std	Z+18, r25	; 0x12
    3a5a:	a3 8b       	std	Z+19, r26	; 0x13
    3a5c:	b4 8b       	std	Z+20, r27	; 0x14
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	1f 91       	pop	r17
    3a64:	0f 91       	pop	r16
    3a66:	ff 90       	pop	r15
    3a68:	ef 90       	pop	r14
    3a6a:	08 95       	ret

00003a6c <nrk_signal_register>:
    3a6c:	68 2f       	mov	r22, r24
    3a6e:	77 27       	eor	r23, r23
    3a70:	67 fd       	sbrc	r22, 7
    3a72:	70 95       	com	r23
    3a74:	80 91 f8 03 	lds	r24, 0x03F8
    3a78:	90 91 f9 03 	lds	r25, 0x03F9
    3a7c:	a0 91 fa 03 	lds	r26, 0x03FA
    3a80:	b0 91 fb 03 	lds	r27, 0x03FB
    3a84:	06 2e       	mov	r0, r22
    3a86:	04 c0       	rjmp	.+8      	; 0x3a90 <nrk_signal_register+0x24>
    3a88:	b6 95       	lsr	r27
    3a8a:	a7 95       	ror	r26
    3a8c:	97 95       	ror	r25
    3a8e:	87 95       	ror	r24
    3a90:	0a 94       	dec	r0
    3a92:	d2 f7       	brpl	.-12     	; 0x3a88 <nrk_signal_register+0x1c>
    3a94:	81 70       	andi	r24, 0x01	; 1
    3a96:	90 70       	andi	r25, 0x00	; 0
    3a98:	89 2b       	or	r24, r25
    3a9a:	19 f4       	brne	.+6      	; 0x3aa2 <nrk_signal_register+0x36>
    3a9c:	8f ef       	ldi	r24, 0xFF	; 255
    3a9e:	9f ef       	ldi	r25, 0xFF	; 255
    3aa0:	08 95       	ret
    3aa2:	e0 91 1a 07 	lds	r30, 0x071A
    3aa6:	f0 91 1b 07 	lds	r31, 0x071B
    3aaa:	21 e0       	ldi	r18, 0x01	; 1
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	50 e0       	ldi	r21, 0x00	; 0
    3ab2:	04 c0       	rjmp	.+8      	; 0x3abc <nrk_signal_register+0x50>
    3ab4:	22 0f       	add	r18, r18
    3ab6:	33 1f       	adc	r19, r19
    3ab8:	44 1f       	adc	r20, r20
    3aba:	55 1f       	adc	r21, r21
    3abc:	6a 95       	dec	r22
    3abe:	d2 f7       	brpl	.-12     	; 0x3ab4 <nrk_signal_register+0x48>
    3ac0:	85 85       	ldd	r24, Z+13	; 0x0d
    3ac2:	96 85       	ldd	r25, Z+14	; 0x0e
    3ac4:	a7 85       	ldd	r26, Z+15	; 0x0f
    3ac6:	b0 89       	ldd	r27, Z+16	; 0x10
    3ac8:	82 2b       	or	r24, r18
    3aca:	93 2b       	or	r25, r19
    3acc:	a4 2b       	or	r26, r20
    3ace:	b5 2b       	or	r27, r21
    3ad0:	85 87       	std	Z+13, r24	; 0x0d
    3ad2:	96 87       	std	Z+14, r25	; 0x0e
    3ad4:	a7 87       	std	Z+15, r26	; 0x0f
    3ad6:	b0 8b       	std	Z+16, r27	; 0x10
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	08 95       	ret

00003ade <nrk_sem_create>:
    3ade:	38 2f       	mov	r19, r24
    3ae0:	80 91 19 07 	lds	r24, 0x0719
    3ae4:	88 23       	and	r24, r24
    3ae6:	19 f0       	breq	.+6      	; 0x3aee <nrk_sem_create+0x10>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	08 95       	ret
    3aee:	80 91 03 07 	lds	r24, 0x0703
    3af2:	8f 3f       	cpi	r24, 0xFF	; 255
    3af4:	11 f4       	brne	.+4      	; 0x3afa <nrk_sem_create+0x1c>
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	07 c0       	rjmp	.+14     	; 0x3b08 <nrk_sem_create+0x2a>
    3afa:	80 91 06 07 	lds	r24, 0x0706
    3afe:	8f 3f       	cpi	r24, 0xFF	; 255
    3b00:	11 f0       	breq	.+4      	; 0x3b06 <nrk_sem_create+0x28>
    3b02:	22 e0       	ldi	r18, 0x02	; 2
    3b04:	01 c0       	rjmp	.+2      	; 0x3b08 <nrk_sem_create+0x2a>
    3b06:	21 e0       	ldi	r18, 0x01	; 1
    3b08:	82 2f       	mov	r24, r18
    3b0a:	99 27       	eor	r25, r25
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	ee 0f       	add	r30, r30
    3b10:	ff 1f       	adc	r31, r31
    3b12:	e8 0f       	add	r30, r24
    3b14:	f9 1f       	adc	r31, r25
    3b16:	ed 5f       	subi	r30, 0xFD	; 253
    3b18:	f8 4f       	sbci	r31, 0xF8	; 248
    3b1a:	32 83       	std	Z+2, r19	; 0x02
    3b1c:	30 83       	st	Z, r19
    3b1e:	61 83       	std	Z+1, r22	; 0x01
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	80 93 19 07 	sts	0x0719, r24
    3b26:	83 e0       	ldi	r24, 0x03	; 3
    3b28:	28 9f       	mul	r18, r24
    3b2a:	c0 01       	movw	r24, r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	8d 5f       	subi	r24, 0xFD	; 253
    3b30:	98 4f       	sbci	r25, 0xF8	; 248
    3b32:	08 95       	ret

00003b34 <nrk_get_resource_index>:
    3b34:	27 e0       	ldi	r18, 0x07	; 7
    3b36:	83 30       	cpi	r24, 0x03	; 3
    3b38:	92 07       	cpc	r25, r18
    3b3a:	11 f4       	brne	.+4      	; 0x3b40 <nrk_get_resource_index+0xc>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	07 c0       	rjmp	.+14     	; 0x3b4e <nrk_get_resource_index+0x1a>
    3b40:	86 50       	subi	r24, 0x06	; 6
    3b42:	97 40       	sbci	r25, 0x07	; 7
    3b44:	19 f0       	breq	.+6      	; 0x3b4c <nrk_get_resource_index+0x18>
    3b46:	8f ef       	ldi	r24, 0xFF	; 255
    3b48:	9f ef       	ldi	r25, 0xFF	; 255
    3b4a:	08 95       	ret
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	99 27       	eor	r25, r25
    3b50:	87 fd       	sbrc	r24, 7
    3b52:	90 95       	com	r25
    3b54:	08 95       	ret

00003b56 <nrk_sem_delete>:
    3b56:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <nrk_get_resource_index>
    3b5a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b5c:	11 f4       	brne	.+4      	; 0x3b62 <nrk_sem_delete+0xc>
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <nrk_sem_delete+0x10>
    3b62:	82 30       	cpi	r24, 0x02	; 2
    3b64:	29 f4       	brne	.+10     	; 0x3b70 <nrk_sem_delete+0x1a>
    3b66:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    3b6a:	8f ef       	ldi	r24, 0xFF	; 255
    3b6c:	9f ef       	ldi	r25, 0xFF	; 255
    3b6e:	08 95       	ret
    3b70:	99 27       	eor	r25, r25
    3b72:	87 fd       	sbrc	r24, 7
    3b74:	90 95       	com	r25
    3b76:	fc 01       	movw	r30, r24
    3b78:	ee 0f       	add	r30, r30
    3b7a:	ff 1f       	adc	r31, r31
    3b7c:	e8 0f       	add	r30, r24
    3b7e:	f9 1f       	adc	r31, r25
    3b80:	ed 5f       	subi	r30, 0xFD	; 253
    3b82:	f8 4f       	sbci	r31, 0xF8	; 248
    3b84:	8f ef       	ldi	r24, 0xFF	; 255
    3b86:	80 83       	st	Z, r24
    3b88:	82 83       	std	Z+2, r24	; 0x02
    3b8a:	81 83       	std	Z+1, r24	; 0x01
    3b8c:	80 91 19 07 	lds	r24, 0x0719
    3b90:	81 50       	subi	r24, 0x01	; 1
    3b92:	80 93 19 07 	sts	0x0719, r24
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	08 95       	ret

00003b9c <nrk_sem_query>:
    3b9c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <nrk_get_resource_index>
    3ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba2:	11 f4       	brne	.+4      	; 0x3ba8 <nrk_sem_query+0xc>
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <nrk_sem_query+0x10>
    3ba8:	82 30       	cpi	r24, 0x02	; 2
    3baa:	29 f4       	brne	.+10     	; 0x3bb6 <nrk_sem_query+0x1a>
    3bac:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    3bb0:	8f ef       	ldi	r24, 0xFF	; 255
    3bb2:	9f ef       	ldi	r25, 0xFF	; 255
    3bb4:	08 95       	ret
    3bb6:	99 27       	eor	r25, r25
    3bb8:	87 fd       	sbrc	r24, 7
    3bba:	90 95       	com	r25
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	ee 0f       	add	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	e8 0f       	add	r30, r24
    3bc4:	f9 1f       	adc	r31, r25
    3bc6:	ed 5f       	subi	r30, 0xFD	; 253
    3bc8:	f8 4f       	sbci	r31, 0xF8	; 248
    3bca:	82 81       	ldd	r24, Z+2	; 0x02
    3bcc:	99 27       	eor	r25, r25
    3bce:	87 fd       	sbrc	r24, 7
    3bd0:	90 95       	com	r25
    3bd2:	08 95       	ret

00003bd4 <nrk_sem_post>:
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <nrk_get_resource_index>
    3bde:	18 2f       	mov	r17, r24
    3be0:	8f 3f       	cpi	r24, 0xFF	; 255
    3be2:	11 f4       	brne	.+4      	; 0x3be8 <nrk_sem_post+0x14>
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	03 c0       	rjmp	.+6      	; 0x3bee <nrk_sem_post+0x1a>
    3be8:	82 30       	cpi	r24, 0x02	; 2
    3bea:	31 f4       	brne	.+12     	; 0x3bf8 <nrk_sem_post+0x24>
    3bec:	82 e0       	ldi	r24, 0x02	; 2
    3bee:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    3bf2:	8f ef       	ldi	r24, 0xFF	; 255
    3bf4:	9f ef       	ldi	r25, 0xFF	; 255
    3bf6:	3e c0       	rjmp	.+124    	; 0x3c74 <nrk_sem_post+0xa0>
    3bf8:	99 27       	eor	r25, r25
    3bfa:	87 fd       	sbrc	r24, 7
    3bfc:	90 95       	com	r25
    3bfe:	ec 01       	movw	r28, r24
    3c00:	cc 0f       	add	r28, r28
    3c02:	dd 1f       	adc	r29, r29
    3c04:	c8 0f       	add	r28, r24
    3c06:	d9 1f       	adc	r29, r25
    3c08:	cd 5f       	subi	r28, 0xFD	; 253
    3c0a:	d8 4f       	sbci	r29, 0xF8	; 248
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	88 81       	ld	r24, Y
    3c10:	98 17       	cp	r25, r24
    3c12:	74 f5       	brge	.+92     	; 0x3c70 <nrk_sem_post+0x9c>
    3c14:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	8f 5f       	subi	r24, 0xFF	; 255
    3c1c:	8a 83       	std	Y+2, r24	; 0x02
    3c1e:	e0 91 1a 07 	lds	r30, 0x071A
    3c22:	f0 91 1b 07 	lds	r31, 0x071B
    3c26:	14 82       	std	Z+4, r1	; 0x04
    3c28:	e4 e8       	ldi	r30, 0x84	; 132
    3c2a:	f6 e0       	ldi	r31, 0x06	; 6
    3c2c:	21 2f       	mov	r18, r17
    3c2e:	33 27       	eor	r19, r19
    3c30:	27 fd       	sbrc	r18, 7
    3c32:	30 95       	com	r19
    3c34:	43 2f       	mov	r20, r19
    3c36:	53 2f       	mov	r21, r19
    3c38:	80 81       	ld	r24, Z
    3c3a:	82 30       	cpi	r24, 0x02	; 2
    3c3c:	91 f4       	brne	.+36     	; 0x3c62 <nrk_sem_post+0x8e>
    3c3e:	82 85       	ldd	r24, Z+10	; 0x0a
    3c40:	93 85       	ldd	r25, Z+11	; 0x0b
    3c42:	a4 85       	ldd	r26, Z+12	; 0x0c
    3c44:	b5 85       	ldd	r27, Z+13	; 0x0d
    3c46:	82 17       	cp	r24, r18
    3c48:	93 07       	cpc	r25, r19
    3c4a:	a4 07       	cpc	r26, r20
    3c4c:	b5 07       	cpc	r27, r21
    3c4e:	49 f4       	brne	.+18     	; 0x3c62 <nrk_sem_post+0x8e>
    3c50:	83 e0       	ldi	r24, 0x03	; 3
    3c52:	82 83       	std	Z+2, r24	; 0x02
    3c54:	17 86       	std	Z+15, r1	; 0x0f
    3c56:	16 86       	std	Z+14, r1	; 0x0e
    3c58:	10 82       	st	Z, r1
    3c5a:	12 86       	std	Z+10, r1	; 0x0a
    3c5c:	13 86       	std	Z+11, r1	; 0x0b
    3c5e:	14 86       	std	Z+12, r1	; 0x0c
    3c60:	15 86       	std	Z+13, r1	; 0x0d
    3c62:	b1 96       	adiw	r30, 0x21	; 33
    3c64:	87 e0       	ldi	r24, 0x07	; 7
    3c66:	e8 30       	cpi	r30, 0x08	; 8
    3c68:	f8 07       	cpc	r31, r24
    3c6a:	31 f7       	brne	.-52     	; 0x3c38 <nrk_sem_post+0x64>
    3c6c:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	1f 91       	pop	r17
    3c7a:	08 95       	ret

00003c7c <nrk_event_signal>:
    3c7c:	df 92       	push	r13
    3c7e:	ef 92       	push	r14
    3c80:	ff 92       	push	r15
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
    3c86:	e1 e0       	ldi	r30, 0x01	; 1
    3c88:	ee 2e       	mov	r14, r30
    3c8a:	f1 2c       	mov	r15, r1
    3c8c:	01 2d       	mov	r16, r1
    3c8e:	11 2d       	mov	r17, r1
    3c90:	04 c0       	rjmp	.+8      	; 0x3c9a <nrk_event_signal+0x1e>
    3c92:	ee 0c       	add	r14, r14
    3c94:	ff 1c       	adc	r15, r15
    3c96:	00 1f       	adc	r16, r16
    3c98:	11 1f       	adc	r17, r17
    3c9a:	8a 95       	dec	r24
    3c9c:	d2 f7       	brpl	.-12     	; 0x3c92 <nrk_event_signal+0x16>
    3c9e:	80 91 f8 03 	lds	r24, 0x03F8
    3ca2:	90 91 f9 03 	lds	r25, 0x03F9
    3ca6:	a0 91 fa 03 	lds	r26, 0x03FA
    3caa:	b0 91 fb 03 	lds	r27, 0x03FB
    3cae:	8e 21       	and	r24, r14
    3cb0:	9f 21       	and	r25, r15
    3cb2:	a0 23       	and	r26, r16
    3cb4:	b1 23       	and	r27, r17
    3cb6:	00 97       	sbiw	r24, 0x00	; 0
    3cb8:	a1 05       	cpc	r26, r1
    3cba:	b1 05       	cpc	r27, r1
    3cbc:	11 f4       	brne	.+4      	; 0x3cc2 <nrk_event_signal+0x46>
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	43 c0       	rjmp	.+134    	; 0x3d48 <nrk_event_signal+0xcc>
    3cc2:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    3cc6:	e4 e8       	ldi	r30, 0x84	; 132
    3cc8:	f6 e0       	ldi	r31, 0x06	; 6
    3cca:	dd 24       	eor	r13, r13
    3ccc:	80 81       	ld	r24, Z
    3cce:	81 30       	cpi	r24, 0x01	; 1
    3cd0:	b9 f4       	brne	.+46     	; 0x3d00 <nrk_event_signal+0x84>
    3cd2:	82 85       	ldd	r24, Z+10	; 0x0a
    3cd4:	93 85       	ldd	r25, Z+11	; 0x0b
    3cd6:	a4 85       	ldd	r26, Z+12	; 0x0c
    3cd8:	b5 85       	ldd	r27, Z+13	; 0x0d
    3cda:	8e 21       	and	r24, r14
    3cdc:	9f 21       	and	r25, r15
    3cde:	a0 23       	and	r26, r16
    3ce0:	b1 23       	and	r27, r17
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	a1 05       	cpc	r26, r1
    3ce6:	b1 05       	cpc	r27, r1
    3ce8:	59 f0       	breq	.+22     	; 0x3d00 <nrk_event_signal+0x84>
    3cea:	83 e0       	ldi	r24, 0x03	; 3
    3cec:	82 83       	std	Z+2, r24	; 0x02
    3cee:	17 86       	std	Z+15, r1	; 0x0f
    3cf0:	16 86       	std	Z+14, r1	; 0x0e
    3cf2:	10 82       	st	Z, r1
    3cf4:	e2 86       	std	Z+10, r14	; 0x0a
    3cf6:	f3 86       	std	Z+11, r15	; 0x0b
    3cf8:	04 87       	std	Z+12, r16	; 0x0c
    3cfa:	15 87       	std	Z+13, r17	; 0x0d
    3cfc:	dd 24       	eor	r13, r13
    3cfe:	d3 94       	inc	r13
    3d00:	80 81       	ld	r24, Z
    3d02:	82 30       	cpi	r24, 0x02	; 2
    3d04:	a1 f4       	brne	.+40     	; 0x3d2e <nrk_event_signal+0xb2>
    3d06:	82 85       	ldd	r24, Z+10	; 0x0a
    3d08:	93 85       	ldd	r25, Z+11	; 0x0b
    3d0a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d0c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d0e:	8e 15       	cp	r24, r14
    3d10:	9f 05       	cpc	r25, r15
    3d12:	a0 07       	cpc	r26, r16
    3d14:	b1 07       	cpc	r27, r17
    3d16:	59 f4       	brne	.+22     	; 0x3d2e <nrk_event_signal+0xb2>
    3d18:	83 e0       	ldi	r24, 0x03	; 3
    3d1a:	82 83       	std	Z+2, r24	; 0x02
    3d1c:	17 86       	std	Z+15, r1	; 0x0f
    3d1e:	16 86       	std	Z+14, r1	; 0x0e
    3d20:	10 82       	st	Z, r1
    3d22:	12 86       	std	Z+10, r1	; 0x0a
    3d24:	13 86       	std	Z+11, r1	; 0x0b
    3d26:	14 86       	std	Z+12, r1	; 0x0c
    3d28:	15 86       	std	Z+13, r1	; 0x0d
    3d2a:	dd 24       	eor	r13, r13
    3d2c:	d3 94       	inc	r13
    3d2e:	b1 96       	adiw	r30, 0x21	; 33
    3d30:	87 e0       	ldi	r24, 0x07	; 7
    3d32:	e8 30       	cpi	r30, 0x08	; 8
    3d34:	f8 07       	cpc	r31, r24
    3d36:	51 f6       	brne	.-108    	; 0x3ccc <nrk_event_signal+0x50>
    3d38:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    3d3c:	dd 20       	and	r13, r13
    3d3e:	19 f0       	breq	.+6      	; 0x3d46 <nrk_event_signal+0xca>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	05 c0       	rjmp	.+10     	; 0x3d50 <nrk_event_signal+0xd4>
    3d46:	82 e0       	ldi	r24, 0x02	; 2
    3d48:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    3d4c:	8f ef       	ldi	r24, 0xFF	; 255
    3d4e:	9f ef       	ldi	r25, 0xFF	; 255
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	ff 90       	pop	r15
    3d56:	ef 90       	pop	r14
    3d58:	df 90       	pop	r13
    3d5a:	08 95       	ret

00003d5c <nrk_signal_delete>:
    3d5c:	ef 92       	push	r14
    3d5e:	ff 92       	push	r15
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	c8 2f       	mov	r28, r24
    3d6a:	dd 27       	eor	r29, r29
    3d6c:	c7 fd       	sbrc	r28, 7
    3d6e:	d0 95       	com	r29
    3d70:	f1 e0       	ldi	r31, 0x01	; 1
    3d72:	ef 2e       	mov	r14, r31
    3d74:	f1 2c       	mov	r15, r1
    3d76:	01 2d       	mov	r16, r1
    3d78:	11 2d       	mov	r17, r1
    3d7a:	0c 2e       	mov	r0, r28
    3d7c:	04 c0       	rjmp	.+8      	; 0x3d86 <nrk_signal_delete+0x2a>
    3d7e:	ee 0c       	add	r14, r14
    3d80:	ff 1c       	adc	r15, r15
    3d82:	00 1f       	adc	r16, r16
    3d84:	11 1f       	adc	r17, r17
    3d86:	0a 94       	dec	r0
    3d88:	d2 f7       	brpl	.-12     	; 0x3d7e <nrk_signal_delete+0x22>
    3d8a:	80 91 f8 03 	lds	r24, 0x03F8
    3d8e:	90 91 f9 03 	lds	r25, 0x03F9
    3d92:	a0 91 fa 03 	lds	r26, 0x03FA
    3d96:	b0 91 fb 03 	lds	r27, 0x03FB
    3d9a:	8e 21       	and	r24, r14
    3d9c:	9f 21       	and	r25, r15
    3d9e:	a0 23       	and	r26, r16
    3da0:	b1 23       	and	r27, r17
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	a1 05       	cpc	r26, r1
    3da6:	b1 05       	cpc	r27, r1
    3da8:	19 f4       	brne	.+6      	; 0x3db0 <nrk_signal_delete+0x54>
    3daa:	8f ef       	ldi	r24, 0xFF	; 255
    3dac:	9f ef       	ldi	r25, 0xFF	; 255
    3dae:	5d c0       	rjmp	.+186    	; 0x3e6a <nrk_signal_delete+0x10e>
    3db0:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    3db4:	ed e7       	ldi	r30, 0x7D	; 125
    3db6:	f6 e0       	ldi	r31, 0x06	; 6
    3db8:	a8 01       	movw	r20, r16
    3dba:	97 01       	movw	r18, r14
    3dbc:	20 95       	com	r18
    3dbe:	30 95       	com	r19
    3dc0:	40 95       	com	r20
    3dc2:	50 95       	com	r21
    3dc4:	80 85       	ldd	r24, Z+8	; 0x08
    3dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    3dc8:	41 f1       	breq	.+80     	; 0x3e1a <nrk_signal_delete+0xbe>
    3dca:	85 85       	ldd	r24, Z+13	; 0x0d
    3dcc:	96 85       	ldd	r25, Z+14	; 0x0e
    3dce:	a7 85       	ldd	r26, Z+15	; 0x0f
    3dd0:	b0 89       	ldd	r27, Z+16	; 0x10
    3dd2:	8e 15       	cp	r24, r14
    3dd4:	9f 05       	cpc	r25, r15
    3dd6:	a0 07       	cpc	r26, r16
    3dd8:	b1 07       	cpc	r27, r17
    3dda:	39 f4       	brne	.+14     	; 0x3dea <nrk_signal_delete+0x8e>
    3ddc:	11 8a       	std	Z+17, r1	; 0x11
    3dde:	12 8a       	std	Z+18, r1	; 0x12
    3de0:	13 8a       	std	Z+19, r1	; 0x13
    3de2:	14 8a       	std	Z+20, r1	; 0x14
    3de4:	17 82       	std	Z+7, r1	; 0x07
    3de6:	83 e0       	ldi	r24, 0x03	; 3
    3de8:	81 87       	std	Z+9, r24	; 0x09
    3dea:	85 85       	ldd	r24, Z+13	; 0x0d
    3dec:	96 85       	ldd	r25, Z+14	; 0x0e
    3dee:	a7 85       	ldd	r26, Z+15	; 0x0f
    3df0:	b0 89       	ldd	r27, Z+16	; 0x10
    3df2:	82 23       	and	r24, r18
    3df4:	93 23       	and	r25, r19
    3df6:	a4 23       	and	r26, r20
    3df8:	b5 23       	and	r27, r21
    3dfa:	85 87       	std	Z+13, r24	; 0x0d
    3dfc:	96 87       	std	Z+14, r25	; 0x0e
    3dfe:	a7 87       	std	Z+15, r26	; 0x0f
    3e00:	b0 8b       	std	Z+16, r27	; 0x10
    3e02:	81 89       	ldd	r24, Z+17	; 0x11
    3e04:	92 89       	ldd	r25, Z+18	; 0x12
    3e06:	a3 89       	ldd	r26, Z+19	; 0x13
    3e08:	b4 89       	ldd	r27, Z+20	; 0x14
    3e0a:	82 23       	and	r24, r18
    3e0c:	93 23       	and	r25, r19
    3e0e:	a4 23       	and	r26, r20
    3e10:	b5 23       	and	r27, r21
    3e12:	81 8b       	std	Z+17, r24	; 0x11
    3e14:	92 8b       	std	Z+18, r25	; 0x12
    3e16:	a3 8b       	std	Z+19, r26	; 0x13
    3e18:	b4 8b       	std	Z+20, r27	; 0x14
    3e1a:	b1 96       	adiw	r30, 0x21	; 33
    3e1c:	87 e0       	ldi	r24, 0x07	; 7
    3e1e:	e1 30       	cpi	r30, 0x01	; 1
    3e20:	f8 07       	cpc	r31, r24
    3e22:	81 f6       	brne	.-96     	; 0x3dc4 <nrk_signal_delete+0x68>
    3e24:	2e ef       	ldi	r18, 0xFE	; 254
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
    3e28:	4f ef       	ldi	r20, 0xFF	; 255
    3e2a:	5f ef       	ldi	r21, 0xFF	; 255
    3e2c:	04 c0       	rjmp	.+8      	; 0x3e36 <nrk_signal_delete+0xda>
    3e2e:	22 0f       	add	r18, r18
    3e30:	33 1f       	adc	r19, r19
    3e32:	44 1f       	adc	r20, r20
    3e34:	55 1f       	adc	r21, r21
    3e36:	ca 95       	dec	r28
    3e38:	d2 f7       	brpl	.-12     	; 0x3e2e <nrk_signal_delete+0xd2>
    3e3a:	80 91 f8 03 	lds	r24, 0x03F8
    3e3e:	90 91 f9 03 	lds	r25, 0x03F9
    3e42:	a0 91 fa 03 	lds	r26, 0x03FA
    3e46:	b0 91 fb 03 	lds	r27, 0x03FB
    3e4a:	82 23       	and	r24, r18
    3e4c:	93 23       	and	r25, r19
    3e4e:	a4 23       	and	r26, r20
    3e50:	b5 23       	and	r27, r21
    3e52:	80 93 f8 03 	sts	0x03F8, r24
    3e56:	90 93 f9 03 	sts	0x03F9, r25
    3e5a:	a0 93 fa 03 	sts	0x03FA, r26
    3e5e:	b0 93 fb 03 	sts	0x03FB, r27
    3e62:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	1f 91       	pop	r17
    3e70:	0f 91       	pop	r16
    3e72:	ff 90       	pop	r15
    3e74:	ef 90       	pop	r14
    3e76:	08 95       	ret

00003e78 <nrk_sem_pend>:
    3e78:	1f 93       	push	r17
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <nrk_get_resource_index>
    3e82:	18 2f       	mov	r17, r24
    3e84:	8f 3f       	cpi	r24, 0xFF	; 255
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <nrk_sem_pend+0x14>
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	03 c0       	rjmp	.+6      	; 0x3e92 <nrk_sem_pend+0x1a>
    3e8c:	82 30       	cpi	r24, 0x02	; 2
    3e8e:	31 f4       	brne	.+12     	; 0x3e9c <nrk_sem_pend+0x24>
    3e90:	82 e0       	ldi	r24, 0x02	; 2
    3e92:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    3e96:	8f ef       	ldi	r24, 0xFF	; 255
    3e98:	9f ef       	ldi	r25, 0xFF	; 255
    3e9a:	3e c0       	rjmp	.+124    	; 0x3f18 <nrk_sem_pend+0xa0>
    3e9c:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    3ea0:	81 2f       	mov	r24, r17
    3ea2:	99 27       	eor	r25, r25
    3ea4:	87 fd       	sbrc	r24, 7
    3ea6:	90 95       	com	r25
    3ea8:	ec 01       	movw	r28, r24
    3eaa:	cc 0f       	add	r28, r28
    3eac:	dd 1f       	adc	r29, r29
    3eae:	c8 0f       	add	r28, r24
    3eb0:	d9 1f       	adc	r29, r25
    3eb2:	cd 5f       	subi	r28, 0xFD	; 253
    3eb4:	d8 4f       	sbci	r29, 0xF8	; 248
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	88 23       	and	r24, r24
    3eba:	d9 f4       	brne	.+54     	; 0x3ef2 <nrk_sem_pend+0x7a>
    3ebc:	e0 91 1a 07 	lds	r30, 0x071A
    3ec0:	f0 91 1b 07 	lds	r31, 0x071B
    3ec4:	87 81       	ldd	r24, Z+7	; 0x07
    3ec6:	82 60       	ori	r24, 0x02	; 2
    3ec8:	87 83       	std	Z+7, r24	; 0x07
    3eca:	e0 91 1a 07 	lds	r30, 0x071A
    3ece:	f0 91 1b 07 	lds	r31, 0x071B
    3ed2:	81 2f       	mov	r24, r17
    3ed4:	99 27       	eor	r25, r25
    3ed6:	87 fd       	sbrc	r24, 7
    3ed8:	90 95       	com	r25
    3eda:	a9 2f       	mov	r26, r25
    3edc:	b9 2f       	mov	r27, r25
    3ede:	81 8b       	std	Z+17, r24	; 0x11
    3ee0:	92 8b       	std	Z+18, r25	; 0x12
    3ee2:	a3 8b       	std	Z+19, r26	; 0x13
    3ee4:	b4 8b       	std	Z+20, r27	; 0x14
    3ee6:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <nrk_wait_until_ticks>
    3ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef4:	81 50       	subi	r24, 0x01	; 1
    3ef6:	8a 83       	std	Y+2, r24	; 0x02
    3ef8:	e0 91 1a 07 	lds	r30, 0x071A
    3efc:	f0 91 1b 07 	lds	r31, 0x071B
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	83 87       	std	Z+11, r24	; 0x0b
    3f04:	e0 91 1a 07 	lds	r30, 0x071A
    3f08:	f0 91 1b 07 	lds	r31, 0x071B
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	84 83       	std	Z+4, r24	; 0x04
    3f10:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	df 91       	pop	r29
    3f1a:	cf 91       	pop	r28
    3f1c:	1f 91       	pop	r17
    3f1e:	08 95       	ret

00003f20 <nrk_event_wait>:
    3f20:	9b 01       	movw	r18, r22
    3f22:	ac 01       	movw	r20, r24
    3f24:	e0 91 1a 07 	lds	r30, 0x071A
    3f28:	f0 91 1b 07 	lds	r31, 0x071B
    3f2c:	85 85       	ldd	r24, Z+13	; 0x0d
    3f2e:	96 85       	ldd	r25, Z+14	; 0x0e
    3f30:	a7 85       	ldd	r26, Z+15	; 0x0f
    3f32:	b0 89       	ldd	r27, Z+16	; 0x10
    3f34:	82 23       	and	r24, r18
    3f36:	93 23       	and	r25, r19
    3f38:	a4 23       	and	r26, r20
    3f3a:	b5 23       	and	r27, r21
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	a1 05       	cpc	r26, r1
    3f40:	b1 05       	cpc	r27, r1
    3f42:	29 f4       	brne	.+10     	; 0x3f4e <nrk_event_wait+0x2e>
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	08 95       	ret
    3f4e:	21 8b       	std	Z+17, r18	; 0x11
    3f50:	32 8b       	std	Z+18, r19	; 0x12
    3f52:	43 8b       	std	Z+19, r20	; 0x13
    3f54:	54 8b       	std	Z+20, r21	; 0x14
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	87 83       	std	Z+7, r24	; 0x07
    3f5a:	00 90 0a 07 	lds	r0, 0x070A
    3f5e:	04 c0       	rjmp	.+8      	; 0x3f68 <nrk_event_wait+0x48>
    3f60:	56 95       	lsr	r21
    3f62:	47 95       	ror	r20
    3f64:	37 95       	ror	r19
    3f66:	27 95       	ror	r18
    3f68:	0a 94       	dec	r0
    3f6a:	d2 f7       	brpl	.-12     	; 0x3f60 <nrk_event_wait+0x40>
    3f6c:	c9 01       	movw	r24, r18
    3f6e:	81 70       	andi	r24, 0x01	; 1
    3f70:	90 70       	andi	r25, 0x00	; 0
    3f72:	89 2b       	or	r24, r25
    3f74:	19 f0       	breq	.+6      	; 0x3f7c <nrk_event_wait+0x5c>
    3f76:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <nrk_wait_until_nw>
    3f7a:	04 c0       	rjmp	.+8      	; 0x3f84 <nrk_event_wait+0x64>
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <nrk_wait_until_ticks>
    3f84:	e0 91 1a 07 	lds	r30, 0x071A
    3f88:	f0 91 1b 07 	lds	r31, 0x071B
    3f8c:	61 89       	ldd	r22, Z+17	; 0x11
    3f8e:	72 89       	ldd	r23, Z+18	; 0x12
    3f90:	83 89       	ldd	r24, Z+19	; 0x13
    3f92:	94 89       	ldd	r25, Z+20	; 0x14
    3f94:	08 95       	ret

00003f96 <nrk_get_high_ready_task_ID>:
//      uint16_t timeout
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    3f96:	e0 91 0f 07 	lds	r30, 0x070F
    3f9a:	f0 91 10 07 	lds	r31, 0x0710
    3f9e:	80 81       	ld	r24, Z
    do {
        NOP();
    3fa0:	99 27       	eor	r25, r25
    3fa2:	08 95       	ret

00003fa4 <nrk_print_readyQ>:
        NOP();
        NOP();
        NOP();
    } while (--timeout);

    3fa4:	e0 91 0f 07 	lds	r30, 0x070F
    3fa8:	f0 91 10 07 	lds	r31, 0x0710
    3fac:	03 c0       	rjmp	.+6      	; 0x3fb4 <nrk_print_readyQ+0x10>
} // halWait
    3fae:	03 80       	ldd	r0, Z+3	; 0x03
    3fb0:	f4 81       	ldd	r31, Z+4	; 0x04
    3fb2:	e0 2d       	mov	r30, r0
        NOP();
        NOP();
    } while (--timeout);

} // halWait
    3fb4:	30 97       	sbiw	r30, 0x00	; 0
    3fb6:	d9 f7       	brne	.-10     	; 0x3fae <nrk_print_readyQ+0xa>
    3fb8:	08 95       	ret

00003fba <nrk_add_to_readyQ>:
    3fba:	cf 93       	push	r28
    3fbc:	df 93       	push	r29
    3fbe:	48 2f       	mov	r20, r24
    3fc0:	c0 91 7b 06 	lds	r28, 0x067B
    3fc4:	d0 91 7c 06 	lds	r29, 0x067C
    3fc8:	20 97       	sbiw	r28, 0x00	; 0
    3fca:	09 f4       	brne	.+2      	; 0x3fce <nrk_add_to_readyQ+0x14>
    3fcc:	7a c0       	rjmp	.+244    	; 0x40c2 <nrk_add_to_readyQ+0x108>
    3fce:	a0 91 0f 07 	lds	r26, 0x070F
    3fd2:	b0 91 10 07 	lds	r27, 0x0710
    3fd6:	10 97       	sbiw	r26, 0x00	; 0
    3fd8:	b9 f1       	breq	.+110    	; 0x4048 <nrk_add_to_readyQ+0x8e>
    3fda:	99 27       	eor	r25, r25
    3fdc:	87 fd       	sbrc	r24, 7
    3fde:	90 95       	com	r25
    3fe0:	9c 01       	movw	r18, r24
    3fe2:	65 e0       	ldi	r22, 0x05	; 5
    3fe4:	22 0f       	add	r18, r18
    3fe6:	33 1f       	adc	r19, r19
    3fe8:	6a 95       	dec	r22
    3fea:	e1 f7       	brne	.-8      	; 0x3fe4 <nrk_add_to_readyQ+0x2a>
    3fec:	28 0f       	add	r18, r24
    3fee:	39 1f       	adc	r19, r25
    3ff0:	23 58       	subi	r18, 0x83	; 131
    3ff2:	39 4f       	sbci	r19, 0xF9	; 249
    3ff4:	8c 91       	ld	r24, X
    3ff6:	99 27       	eor	r25, r25
    3ff8:	bc 01       	movw	r22, r24
    3ffa:	55 e0       	ldi	r21, 0x05	; 5
    3ffc:	66 0f       	add	r22, r22
    3ffe:	77 1f       	adc	r23, r23
    4000:	5a 95       	dec	r21
    4002:	e1 f7       	brne	.-8      	; 0x3ffc <nrk_add_to_readyQ+0x42>
    4004:	68 0f       	add	r22, r24
    4006:	79 1f       	adc	r23, r25
    4008:	63 58       	subi	r22, 0x83	; 131
    400a:	79 4f       	sbci	r23, 0xF9	; 249
    400c:	fb 01       	movw	r30, r22
    400e:	84 81       	ldd	r24, Z+4	; 0x04
    4010:	88 23       	and	r24, r24
    4012:	29 f0       	breq	.+10     	; 0x401e <nrk_add_to_readyQ+0x64>
    4014:	93 85       	ldd	r25, Z+11	; 0x0b
    4016:	f9 01       	movw	r30, r18
    4018:	82 85       	ldd	r24, Z+10	; 0x0a
    401a:	98 17       	cp	r25, r24
    401c:	a8 f0       	brcs	.+42     	; 0x4048 <nrk_add_to_readyQ+0x8e>
    401e:	f9 01       	movw	r30, r18
    4020:	84 81       	ldd	r24, Z+4	; 0x04
    4022:	88 23       	and	r24, r24
    4024:	31 f0       	breq	.+12     	; 0x4032 <nrk_add_to_readyQ+0x78>
    4026:	fb 01       	movw	r30, r22
    4028:	92 85       	ldd	r25, Z+10	; 0x0a
    402a:	f9 01       	movw	r30, r18
    402c:	83 85       	ldd	r24, Z+11	; 0x0b
    402e:	98 17       	cp	r25, r24
    4030:	58 f0       	brcs	.+22     	; 0x4048 <nrk_add_to_readyQ+0x8e>
    4032:	fb 01       	movw	r30, r22
    4034:	92 85       	ldd	r25, Z+10	; 0x0a
    4036:	f9 01       	movw	r30, r18
    4038:	82 85       	ldd	r24, Z+10	; 0x0a
    403a:	98 17       	cp	r25, r24
    403c:	28 f0       	brcs	.+10     	; 0x4048 <nrk_add_to_readyQ+0x8e>
    403e:	fd 01       	movw	r30, r26
    4040:	a3 81       	ldd	r26, Z+3	; 0x03
    4042:	b4 81       	ldd	r27, Z+4	; 0x04
    4044:	10 97       	sbiw	r26, 0x00	; 0
    4046:	b1 f6       	brne	.-84     	; 0x3ff4 <nrk_add_to_readyQ+0x3a>
    4048:	48 83       	st	Y, r20
    404a:	e0 91 7b 06 	lds	r30, 0x067B
    404e:	f0 91 7c 06 	lds	r31, 0x067C
    4052:	23 81       	ldd	r18, Z+3	; 0x03
    4054:	34 81       	ldd	r19, Z+4	; 0x04
    4056:	30 93 7c 06 	sts	0x067C, r19
    405a:	20 93 7b 06 	sts	0x067B, r18
    405e:	80 91 0f 07 	lds	r24, 0x070F
    4062:	90 91 10 07 	lds	r25, 0x0710
    4066:	a8 17       	cp	r26, r24
    4068:	b9 07       	cpc	r27, r25
    406a:	a1 f4       	brne	.+40     	; 0x4094 <nrk_add_to_readyQ+0xda>
    406c:	10 97       	sbiw	r26, 0x00	; 0
    406e:	31 f0       	breq	.+12     	; 0x407c <nrk_add_to_readyQ+0xc2>
    4070:	bc 83       	std	Y+4, r27	; 0x04
    4072:	ab 83       	std	Y+3, r26	; 0x03
    4074:	1a 82       	std	Y+2, r1	; 0x02
    4076:	19 82       	std	Y+1, r1	; 0x01
    4078:	fd 01       	movw	r30, r26
    407a:	05 c0       	rjmp	.+10     	; 0x4086 <nrk_add_to_readyQ+0xcc>
    407c:	1c 82       	std	Y+4, r1	; 0x04
    407e:	1b 82       	std	Y+3, r1	; 0x03
    4080:	1a 82       	std	Y+2, r1	; 0x02
    4082:	19 82       	std	Y+1, r1	; 0x01
    4084:	f9 01       	movw	r30, r18
    4086:	d2 83       	std	Z+2, r29	; 0x02
    4088:	c1 83       	std	Z+1, r28	; 0x01
    408a:	d0 93 10 07 	sts	0x0710, r29
    408e:	c0 93 0f 07 	sts	0x070F, r28
    4092:	17 c0       	rjmp	.+46     	; 0x40c2 <nrk_add_to_readyQ+0x108>
    4094:	fd 01       	movw	r30, r26
    4096:	81 81       	ldd	r24, Z+1	; 0x01
    4098:	92 81       	ldd	r25, Z+2	; 0x02
    409a:	a2 17       	cp	r26, r18
    409c:	b3 07       	cpc	r27, r19
    409e:	51 f0       	breq	.+20     	; 0x40b4 <nrk_add_to_readyQ+0xfa>
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
    40a4:	bc 83       	std	Y+4, r27	; 0x04
    40a6:	ab 83       	std	Y+3, r26	; 0x03
    40a8:	81 81       	ldd	r24, Z+1	; 0x01
    40aa:	92 81       	ldd	r25, Z+2	; 0x02
    40ac:	fc 01       	movw	r30, r24
    40ae:	d4 83       	std	Z+4, r29	; 0x04
    40b0:	c3 83       	std	Z+3, r28	; 0x03
    40b2:	04 c0       	rjmp	.+8      	; 0x40bc <nrk_add_to_readyQ+0x102>
    40b4:	1c 82       	std	Y+4, r1	; 0x04
    40b6:	1b 82       	std	Y+3, r1	; 0x03
    40b8:	9a 83       	std	Y+2, r25	; 0x02
    40ba:	89 83       	std	Y+1, r24	; 0x01
    40bc:	fd 01       	movw	r30, r26
    40be:	d2 83       	std	Z+2, r29	; 0x02
    40c0:	c1 83       	std	Z+1, r28	; 0x01
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <nrk_rem_from_readyQ>:
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	a0 91 0f 07 	lds	r26, 0x070F
    40d0:	b0 91 10 07 	lds	r27, 0x0710
    40d4:	10 97       	sbiw	r26, 0x00	; 0
    40d6:	09 f4       	brne	.+2      	; 0x40da <nrk_rem_from_readyQ+0x12>
    40d8:	46 c0       	rjmp	.+140    	; 0x4166 <nrk_rem_from_readyQ+0x9e>
    40da:	48 2f       	mov	r20, r24
    40dc:	55 27       	eor	r21, r21
    40de:	47 fd       	sbrc	r20, 7
    40e0:	50 95       	com	r21
    40e2:	8c 91       	ld	r24, X
    40e4:	99 27       	eor	r25, r25
    40e6:	84 17       	cp	r24, r20
    40e8:	95 07       	cpc	r25, r21
    40ea:	69 f4       	brne	.+26     	; 0x4106 <nrk_rem_from_readyQ+0x3e>
    40ec:	ed 01       	movw	r28, r26
    40ee:	eb 81       	ldd	r30, Y+3	; 0x03
    40f0:	fc 81       	ldd	r31, Y+4	; 0x04
    40f2:	f0 93 10 07 	sts	0x0710, r31
    40f6:	e0 93 0f 07 	sts	0x070F, r30
    40fa:	12 82       	std	Z+2, r1	; 0x02
    40fc:	11 82       	std	Z+1, r1	; 0x01
    40fe:	16 c0       	rjmp	.+44     	; 0x412c <nrk_rem_from_readyQ+0x64>
    4100:	d9 01       	movw	r26, r18
    4102:	23 2b       	or	r18, r19
    4104:	81 f1       	breq	.+96     	; 0x4166 <nrk_rem_from_readyQ+0x9e>
    4106:	8c 91       	ld	r24, X
    4108:	99 27       	eor	r25, r25
    410a:	fd 01       	movw	r30, r26
    410c:	23 81       	ldd	r18, Z+3	; 0x03
    410e:	34 81       	ldd	r19, Z+4	; 0x04
    4110:	84 17       	cp	r24, r20
    4112:	95 07       	cpc	r25, r21
    4114:	a9 f7       	brne	.-22     	; 0x4100 <nrk_rem_from_readyQ+0x38>
    4116:	c1 81       	ldd	r28, Z+1	; 0x01
    4118:	d2 81       	ldd	r29, Z+2	; 0x02
    411a:	3c 83       	std	Y+4, r19	; 0x04
    411c:	2b 83       	std	Y+3, r18	; 0x03
    411e:	83 81       	ldd	r24, Z+3	; 0x03
    4120:	94 81       	ldd	r25, Z+4	; 0x04
    4122:	00 97       	sbiw	r24, 0x00	; 0
    4124:	19 f0       	breq	.+6      	; 0x412c <nrk_rem_from_readyQ+0x64>
    4126:	fc 01       	movw	r30, r24
    4128:	d2 83       	std	Z+2, r29	; 0x02
    412a:	c1 83       	std	Z+1, r28	; 0x01
    412c:	e0 91 7b 06 	lds	r30, 0x067B
    4130:	f0 91 7c 06 	lds	r31, 0x067C
    4134:	30 97       	sbiw	r30, 0x00	; 0
    4136:	41 f4       	brne	.+16     	; 0x4148 <nrk_rem_from_readyQ+0x80>
    4138:	b0 93 7c 06 	sts	0x067C, r27
    413c:	a0 93 7b 06 	sts	0x067B, r26
    4140:	ed 01       	movw	r28, r26
    4142:	1c 82       	std	Y+4, r1	; 0x04
    4144:	1b 82       	std	Y+3, r1	; 0x03
    4146:	09 c0       	rjmp	.+18     	; 0x415a <nrk_rem_from_readyQ+0x92>
    4148:	ed 01       	movw	r28, r26
    414a:	fc 83       	std	Y+4, r31	; 0x04
    414c:	eb 83       	std	Y+3, r30	; 0x03
    414e:	b2 83       	std	Z+2, r27	; 0x02
    4150:	a1 83       	std	Z+1, r26	; 0x01
    4152:	b0 93 7c 06 	sts	0x067C, r27
    4156:	a0 93 7b 06 	sts	0x067B, r26
    415a:	e0 91 7b 06 	lds	r30, 0x067B
    415e:	f0 91 7c 06 	lds	r31, 0x067C
    4162:	12 82       	std	Z+2, r1	; 0x02
    4164:	11 82       	std	Z+1, r1	; 0x01
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	08 95       	ret

0000416c <nrk_get_pid>:
    416c:	e0 91 1a 07 	lds	r30, 0x071A
    4170:	f0 91 1b 07 	lds	r31, 0x071B
    4174:	80 85       	ldd	r24, Z+8	; 0x08
    4176:	99 27       	eor	r25, r25
    4178:	08 95       	ret

0000417a <_nrk_wait_for_scheduler>:
    417a:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <nrk_idle>
    417e:	e0 91 1a 07 	lds	r30, 0x071A
    4182:	f0 91 1b 07 	lds	r31, 0x071B
    4186:	85 81       	ldd	r24, Z+5	; 0x05
    4188:	88 23       	and	r24, r24
    418a:	b9 f7       	brne	.-18     	; 0x417a <_nrk_wait_for_scheduler>
    418c:	08 95       	ret

0000418e <nrk_wait>:
    418e:	ff 92       	push	r15
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
    4194:	cf 93       	push	r28
    4196:	df 93       	push	r29
    4198:	cd b7       	in	r28, 0x3d	; 61
    419a:	de b7       	in	r29, 0x3e	; 62
    419c:	28 97       	sbiw	r28, 0x08	; 8
    419e:	0f b6       	in	r0, 0x3f	; 63
    41a0:	f8 94       	cli
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	cd bf       	out	0x3d, r28	; 61
    41a8:	29 83       	std	Y+1, r18	; 0x01
    41aa:	3a 83       	std	Y+2, r19	; 0x02
    41ac:	4b 83       	std	Y+3, r20	; 0x03
    41ae:	5c 83       	std	Y+4, r21	; 0x04
    41b0:	6d 83       	std	Y+5, r22	; 0x05
    41b2:	7e 83       	std	Y+6, r23	; 0x06
    41b4:	8f 83       	std	Y+7, r24	; 0x07
    41b6:	98 87       	std	Y+8, r25	; 0x08
    41b8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <nrk_stack_check>
    41bc:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    41c0:	e0 91 1a 07 	lds	r30, 0x071A
    41c4:	f0 91 1b 07 	lds	r31, 0x071B
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	85 83       	std	Z+5, r24	; 0x05
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	90 a3       	std	Z+32, r25	; 0x20
    41d2:	87 8f       	std	Z+31, r24	; 0x1f
    41d4:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    41d8:	f8 2e       	mov	r15, r24
    41da:	29 81       	ldd	r18, Y+1	; 0x01
    41dc:	3a 81       	ldd	r19, Y+2	; 0x02
    41de:	4b 81       	ldd	r20, Y+3	; 0x03
    41e0:	5c 81       	ldd	r21, Y+4	; 0x04
    41e2:	6d 81       	ldd	r22, Y+5	; 0x05
    41e4:	7e 81       	ldd	r23, Y+6	; 0x06
    41e6:	8f 81       	ldd	r24, Y+7	; 0x07
    41e8:	98 85       	ldd	r25, Y+8	; 0x08
    41ea:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
    41ee:	e0 91 1a 07 	lds	r30, 0x071A
    41f2:	f0 91 1b 07 	lds	r31, 0x071B
    41f6:	0f 2d       	mov	r16, r15
    41f8:	11 27       	eor	r17, r17
    41fa:	80 0f       	add	r24, r16
    41fc:	91 1f       	adc	r25, r17
    41fe:	96 8b       	std	Z+22, r25	; 0x16
    4200:	85 8b       	std	Z+21, r24	; 0x15
    4202:	87 ef       	ldi	r24, 0xF7	; 247
    4204:	8f 15       	cp	r24, r15
    4206:	70 f0       	brcs	.+28     	; 0x4224 <nrk_wait+0x96>
    4208:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    420c:	0e 5f       	subi	r16, 0xFE	; 254
    420e:	1f 4f       	sbci	r17, 0xFF	; 255
    4210:	99 27       	eor	r25, r25
    4212:	80 17       	cp	r24, r16
    4214:	91 07       	cpc	r25, r17
    4216:	34 f0       	brlt	.+12     	; 0x4224 <nrk_wait+0x96>
    4218:	8f 2d       	mov	r24, r15
    421a:	8e 5f       	subi	r24, 0xFE	; 254
    421c:	80 93 b2 05 	sts	0x05B2, r24
    4220:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    4224:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    4228:	0e 94 bd 20 	call	0x417a	; 0x417a <_nrk_wait_for_scheduler>
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	28 96       	adiw	r28, 0x08	; 8
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	08 95       	ret

00004248 <nrk_wait_until>:
    4248:	8f 92       	push	r8
    424a:	9f 92       	push	r9
    424c:	af 92       	push	r10
    424e:	bf 92       	push	r11
    4250:	cf 92       	push	r12
    4252:	df 92       	push	r13
    4254:	ef 92       	push	r14
    4256:	ff 92       	push	r15
    4258:	0f 93       	push	r16
    425a:	1f 93       	push	r17
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	cd b7       	in	r28, 0x3d	; 61
    4262:	de b7       	in	r29, 0x3e	; 62
    4264:	60 97       	sbiw	r28, 0x10	; 16
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	29 87       	std	Y+9, r18	; 0x09
    4272:	3a 87       	std	Y+10, r19	; 0x0a
    4274:	4b 87       	std	Y+11, r20	; 0x0b
    4276:	5c 87       	std	Y+12, r21	; 0x0c
    4278:	6d 87       	std	Y+13, r22	; 0x0d
    427a:	7e 87       	std	Y+14, r23	; 0x0e
    427c:	8f 87       	std	Y+15, r24	; 0x0f
    427e:	98 8b       	std	Y+16, r25	; 0x10
    4280:	ce 01       	movw	r24, r28
    4282:	01 96       	adiw	r24, 0x01	; 1
    4284:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <nrk_time_get>
    4288:	89 80       	ldd	r8, Y+1	; 0x01
    428a:	9a 80       	ldd	r9, Y+2	; 0x02
    428c:	ab 80       	ldd	r10, Y+3	; 0x03
    428e:	bc 80       	ldd	r11, Y+4	; 0x04
    4290:	cd 80       	ldd	r12, Y+5	; 0x05
    4292:	de 80       	ldd	r13, Y+6	; 0x06
    4294:	ef 80       	ldd	r14, Y+7	; 0x07
    4296:	f8 84       	ldd	r15, Y+8	; 0x08
    4298:	09 85       	ldd	r16, Y+9	; 0x09
    429a:	1a 85       	ldd	r17, Y+10	; 0x0a
    429c:	2b 85       	ldd	r18, Y+11	; 0x0b
    429e:	3c 85       	ldd	r19, Y+12	; 0x0c
    42a0:	4d 85       	ldd	r20, Y+13	; 0x0d
    42a2:	5e 85       	ldd	r21, Y+14	; 0x0e
    42a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    42a6:	78 89       	ldd	r23, Y+16	; 0x10
    42a8:	ce 01       	movw	r24, r28
    42aa:	09 96       	adiw	r24, 0x09	; 9
    42ac:	0e 94 0a 23 	call	0x4614	; 0x4614 <nrk_time_sub>
    42b0:	88 23       	and	r24, r24
    42b2:	19 f4       	brne	.+6      	; 0x42ba <nrk_wait_until+0x72>
    42b4:	8f ef       	ldi	r24, 0xFF	; 255
    42b6:	9f ef       	ldi	r25, 0xFF	; 255
    42b8:	0c c0       	rjmp	.+24     	; 0x42d2 <nrk_wait_until+0x8a>
    42ba:	29 85       	ldd	r18, Y+9	; 0x09
    42bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    42be:	4b 85       	ldd	r20, Y+11	; 0x0b
    42c0:	5c 85       	ldd	r21, Y+12	; 0x0c
    42c2:	6d 85       	ldd	r22, Y+13	; 0x0d
    42c4:	7e 85       	ldd	r23, Y+14	; 0x0e
    42c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c8:	98 89       	ldd	r25, Y+16	; 0x10
    42ca:	0e 94 c7 20 	call	0x418e	; 0x418e <nrk_wait>
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	60 96       	adiw	r28, 0x10	; 16
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	f8 94       	cli
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	cd bf       	out	0x3d, r28	; 61
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	1f 91       	pop	r17
    42e4:	0f 91       	pop	r16
    42e6:	ff 90       	pop	r15
    42e8:	ef 90       	pop	r14
    42ea:	df 90       	pop	r13
    42ec:	cf 90       	pop	r12
    42ee:	bf 90       	pop	r11
    42f0:	af 90       	pop	r10
    42f2:	9f 90       	pop	r9
    42f4:	8f 90       	pop	r8
    42f6:	08 95       	ret

000042f8 <nrk_wait_until_nw>:
    42f8:	1f 93       	push	r17
    42fa:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    42fe:	e0 91 1a 07 	lds	r30, 0x071A
    4302:	f0 91 1b 07 	lds	r31, 0x071B
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	85 83       	std	Z+5, r24	; 0x05
    430a:	86 83       	std	Z+6, r24	; 0x06
    430c:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    4310:	18 2f       	mov	r17, r24
    4312:	88 3f       	cpi	r24, 0xF8	; 248
    4314:	80 f4       	brcc	.+32     	; 0x4336 <nrk_wait_until_nw+0x3e>
    4316:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    431a:	21 2f       	mov	r18, r17
    431c:	33 27       	eor	r19, r19
    431e:	2e 5f       	subi	r18, 0xFE	; 254
    4320:	3f 4f       	sbci	r19, 0xFF	; 255
    4322:	99 27       	eor	r25, r25
    4324:	82 17       	cp	r24, r18
    4326:	93 07       	cpc	r25, r19
    4328:	34 f0       	brlt	.+12     	; 0x4336 <nrk_wait_until_nw+0x3e>
    432a:	81 2f       	mov	r24, r17
    432c:	8e 5f       	subi	r24, 0xFE	; 254
    432e:	80 93 b2 05 	sts	0x05B2, r24
    4332:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    4336:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    433a:	0e 94 bd 20 	call	0x417a	; 0x417a <_nrk_wait_for_scheduler>
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	1f 91       	pop	r17
    4344:	08 95       	ret

00004346 <nrk_set_next_wakeup>:
    4346:	1f 93       	push	r17
    4348:	cf 93       	push	r28
    434a:	df 93       	push	r29
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	28 97       	sbiw	r28, 0x08	; 8
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	29 83       	std	Y+1, r18	; 0x01
    435e:	3a 83       	std	Y+2, r19	; 0x02
    4360:	4b 83       	std	Y+3, r20	; 0x03
    4362:	5c 83       	std	Y+4, r21	; 0x04
    4364:	6d 83       	std	Y+5, r22	; 0x05
    4366:	7e 83       	std	Y+6, r23	; 0x06
    4368:	8f 83       	std	Y+7, r24	; 0x07
    436a:	98 87       	std	Y+8, r25	; 0x08
    436c:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    4370:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    4374:	18 2f       	mov	r17, r24
    4376:	29 81       	ldd	r18, Y+1	; 0x01
    4378:	3a 81       	ldd	r19, Y+2	; 0x02
    437a:	4b 81       	ldd	r20, Y+3	; 0x03
    437c:	5c 81       	ldd	r21, Y+4	; 0x04
    437e:	6d 81       	ldd	r22, Y+5	; 0x05
    4380:	7e 81       	ldd	r23, Y+6	; 0x06
    4382:	8f 81       	ldd	r24, Y+7	; 0x07
    4384:	98 85       	ldd	r25, Y+8	; 0x08
    4386:	0e 94 29 24 	call	0x4852	; 0x4852 <_nrk_time_to_ticks>
    438a:	83 30       	cpi	r24, 0x03	; 3
    438c:	91 05       	cpc	r25, r1
    438e:	18 f4       	brcc	.+6      	; 0x4396 <nrk_set_next_wakeup+0x50>
    4390:	8f ef       	ldi	r24, 0xFF	; 255
    4392:	9f ef       	ldi	r25, 0xFF	; 255
    4394:	0c c0       	rjmp	.+24     	; 0x43ae <nrk_set_next_wakeup+0x68>
    4396:	e0 91 1a 07 	lds	r30, 0x071A
    439a:	f0 91 1b 07 	lds	r31, 0x071B
    439e:	81 0f       	add	r24, r17
    43a0:	91 1d       	adc	r25, r1
    43a2:	96 8b       	std	Z+22, r25	; 0x16
    43a4:	85 8b       	std	Z+21, r24	; 0x15
    43a6:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	28 96       	adiw	r28, 0x08	; 8
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	f8 94       	cli
    43b4:	de bf       	out	0x3e, r29	; 62
    43b6:	0f be       	out	0x3f, r0	; 63
    43b8:	cd bf       	out	0x3d, r28	; 61
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	1f 91       	pop	r17
    43c0:	08 95       	ret

000043c2 <nrk_wait_until_ticks>:
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	8c 01       	movw	r16, r24
    43c8:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    43cc:	e0 91 1a 07 	lds	r30, 0x071A
    43d0:	f0 91 1b 07 	lds	r31, 0x071B
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	85 83       	std	Z+5, r24	; 0x05
    43d8:	16 8b       	std	Z+22, r17	; 0x16
    43da:	05 8b       	std	Z+21, r16	; 0x15
    43dc:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    43e0:	08 2f       	mov	r16, r24
    43e2:	88 3f       	cpi	r24, 0xF8	; 248
    43e4:	80 f4       	brcc	.+32     	; 0x4406 <nrk_wait_until_ticks+0x44>
    43e6:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    43ea:	20 2f       	mov	r18, r16
    43ec:	33 27       	eor	r19, r19
    43ee:	2e 5f       	subi	r18, 0xFE	; 254
    43f0:	3f 4f       	sbci	r19, 0xFF	; 255
    43f2:	99 27       	eor	r25, r25
    43f4:	82 17       	cp	r24, r18
    43f6:	93 07       	cpc	r25, r19
    43f8:	34 f0       	brlt	.+12     	; 0x4406 <nrk_wait_until_ticks+0x44>
    43fa:	80 2f       	mov	r24, r16
    43fc:	8e 5f       	subi	r24, 0xFE	; 254
    43fe:	80 93 b2 05 	sts	0x05B2, r24
    4402:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    4406:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    440a:	0e 94 bd 20 	call	0x417a	; 0x417a <_nrk_wait_for_scheduler>
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	1f 91       	pop	r17
    4414:	0f 91       	pop	r16
    4416:	08 95       	ret

00004418 <nrk_wait_ticks>:
    4418:	ff 92       	push	r15
    441a:	0f 93       	push	r16
    441c:	1f 93       	push	r17
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	8c 01       	movw	r16, r24
    4424:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    4428:	e0 91 1a 07 	lds	r30, 0x071A
    442c:	f0 91 1b 07 	lds	r31, 0x071B
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	85 83       	std	Z+5, r24	; 0x05
    4434:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    4438:	f8 2e       	mov	r15, r24
    443a:	e0 91 1a 07 	lds	r30, 0x071A
    443e:	f0 91 1b 07 	lds	r31, 0x071B
    4442:	c8 2f       	mov	r28, r24
    4444:	dd 27       	eor	r29, r29
    4446:	0c 0f       	add	r16, r28
    4448:	1d 1f       	adc	r17, r29
    444a:	16 8b       	std	Z+22, r17	; 0x16
    444c:	05 8b       	std	Z+21, r16	; 0x15
    444e:	87 ef       	ldi	r24, 0xF7	; 247
    4450:	8f 15       	cp	r24, r15
    4452:	68 f0       	brcs	.+26     	; 0x446e <nrk_wait_ticks+0x56>
    4454:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    4458:	22 96       	adiw	r28, 0x02	; 2
    445a:	99 27       	eor	r25, r25
    445c:	8c 17       	cp	r24, r28
    445e:	9d 07       	cpc	r25, r29
    4460:	34 f0       	brlt	.+12     	; 0x446e <nrk_wait_ticks+0x56>
    4462:	8f 2d       	mov	r24, r15
    4464:	8e 5f       	subi	r24, 0xFE	; 254
    4466:	80 93 b2 05 	sts	0x05B2, r24
    446a:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    446e:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    4472:	0e 94 bd 20 	call	0x417a	; 0x417a <_nrk_wait_for_scheduler>
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	ff 90       	pop	r15
    4484:	08 95       	ret

00004486 <nrk_wait_until_next_n_periods>:
    4486:	1f 93       	push	r17
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	ec 01       	movw	r28, r24
    448e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <nrk_stack_check>
    4492:	20 97       	sbiw	r28, 0x00	; 0
    4494:	11 f4       	brne	.+4      	; 0x449a <nrk_wait_until_next_n_periods+0x14>
    4496:	c1 e0       	ldi	r28, 0x01	; 1
    4498:	d0 e0       	ldi	r29, 0x00	; 0
    449a:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    449e:	e0 91 1a 07 	lds	r30, 0x071A
    44a2:	f0 91 1b 07 	lds	r31, 0x071B
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	85 83       	std	Z+5, r24	; 0x05
    44aa:	d0 a3       	std	Z+32, r29	; 0x20
    44ac:	c7 8f       	std	Z+31, r28	; 0x1f
    44ae:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    44b2:	18 2f       	mov	r17, r24
    44b4:	88 3f       	cpi	r24, 0xF8	; 248
    44b6:	80 f4       	brcc	.+32     	; 0x44d8 <nrk_wait_until_next_n_periods+0x52>
    44b8:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    44bc:	21 2f       	mov	r18, r17
    44be:	33 27       	eor	r19, r19
    44c0:	2e 5f       	subi	r18, 0xFE	; 254
    44c2:	3f 4f       	sbci	r19, 0xFF	; 255
    44c4:	99 27       	eor	r25, r25
    44c6:	82 17       	cp	r24, r18
    44c8:	93 07       	cpc	r25, r19
    44ca:	34 f0       	brlt	.+12     	; 0x44d8 <nrk_wait_until_next_n_periods+0x52>
    44cc:	81 2f       	mov	r24, r17
    44ce:	8e 5f       	subi	r24, 0xFE	; 254
    44d0:	80 93 b2 05 	sts	0x05B2, r24
    44d4:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    44d8:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    44dc:	0e 94 bd 20 	call	0x417a	; 0x417a <_nrk_wait_for_scheduler>
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	1f 91       	pop	r17
    44ea:	08 95       	ret

000044ec <nrk_wait_until_next_period>:
    44ec:	1f 93       	push	r17
    44ee:	0e 94 8a 1c 	call	0x3914	; 0x3914 <nrk_stack_check>
    44f2:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    44f6:	e0 91 1a 07 	lds	r30, 0x071A
    44fa:	f0 91 1b 07 	lds	r31, 0x071B
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	90 a3       	std	Z+32, r25	; 0x20
    4504:	87 8f       	std	Z+31, r24	; 0x1f
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	85 83       	std	Z+5, r24	; 0x05
    450a:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    450e:	18 2f       	mov	r17, r24
    4510:	88 3f       	cpi	r24, 0xF8	; 248
    4512:	80 f4       	brcc	.+32     	; 0x4534 <nrk_wait_until_next_period+0x48>
    4514:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    4518:	21 2f       	mov	r18, r17
    451a:	33 27       	eor	r19, r19
    451c:	2e 5f       	subi	r18, 0xFE	; 254
    451e:	3f 4f       	sbci	r19, 0xFF	; 255
    4520:	99 27       	eor	r25, r25
    4522:	82 17       	cp	r24, r18
    4524:	93 07       	cpc	r25, r19
    4526:	34 f0       	brlt	.+12     	; 0x4534 <nrk_wait_until_next_period+0x48>
    4528:	81 2f       	mov	r24, r17
    452a:	8e 5f       	subi	r24, 0xFE	; 254
    452c:	80 93 b2 05 	sts	0x05B2, r24
    4530:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    4534:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    4538:	0e 94 bd 20 	call	0x417a	; 0x417a <_nrk_wait_for_scheduler>
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	1f 91       	pop	r17
    4542:	08 95       	ret

00004544 <nrk_terminate_task>:
    4544:	e0 91 1a 07 	lds	r30, 0x071A
    4548:	f0 91 1b 07 	lds	r31, 0x071B
    454c:	80 85       	ldd	r24, Z+8	; 0x08
    454e:	0e 94 64 20 	call	0x40c8	; 0x40c8 <nrk_rem_from_readyQ>
    4552:	e0 91 1a 07 	lds	r30, 0x071A
    4556:	f0 91 1b 07 	lds	r31, 0x071B
    455a:	84 e0       	ldi	r24, 0x04	; 4
    455c:	81 87       	std	Z+9, r24	; 0x09
    455e:	0e 94 76 22 	call	0x44ec	; 0x44ec <nrk_wait_until_next_period>
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	08 95       	ret

00004568 <nrk_activate_task>:
    4568:	ef 92       	push	r14
    456a:	ff 92       	push	r15
    456c:	0f 93       	push	r16
    456e:	1f 93       	push	r17
    4570:	cf 93       	push	r28
    4572:	df 93       	push	r29
    4574:	ec 01       	movw	r28, r24
    4576:	4b 81       	ldd	r20, Y+3	; 0x03
    4578:	5c 81       	ldd	r21, Y+4	; 0x04
    457a:	69 81       	ldd	r22, Y+1	; 0x01
    457c:	7a 81       	ldd	r23, Y+2	; 0x02
    457e:	8d 81       	ldd	r24, Y+5	; 0x05
    4580:	9e 81       	ldd	r25, Y+6	; 0x06
    4582:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <nrk_task_stk_init>
    4586:	bc 01       	movw	r22, r24
    4588:	8f 81       	ldd	r24, Y+7	; 0x07
    458a:	88 23       	and	r24, r24
    458c:	69 f0       	breq	.+26     	; 0x45a8 <nrk_activate_task+0x40>
    458e:	4b 81       	ldd	r20, Y+3	; 0x03
    4590:	5c 81       	ldd	r21, Y+4	; 0x04
    4592:	ee 24       	eor	r14, r14
    4594:	ff 24       	eor	r15, r15
    4596:	00 e0       	ldi	r16, 0x00	; 0
    4598:	10 e0       	ldi	r17, 0x00	; 0
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	ce 01       	movw	r24, r28
    45a0:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_TCB_init>
    45a4:	1f 82       	std	Y+7, r1	; 0x07
    45a6:	16 c0       	rjmp	.+44     	; 0x45d4 <nrk_activate_task+0x6c>
    45a8:	88 81       	ld	r24, Y
    45aa:	99 27       	eor	r25, r25
    45ac:	87 fd       	sbrc	r24, 7
    45ae:	90 95       	com	r25
    45b0:	fc 01       	movw	r30, r24
    45b2:	a5 e0       	ldi	r26, 0x05	; 5
    45b4:	ee 0f       	add	r30, r30
    45b6:	ff 1f       	adc	r31, r31
    45b8:	aa 95       	dec	r26
    45ba:	e1 f7       	brne	.-8      	; 0x45b4 <nrk_activate_task+0x4c>
    45bc:	e8 0f       	add	r30, r24
    45be:	f9 1f       	adc	r31, r25
    45c0:	e3 58       	subi	r30, 0x83	; 131
    45c2:	f9 4f       	sbci	r31, 0xF9	; 249
    45c4:	81 85       	ldd	r24, Z+9	; 0x09
    45c6:	83 30       	cpi	r24, 0x03	; 3
    45c8:	19 f0       	breq	.+6      	; 0x45d0 <nrk_activate_task+0x68>
    45ca:	8f ef       	ldi	r24, 0xFF	; 255
    45cc:	9f ef       	ldi	r25, 0xFF	; 255
    45ce:	1b c0       	rjmp	.+54     	; 0x4606 <nrk_activate_task+0x9e>
    45d0:	71 83       	std	Z+1, r23	; 0x01
    45d2:	60 83       	st	Z, r22
    45d4:	88 81       	ld	r24, Y
    45d6:	99 27       	eor	r25, r25
    45d8:	87 fd       	sbrc	r24, 7
    45da:	90 95       	com	r25
    45dc:	fc 01       	movw	r30, r24
    45de:	75 e0       	ldi	r23, 0x05	; 5
    45e0:	ee 0f       	add	r30, r30
    45e2:	ff 1f       	adc	r31, r31
    45e4:	7a 95       	dec	r23
    45e6:	e1 f7       	brne	.-8      	; 0x45e0 <nrk_activate_task+0x78>
    45e8:	e8 0f       	add	r30, r24
    45ea:	f9 1f       	adc	r31, r25
    45ec:	e3 58       	subi	r30, 0x83	; 131
    45ee:	f9 4f       	sbci	r31, 0xF9	; 249
    45f0:	85 89       	ldd	r24, Z+21	; 0x15
    45f2:	96 89       	ldd	r25, Z+22	; 0x16
    45f4:	89 2b       	or	r24, r25
    45f6:	29 f4       	brne	.+10     	; 0x4602 <nrk_activate_task+0x9a>
    45f8:	82 e0       	ldi	r24, 0x02	; 2
    45fa:	81 87       	std	Z+9, r24	; 0x09
    45fc:	88 81       	ld	r24, Y
    45fe:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <nrk_add_to_readyQ>
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	1f 91       	pop	r17
    460c:	0f 91       	pop	r16
    460e:	ff 90       	pop	r15
    4610:	ef 90       	pop	r14
    4612:	08 95       	ret

00004614 <nrk_time_sub>:
    4614:	8f 92       	push	r8
    4616:	9f 92       	push	r9
    4618:	af 92       	push	r10
    461a:	bf 92       	push	r11
    461c:	cf 92       	push	r12
    461e:	df 92       	push	r13
    4620:	ef 92       	push	r14
    4622:	ff 92       	push	r15
    4624:	0f 93       	push	r16
    4626:	1f 93       	push	r17
    4628:	cf 93       	push	r28
    462a:	df 93       	push	r29
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	60 97       	sbiw	r28, 0x10	; 16
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	fc 01       	movw	r30, r24
    463e:	09 83       	std	Y+1, r16	; 0x01
    4640:	1a 83       	std	Y+2, r17	; 0x02
    4642:	2b 83       	std	Y+3, r18	; 0x03
    4644:	3c 83       	std	Y+4, r19	; 0x04
    4646:	4d 83       	std	Y+5, r20	; 0x05
    4648:	5e 83       	std	Y+6, r21	; 0x06
    464a:	6f 83       	std	Y+7, r22	; 0x07
    464c:	78 87       	std	Y+8, r23	; 0x08
    464e:	89 86       	std	Y+9, r8	; 0x09
    4650:	9a 86       	std	Y+10, r9	; 0x0a
    4652:	ab 86       	std	Y+11, r10	; 0x0b
    4654:	bc 86       	std	Y+12, r11	; 0x0c
    4656:	cd 86       	std	Y+13, r12	; 0x0d
    4658:	de 86       	std	Y+14, r13	; 0x0e
    465a:	ef 86       	std	Y+15, r14	; 0x0f
    465c:	f8 8a       	std	Y+16, r15	; 0x10
    465e:	2d 81       	ldd	r18, Y+5	; 0x05
    4660:	3e 81       	ldd	r19, Y+6	; 0x06
    4662:	4f 81       	ldd	r20, Y+7	; 0x07
    4664:	58 85       	ldd	r21, Y+8	; 0x08
    4666:	89 81       	ldd	r24, Y+1	; 0x01
    4668:	9a 81       	ldd	r25, Y+2	; 0x02
    466a:	ab 81       	ldd	r26, Y+3	; 0x03
    466c:	bc 81       	ldd	r27, Y+4	; 0x04
    466e:	ad 84       	ldd	r10, Y+13	; 0x0d
    4670:	be 84       	ldd	r11, Y+14	; 0x0e
    4672:	cf 84       	ldd	r12, Y+15	; 0x0f
    4674:	d8 88       	ldd	r13, Y+16	; 0x10
    4676:	e9 84       	ldd	r14, Y+9	; 0x09
    4678:	fa 84       	ldd	r15, Y+10	; 0x0a
    467a:	0b 85       	ldd	r16, Y+11	; 0x0b
    467c:	1c 85       	ldd	r17, Y+12	; 0x0c
    467e:	8e 15       	cp	r24, r14
    4680:	9f 05       	cpc	r25, r15
    4682:	a0 07       	cpc	r26, r16
    4684:	b1 07       	cpc	r27, r17
    4686:	08 f4       	brcc	.+2      	; 0x468a <nrk_time_sub+0x76>
    4688:	3f c0       	rjmp	.+126    	; 0x4708 <nrk_time_sub+0xf4>
    468a:	e8 16       	cp	r14, r24
    468c:	f9 06       	cpc	r15, r25
    468e:	0a 07       	cpc	r16, r26
    4690:	1b 07       	cpc	r17, r27
    4692:	91 f4       	brne	.+36     	; 0x46b8 <nrk_time_sub+0xa4>
    4694:	2a 15       	cp	r18, r10
    4696:	3b 05       	cpc	r19, r11
    4698:	4c 05       	cpc	r20, r12
    469a:	5d 05       	cpc	r21, r13
    469c:	a8 f1       	brcs	.+106    	; 0x4708 <nrk_time_sub+0xf4>
    469e:	2a 19       	sub	r18, r10
    46a0:	3b 09       	sbc	r19, r11
    46a2:	4c 09       	sbc	r20, r12
    46a4:	5d 09       	sbc	r21, r13
    46a6:	24 83       	std	Z+4, r18	; 0x04
    46a8:	35 83       	std	Z+5, r19	; 0x05
    46aa:	46 83       	std	Z+6, r20	; 0x06
    46ac:	57 83       	std	Z+7, r21	; 0x07
    46ae:	10 82       	st	Z, r1
    46b0:	11 82       	std	Z+1, r1	; 0x01
    46b2:	12 82       	std	Z+2, r1	; 0x02
    46b4:	13 82       	std	Z+3, r1	; 0x03
    46b6:	1c c0       	rjmp	.+56     	; 0x46f0 <nrk_time_sub+0xdc>
    46b8:	2a 15       	cp	r18, r10
    46ba:	3b 05       	cpc	r19, r11
    46bc:	4c 05       	cpc	r20, r12
    46be:	5d 05       	cpc	r21, r13
    46c0:	d0 f4       	brcc	.+52     	; 0x46f6 <nrk_time_sub+0xe2>
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	a1 09       	sbc	r26, r1
    46c6:	b1 09       	sbc	r27, r1
    46c8:	8e 19       	sub	r24, r14
    46ca:	9f 09       	sbc	r25, r15
    46cc:	a0 0b       	sbc	r26, r16
    46ce:	b1 0b       	sbc	r27, r17
    46d0:	80 83       	st	Z, r24
    46d2:	91 83       	std	Z+1, r25	; 0x01
    46d4:	a2 83       	std	Z+2, r26	; 0x02
    46d6:	b3 83       	std	Z+3, r27	; 0x03
    46d8:	20 50       	subi	r18, 0x00	; 0
    46da:	36 43       	sbci	r19, 0x36	; 54
    46dc:	45 46       	sbci	r20, 0x65	; 101
    46de:	54 4c       	sbci	r21, 0xC4	; 196
    46e0:	2a 19       	sub	r18, r10
    46e2:	3b 09       	sbc	r19, r11
    46e4:	4c 09       	sbc	r20, r12
    46e6:	5d 09       	sbc	r21, r13
    46e8:	24 83       	std	Z+4, r18	; 0x04
    46ea:	35 83       	std	Z+5, r19	; 0x05
    46ec:	46 83       	std	Z+6, r20	; 0x06
    46ee:	57 83       	std	Z+7, r21	; 0x07
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	0b c0       	rjmp	.+22     	; 0x470c <nrk_time_sub+0xf8>
    46f6:	8e 19       	sub	r24, r14
    46f8:	9f 09       	sbc	r25, r15
    46fa:	a0 0b       	sbc	r26, r16
    46fc:	b1 0b       	sbc	r27, r17
    46fe:	80 83       	st	Z, r24
    4700:	91 83       	std	Z+1, r25	; 0x01
    4702:	a2 83       	std	Z+2, r26	; 0x02
    4704:	b3 83       	std	Z+3, r27	; 0x03
    4706:	ec cf       	rjmp	.-40     	; 0x46e0 <nrk_time_sub+0xcc>
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	60 96       	adiw	r28, 0x10	; 16
    470e:	0f b6       	in	r0, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	de bf       	out	0x3e, r29	; 62
    4714:	0f be       	out	0x3f, r0	; 63
    4716:	cd bf       	out	0x3d, r28	; 61
    4718:	df 91       	pop	r29
    471a:	cf 91       	pop	r28
    471c:	1f 91       	pop	r17
    471e:	0f 91       	pop	r16
    4720:	ff 90       	pop	r15
    4722:	ef 90       	pop	r14
    4724:	df 90       	pop	r13
    4726:	cf 90       	pop	r12
    4728:	bf 90       	pop	r11
    472a:	af 90       	pop	r10
    472c:	9f 90       	pop	r9
    472e:	8f 90       	pop	r8
    4730:	08 95       	ret

00004732 <nrk_time_compact_nanos>:
    4732:	fc 01       	movw	r30, r24
    4734:	13 c0       	rjmp	.+38     	; 0x475c <nrk_time_compact_nanos+0x2a>
    4736:	80 50       	subi	r24, 0x00	; 0
    4738:	9a 4c       	sbci	r25, 0xCA	; 202
    473a:	aa 49       	sbci	r26, 0x9A	; 154
    473c:	bb 43       	sbci	r27, 0x3B	; 59
    473e:	84 83       	std	Z+4, r24	; 0x04
    4740:	95 83       	std	Z+5, r25	; 0x05
    4742:	a6 83       	std	Z+6, r26	; 0x06
    4744:	b7 83       	std	Z+7, r27	; 0x07
    4746:	80 81       	ld	r24, Z
    4748:	91 81       	ldd	r25, Z+1	; 0x01
    474a:	a2 81       	ldd	r26, Z+2	; 0x02
    474c:	b3 81       	ldd	r27, Z+3	; 0x03
    474e:	01 96       	adiw	r24, 0x01	; 1
    4750:	a1 1d       	adc	r26, r1
    4752:	b1 1d       	adc	r27, r1
    4754:	80 83       	st	Z, r24
    4756:	91 83       	std	Z+1, r25	; 0x01
    4758:	a2 83       	std	Z+2, r26	; 0x02
    475a:	b3 83       	std	Z+3, r27	; 0x03
    475c:	84 81       	ldd	r24, Z+4	; 0x04
    475e:	95 81       	ldd	r25, Z+5	; 0x05
    4760:	a6 81       	ldd	r26, Z+6	; 0x06
    4762:	b7 81       	ldd	r27, Z+7	; 0x07
    4764:	80 30       	cpi	r24, 0x00	; 0
    4766:	2a ec       	ldi	r18, 0xCA	; 202
    4768:	92 07       	cpc	r25, r18
    476a:	2a e9       	ldi	r18, 0x9A	; 154
    476c:	a2 07       	cpc	r26, r18
    476e:	2b e3       	ldi	r18, 0x3B	; 59
    4770:	b2 07       	cpc	r27, r18
    4772:	08 f7       	brcc	.-62     	; 0x4736 <nrk_time_compact_nanos+0x4>
    4774:	08 95       	ret

00004776 <nrk_time_add>:
    4776:	8f 92       	push	r8
    4778:	9f 92       	push	r9
    477a:	af 92       	push	r10
    477c:	bf 92       	push	r11
    477e:	cf 92       	push	r12
    4780:	df 92       	push	r13
    4782:	ef 92       	push	r14
    4784:	ff 92       	push	r15
    4786:	0f 93       	push	r16
    4788:	1f 93       	push	r17
    478a:	cf 93       	push	r28
    478c:	df 93       	push	r29
    478e:	cd b7       	in	r28, 0x3d	; 61
    4790:	de b7       	in	r29, 0x3e	; 62
    4792:	60 97       	sbiw	r28, 0x10	; 16
    4794:	0f b6       	in	r0, 0x3f	; 63
    4796:	f8 94       	cli
    4798:	de bf       	out	0x3e, r29	; 62
    479a:	0f be       	out	0x3f, r0	; 63
    479c:	cd bf       	out	0x3d, r28	; 61
    479e:	fc 01       	movw	r30, r24
    47a0:	09 83       	std	Y+1, r16	; 0x01
    47a2:	1a 83       	std	Y+2, r17	; 0x02
    47a4:	2b 83       	std	Y+3, r18	; 0x03
    47a6:	3c 83       	std	Y+4, r19	; 0x04
    47a8:	4d 83       	std	Y+5, r20	; 0x05
    47aa:	5e 83       	std	Y+6, r21	; 0x06
    47ac:	6f 83       	std	Y+7, r22	; 0x07
    47ae:	78 87       	std	Y+8, r23	; 0x08
    47b0:	89 86       	std	Y+9, r8	; 0x09
    47b2:	9a 86       	std	Y+10, r9	; 0x0a
    47b4:	ab 86       	std	Y+11, r10	; 0x0b
    47b6:	bc 86       	std	Y+12, r11	; 0x0c
    47b8:	cd 86       	std	Y+13, r12	; 0x0d
    47ba:	de 86       	std	Y+14, r13	; 0x0e
    47bc:	ef 86       	std	Y+15, r14	; 0x0f
    47be:	f8 8a       	std	Y+16, r15	; 0x10
    47c0:	ad 80       	ldd	r10, Y+5	; 0x05
    47c2:	be 80       	ldd	r11, Y+6	; 0x06
    47c4:	cf 80       	ldd	r12, Y+7	; 0x07
    47c6:	d8 84       	ldd	r13, Y+8	; 0x08
    47c8:	ed 84       	ldd	r14, Y+13	; 0x0d
    47ca:	fe 84       	ldd	r15, Y+14	; 0x0e
    47cc:	0f 85       	ldd	r16, Y+15	; 0x0f
    47ce:	18 89       	ldd	r17, Y+16	; 0x10
    47d0:	89 85       	ldd	r24, Y+9	; 0x09
    47d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    47d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    47d8:	29 81       	ldd	r18, Y+1	; 0x01
    47da:	3a 81       	ldd	r19, Y+2	; 0x02
    47dc:	4b 81       	ldd	r20, Y+3	; 0x03
    47de:	5c 81       	ldd	r21, Y+4	; 0x04
    47e0:	82 0f       	add	r24, r18
    47e2:	93 1f       	adc	r25, r19
    47e4:	a4 1f       	adc	r26, r20
    47e6:	b5 1f       	adc	r27, r21
    47e8:	80 83       	st	Z, r24
    47ea:	91 83       	std	Z+1, r25	; 0x01
    47ec:	a2 83       	std	Z+2, r26	; 0x02
    47ee:	b3 83       	std	Z+3, r27	; 0x03
    47f0:	ea 0c       	add	r14, r10
    47f2:	fb 1c       	adc	r15, r11
    47f4:	0c 1d       	adc	r16, r12
    47f6:	1d 1d       	adc	r17, r13
    47f8:	e4 82       	std	Z+4, r14	; 0x04
    47fa:	f5 82       	std	Z+5, r15	; 0x05
    47fc:	06 83       	std	Z+6, r16	; 0x06
    47fe:	17 83       	std	Z+7, r17	; 0x07
    4800:	cf 01       	movw	r24, r30
    4802:	0e 94 99 23 	call	0x4732	; 0x4732 <nrk_time_compact_nanos>
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	60 96       	adiw	r28, 0x10	; 16
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	f8 94       	cli
    4810:	de bf       	out	0x3e, r29	; 62
    4812:	0f be       	out	0x3f, r0	; 63
    4814:	cd bf       	out	0x3d, r28	; 61
    4816:	df 91       	pop	r29
    4818:	cf 91       	pop	r28
    481a:	1f 91       	pop	r17
    481c:	0f 91       	pop	r16
    481e:	ff 90       	pop	r15
    4820:	ef 90       	pop	r14
    4822:	df 90       	pop	r13
    4824:	cf 90       	pop	r12
    4826:	bf 90       	pop	r11
    4828:	af 90       	pop	r10
    482a:	9f 90       	pop	r9
    482c:	8f 90       	pop	r8
    482e:	08 95       	ret

00004830 <nrk_time_set>:
    4830:	60 93 11 07 	sts	0x0711, r22
    4834:	70 93 12 07 	sts	0x0712, r23
    4838:	80 93 13 07 	sts	0x0713, r24
    483c:	90 93 14 07 	sts	0x0714, r25
    4840:	20 93 15 07 	sts	0x0715, r18
    4844:	30 93 16 07 	sts	0x0716, r19
    4848:	40 93 17 07 	sts	0x0717, r20
    484c:	50 93 18 07 	sts	0x0718, r21
    4850:	08 95       	ret

00004852 <_nrk_time_to_ticks>:
    4852:	8f 92       	push	r8
    4854:	9f 92       	push	r9
    4856:	af 92       	push	r10
    4858:	bf 92       	push	r11
    485a:	cf 92       	push	r12
    485c:	df 92       	push	r13
    485e:	ef 92       	push	r14
    4860:	ff 92       	push	r15
    4862:	0f 93       	push	r16
    4864:	1f 93       	push	r17
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	28 97       	sbiw	r28, 0x08	; 8
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	f8 94       	cli
    4874:	de bf       	out	0x3e, r29	; 62
    4876:	0f be       	out	0x3f, r0	; 63
    4878:	cd bf       	out	0x3d, r28	; 61
    487a:	29 83       	std	Y+1, r18	; 0x01
    487c:	3a 83       	std	Y+2, r19	; 0x02
    487e:	4b 83       	std	Y+3, r20	; 0x03
    4880:	5c 83       	std	Y+4, r21	; 0x04
    4882:	6d 83       	std	Y+5, r22	; 0x05
    4884:	7e 83       	std	Y+6, r23	; 0x06
    4886:	8f 83       	std	Y+7, r24	; 0x07
    4888:	98 87       	std	Y+8, r25	; 0x08
    488a:	8d 80       	ldd	r8, Y+5	; 0x05
    488c:	9e 80       	ldd	r9, Y+6	; 0x06
    488e:	af 80       	ldd	r10, Y+7	; 0x07
    4890:	b8 84       	ldd	r11, Y+8	; 0x08
    4892:	e9 80       	ldd	r14, Y+1	; 0x01
    4894:	fa 80       	ldd	r15, Y+2	; 0x02
    4896:	0b 81       	ldd	r16, Y+3	; 0x03
    4898:	1c 81       	ldd	r17, Y+4	; 0x04
    489a:	e1 14       	cp	r14, r1
    489c:	f1 04       	cpc	r15, r1
    489e:	01 05       	cpc	r16, r1
    48a0:	11 05       	cpc	r17, r1
    48a2:	01 f1       	breq	.+64     	; 0x48e4 <_nrk_time_to_ticks+0x92>
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	9a ec       	ldi	r25, 0xCA	; 202
    48a8:	aa e9       	ldi	r26, 0x9A	; 154
    48aa:	bb e3       	ldi	r27, 0x3B	; 59
    48ac:	88 0e       	add	r8, r24
    48ae:	99 1e       	adc	r9, r25
    48b0:	aa 1e       	adc	r10, r26
    48b2:	bb 1e       	adc	r11, r27
    48b4:	c5 01       	movw	r24, r10
    48b6:	b4 01       	movw	r22, r8
    48b8:	23 eb       	ldi	r18, 0xB3	; 179
    48ba:	36 ee       	ldi	r19, 0xE6	; 230
    48bc:	4e e0       	ldi	r20, 0x0E	; 14
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	0e 94 0e 32 	call	0x641c	; 0x641c <__udivmodsi4>
    48c4:	69 01       	movw	r12, r18
    48c6:	08 94       	sec
    48c8:	e1 08       	sbc	r14, r1
    48ca:	f1 08       	sbc	r15, r1
    48cc:	01 09       	sbc	r16, r1
    48ce:	11 09       	sbc	r17, r1
    48d0:	8a e0       	ldi	r24, 0x0A	; 10
    48d2:	ee 0c       	add	r14, r14
    48d4:	ff 1c       	adc	r15, r15
    48d6:	00 1f       	adc	r16, r16
    48d8:	11 1f       	adc	r17, r17
    48da:	8a 95       	dec	r24
    48dc:	d1 f7       	brne	.-12     	; 0x48d2 <_nrk_time_to_ticks+0x80>
    48de:	ce 0c       	add	r12, r14
    48e0:	df 1c       	adc	r13, r15
    48e2:	09 c0       	rjmp	.+18     	; 0x48f6 <_nrk_time_to_ticks+0xa4>
    48e4:	c5 01       	movw	r24, r10
    48e6:	b4 01       	movw	r22, r8
    48e8:	23 eb       	ldi	r18, 0xB3	; 179
    48ea:	36 ee       	ldi	r19, 0xE6	; 230
    48ec:	4e e0       	ldi	r20, 0x0E	; 14
    48ee:	50 e0       	ldi	r21, 0x00	; 0
    48f0:	0e 94 0e 32 	call	0x641c	; 0x641c <__udivmodsi4>
    48f4:	69 01       	movw	r12, r18
    48f6:	b6 01       	movw	r22, r12
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <_nrk_time_to_ticks+0xac>
    48fa:	60 50       	subi	r22, 0x00	; 0
    48fc:	74 40       	sbci	r23, 0x04	; 4
    48fe:	94 e0       	ldi	r25, 0x04	; 4
    4900:	61 30       	cpi	r22, 0x01	; 1
    4902:	79 07       	cpc	r23, r25
    4904:	d0 f7       	brcc	.-12     	; 0x48fa <_nrk_time_to_ticks+0xa8>
    4906:	88 27       	eor	r24, r24
    4908:	99 27       	eor	r25, r25
    490a:	23 eb       	ldi	r18, 0xB3	; 179
    490c:	36 ee       	ldi	r19, 0xE6	; 230
    490e:	4e e0       	ldi	r20, 0x0E	; 14
    4910:	50 e0       	ldi	r21, 0x00	; 0
    4912:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    4916:	67 5a       	subi	r22, 0xA7	; 167
    4918:	7c 48       	sbci	r23, 0x8C	; 140
    491a:	88 4f       	sbci	r24, 0xF8	; 248
    491c:	9f 4f       	sbci	r25, 0xFF	; 255
    491e:	68 15       	cp	r22, r8
    4920:	79 05       	cpc	r23, r9
    4922:	8a 05       	cpc	r24, r10
    4924:	9b 05       	cpc	r25, r11
    4926:	18 f4       	brcc	.+6      	; 0x492e <_nrk_time_to_ticks+0xdc>
    4928:	08 94       	sec
    492a:	c1 1c       	adc	r12, r1
    492c:	d1 1c       	adc	r13, r1
    492e:	c6 01       	movw	r24, r12
    4930:	28 96       	adiw	r28, 0x08	; 8
    4932:	0f b6       	in	r0, 0x3f	; 63
    4934:	f8 94       	cli
    4936:	de bf       	out	0x3e, r29	; 62
    4938:	0f be       	out	0x3f, r0	; 63
    493a:	cd bf       	out	0x3d, r28	; 61
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	ff 90       	pop	r15
    4946:	ef 90       	pop	r14
    4948:	df 90       	pop	r13
    494a:	cf 90       	pop	r12
    494c:	bf 90       	pop	r11
    494e:	af 90       	pop	r10
    4950:	9f 90       	pop	r9
    4952:	8f 90       	pop	r8
    4954:	08 95       	ret

00004956 <_nrk_ticks_to_time>:
    4956:	2f 92       	push	r2
    4958:	3f 92       	push	r3
    495a:	4f 92       	push	r4
    495c:	5f 92       	push	r5
    495e:	6f 92       	push	r6
    4960:	7f 92       	push	r7
    4962:	8f 92       	push	r8
    4964:	9f 92       	push	r9
    4966:	af 92       	push	r10
    4968:	bf 92       	push	r11
    496a:	cf 92       	push	r12
    496c:	df 92       	push	r13
    496e:	ef 92       	push	r14
    4970:	ff 92       	push	r15
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	cd b7       	in	r28, 0x3d	; 61
    497c:	de b7       	in	r29, 0x3e	; 62
    497e:	28 97       	sbiw	r28, 0x08	; 8
    4980:	0f b6       	in	r0, 0x3f	; 63
    4982:	f8 94       	cli
    4984:	de bf       	out	0x3e, r29	; 62
    4986:	0f be       	out	0x3f, r0	; 63
    4988:	cd bf       	out	0x3d, r28	; 61
    498a:	7b 01       	movw	r14, r22
    498c:	8c 01       	movw	r16, r24
    498e:	73 70       	andi	r23, 0x03	; 3
    4990:	80 70       	andi	r24, 0x00	; 0
    4992:	90 70       	andi	r25, 0x00	; 0
    4994:	23 eb       	ldi	r18, 0xB3	; 179
    4996:	36 ee       	ldi	r19, 0xE6	; 230
    4998:	4e e0       	ldi	r20, 0x0E	; 14
    499a:	50 e0       	ldi	r21, 0x00	; 0
    499c:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    49a0:	6d 83       	std	Y+5, r22	; 0x05
    49a2:	7e 83       	std	Y+6, r23	; 0x06
    49a4:	8f 83       	std	Y+7, r24	; 0x07
    49a6:	98 87       	std	Y+8, r25	; 0x08
    49a8:	9a e0       	ldi	r25, 0x0A	; 10
    49aa:	16 95       	lsr	r17
    49ac:	07 95       	ror	r16
    49ae:	f7 94       	ror	r15
    49b0:	e7 94       	ror	r14
    49b2:	9a 95       	dec	r25
    49b4:	d1 f7       	brne	.-12     	; 0x49aa <_nrk_ticks_to_time+0x54>
    49b6:	e9 82       	std	Y+1, r14	; 0x01
    49b8:	fa 82       	std	Y+2, r15	; 0x02
    49ba:	0b 83       	std	Y+3, r16	; 0x03
    49bc:	1c 83       	std	Y+4, r17	; 0x04
    49be:	98 85       	ldd	r25, Y+8	; 0x08
    49c0:	29 80       	ldd	r2, Y+1	; 0x01
    49c2:	3a 80       	ldd	r3, Y+2	; 0x02
    49c4:	4b 80       	ldd	r4, Y+3	; 0x03
    49c6:	5c 80       	ldd	r5, Y+4	; 0x04
    49c8:	6d 80       	ldd	r6, Y+5	; 0x05
    49ca:	7e 80       	ldd	r7, Y+6	; 0x06
    49cc:	8f 80       	ldd	r8, Y+7	; 0x07
    49ce:	22 2d       	mov	r18, r2
    49d0:	33 2d       	mov	r19, r3
    49d2:	44 2d       	mov	r20, r4
    49d4:	55 2d       	mov	r21, r5
    49d6:	66 2d       	mov	r22, r6
    49d8:	77 2d       	mov	r23, r7
    49da:	88 2d       	mov	r24, r8
    49dc:	28 96       	adiw	r28, 0x08	; 8
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	1f 91       	pop	r17
    49ee:	0f 91       	pop	r16
    49f0:	ff 90       	pop	r15
    49f2:	ef 90       	pop	r14
    49f4:	df 90       	pop	r13
    49f6:	cf 90       	pop	r12
    49f8:	bf 90       	pop	r11
    49fa:	af 90       	pop	r10
    49fc:	9f 90       	pop	r9
    49fe:	8f 90       	pop	r8
    4a00:	7f 90       	pop	r7
    4a02:	6f 90       	pop	r6
    4a04:	5f 90       	pop	r5
    4a06:	4f 90       	pop	r4
    4a08:	3f 90       	pop	r3
    4a0a:	2f 90       	pop	r2
    4a0c:	08 95       	ret

00004a0e <_nrk_time_to_ticks_long>:
    4a0e:	af 92       	push	r10
    4a10:	bf 92       	push	r11
    4a12:	cf 92       	push	r12
    4a14:	df 92       	push	r13
    4a16:	ef 92       	push	r14
    4a18:	ff 92       	push	r15
    4a1a:	0f 93       	push	r16
    4a1c:	1f 93       	push	r17
    4a1e:	cf 93       	push	r28
    4a20:	df 93       	push	r29
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    4a26:	28 97       	sbiw	r28, 0x08	; 8
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	de bf       	out	0x3e, r29	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	cd bf       	out	0x3d, r28	; 61
    4a32:	29 83       	std	Y+1, r18	; 0x01
    4a34:	3a 83       	std	Y+2, r19	; 0x02
    4a36:	4b 83       	std	Y+3, r20	; 0x03
    4a38:	5c 83       	std	Y+4, r21	; 0x04
    4a3a:	6d 83       	std	Y+5, r22	; 0x05
    4a3c:	7e 83       	std	Y+6, r23	; 0x06
    4a3e:	8f 83       	std	Y+7, r24	; 0x07
    4a40:	98 87       	std	Y+8, r25	; 0x08
    4a42:	ad 80       	ldd	r10, Y+5	; 0x05
    4a44:	be 80       	ldd	r11, Y+6	; 0x06
    4a46:	cf 80       	ldd	r12, Y+7	; 0x07
    4a48:	d8 84       	ldd	r13, Y+8	; 0x08
    4a4a:	e9 80       	ldd	r14, Y+1	; 0x01
    4a4c:	fa 80       	ldd	r15, Y+2	; 0x02
    4a4e:	0b 81       	ldd	r16, Y+3	; 0x03
    4a50:	1c 81       	ldd	r17, Y+4	; 0x04
    4a52:	e1 14       	cp	r14, r1
    4a54:	f1 04       	cpc	r15, r1
    4a56:	01 05       	cpc	r16, r1
    4a58:	11 05       	cpc	r17, r1
    4a5a:	09 f1       	breq	.+66     	; 0x4a9e <_nrk_time_to_ticks_long+0x90>
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	9a ec       	ldi	r25, 0xCA	; 202
    4a60:	aa e9       	ldi	r26, 0x9A	; 154
    4a62:	bb e3       	ldi	r27, 0x3B	; 59
    4a64:	a8 0e       	add	r10, r24
    4a66:	b9 1e       	adc	r11, r25
    4a68:	ca 1e       	adc	r12, r26
    4a6a:	db 1e       	adc	r13, r27
    4a6c:	c6 01       	movw	r24, r12
    4a6e:	b5 01       	movw	r22, r10
    4a70:	23 eb       	ldi	r18, 0xB3	; 179
    4a72:	36 ee       	ldi	r19, 0xE6	; 230
    4a74:	4e e0       	ldi	r20, 0x0E	; 14
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	0e 94 0e 32 	call	0x641c	; 0x641c <__udivmodsi4>
    4a7c:	08 94       	sec
    4a7e:	e1 08       	sbc	r14, r1
    4a80:	f1 08       	sbc	r15, r1
    4a82:	01 09       	sbc	r16, r1
    4a84:	11 09       	sbc	r17, r1
    4a86:	6a e0       	ldi	r22, 0x0A	; 10
    4a88:	ee 0c       	add	r14, r14
    4a8a:	ff 1c       	adc	r15, r15
    4a8c:	00 1f       	adc	r16, r16
    4a8e:	11 1f       	adc	r17, r17
    4a90:	6a 95       	dec	r22
    4a92:	d1 f7       	brne	.-12     	; 0x4a88 <_nrk_time_to_ticks_long+0x7a>
    4a94:	e2 0e       	add	r14, r18
    4a96:	f3 1e       	adc	r15, r19
    4a98:	04 1f       	adc	r16, r20
    4a9a:	15 1f       	adc	r17, r21
    4a9c:	0a c0       	rjmp	.+20     	; 0x4ab2 <_nrk_time_to_ticks_long+0xa4>
    4a9e:	c6 01       	movw	r24, r12
    4aa0:	b5 01       	movw	r22, r10
    4aa2:	23 eb       	ldi	r18, 0xB3	; 179
    4aa4:	36 ee       	ldi	r19, 0xE6	; 230
    4aa6:	4e e0       	ldi	r20, 0x0E	; 14
    4aa8:	50 e0       	ldi	r21, 0x00	; 0
    4aaa:	0e 94 0e 32 	call	0x641c	; 0x641c <__udivmodsi4>
    4aae:	79 01       	movw	r14, r18
    4ab0:	8a 01       	movw	r16, r20
    4ab2:	c8 01       	movw	r24, r16
    4ab4:	b7 01       	movw	r22, r14
    4ab6:	04 c0       	rjmp	.+8      	; 0x4ac0 <_nrk_time_to_ticks_long+0xb2>
    4ab8:	60 50       	subi	r22, 0x00	; 0
    4aba:	74 40       	sbci	r23, 0x04	; 4
    4abc:	80 40       	sbci	r24, 0x00	; 0
    4abe:	90 40       	sbci	r25, 0x00	; 0
    4ac0:	61 30       	cpi	r22, 0x01	; 1
    4ac2:	a4 e0       	ldi	r26, 0x04	; 4
    4ac4:	7a 07       	cpc	r23, r26
    4ac6:	a0 e0       	ldi	r26, 0x00	; 0
    4ac8:	8a 07       	cpc	r24, r26
    4aca:	a0 e0       	ldi	r26, 0x00	; 0
    4acc:	9a 07       	cpc	r25, r26
    4ace:	a0 f7       	brcc	.-24     	; 0x4ab8 <_nrk_time_to_ticks_long+0xaa>
    4ad0:	23 eb       	ldi	r18, 0xB3	; 179
    4ad2:	36 ee       	ldi	r19, 0xE6	; 230
    4ad4:	4e e0       	ldi	r20, 0x0E	; 14
    4ad6:	50 e0       	ldi	r21, 0x00	; 0
    4ad8:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    4adc:	67 5a       	subi	r22, 0xA7	; 167
    4ade:	7c 48       	sbci	r23, 0x8C	; 140
    4ae0:	88 4f       	sbci	r24, 0xF8	; 248
    4ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae4:	6a 15       	cp	r22, r10
    4ae6:	7b 05       	cpc	r23, r11
    4ae8:	8c 05       	cpc	r24, r12
    4aea:	9d 05       	cpc	r25, r13
    4aec:	28 f4       	brcc	.+10     	; 0x4af8 <_nrk_time_to_ticks_long+0xea>
    4aee:	08 94       	sec
    4af0:	e1 1c       	adc	r14, r1
    4af2:	f1 1c       	adc	r15, r1
    4af4:	01 1d       	adc	r16, r1
    4af6:	11 1d       	adc	r17, r1
    4af8:	c8 01       	movw	r24, r16
    4afa:	b7 01       	movw	r22, r14
    4afc:	28 96       	adiw	r28, 0x08	; 8
    4afe:	0f b6       	in	r0, 0x3f	; 63
    4b00:	f8 94       	cli
    4b02:	de bf       	out	0x3e, r29	; 62
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	cd bf       	out	0x3d, r28	; 61
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	1f 91       	pop	r17
    4b0e:	0f 91       	pop	r16
    4b10:	ff 90       	pop	r15
    4b12:	ef 90       	pop	r14
    4b14:	df 90       	pop	r13
    4b16:	cf 90       	pop	r12
    4b18:	bf 90       	pop	r11
    4b1a:	af 90       	pop	r10
    4b1c:	08 95       	ret

00004b1e <nrk_time_get>:
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
    4b1e:	ef 92       	push	r14
    4b20:	ff 92       	push	r15
    4b22:	0f 93       	push	r16
    4b24:	1f 93       	push	r17
    4b26:	cf 93       	push	r28
    4b28:	df 93       	push	r29
    4b2a:	ec 01       	movw	r28, r24
        NOP();
    4b2c:	80 91 11 07 	lds	r24, 0x0711
    4b30:	90 91 12 07 	lds	r25, 0x0712
    4b34:	a0 91 13 07 	lds	r26, 0x0713
    4b38:	b0 91 14 07 	lds	r27, 0x0714
    4b3c:	88 83       	st	Y, r24
    4b3e:	99 83       	std	Y+1, r25	; 0x01
    4b40:	aa 83       	std	Y+2, r26	; 0x02
    4b42:	bb 83       	std	Y+3, r27	; 0x03
        NOP();
    4b44:	e0 90 15 07 	lds	r14, 0x0715
    4b48:	f0 90 16 07 	lds	r15, 0x0716
    4b4c:	00 91 17 07 	lds	r16, 0x0717
    4b50:	10 91 18 07 	lds	r17, 0x0718
    4b54:	ec 82       	std	Y+4, r14	; 0x04
    4b56:	fd 82       	std	Y+5, r15	; 0x05
    4b58:	0e 83       	std	Y+6, r16	; 0x06
    4b5a:	1f 83       	std	Y+7, r17	; 0x07
        NOP();
    } while (--timeout);
    4b5c:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    4b60:	99 27       	eor	r25, r25
    4b62:	aa 27       	eor	r26, r26
    4b64:	bb 27       	eor	r27, r27
    4b66:	bc 01       	movw	r22, r24
    4b68:	cd 01       	movw	r24, r26
    4b6a:	23 eb       	ldi	r18, 0xB3	; 179
    4b6c:	36 ee       	ldi	r19, 0xE6	; 230
    4b6e:	4e e0       	ldi	r20, 0x0E	; 14
    4b70:	50 e0       	ldi	r21, 0x00	; 0
    4b72:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    4b76:	e6 0e       	add	r14, r22
    4b78:	f7 1e       	adc	r15, r23
    4b7a:	08 1f       	adc	r16, r24
    4b7c:	19 1f       	adc	r17, r25
    4b7e:	ec 82       	std	Y+4, r14	; 0x04
    4b80:	fd 82       	std	Y+5, r15	; 0x05
    4b82:	0e 83       	std	Y+6, r16	; 0x06
    4b84:	1f 83       	std	Y+7, r17	; 0x07
    4b86:	13 c0       	rjmp	.+38     	; 0x4bae <nrk_time_get+0x90>

} // halWait
    4b88:	80 50       	subi	r24, 0x00	; 0
    4b8a:	9a 4c       	sbci	r25, 0xCA	; 202
    4b8c:	aa 49       	sbci	r26, 0x9A	; 154
    4b8e:	bb 43       	sbci	r27, 0x3B	; 59
    4b90:	8c 83       	std	Y+4, r24	; 0x04
    4b92:	9d 83       	std	Y+5, r25	; 0x05
    4b94:	ae 83       	std	Y+6, r26	; 0x06
    4b96:	bf 83       	std	Y+7, r27	; 0x07
    4b98:	88 81       	ld	r24, Y
    4b9a:	99 81       	ldd	r25, Y+1	; 0x01
    4b9c:	aa 81       	ldd	r26, Y+2	; 0x02
    4b9e:	bb 81       	ldd	r27, Y+3	; 0x03
    4ba0:	01 96       	adiw	r24, 0x01	; 1
    4ba2:	a1 1d       	adc	r26, r1
    4ba4:	b1 1d       	adc	r27, r1
    4ba6:	88 83       	st	Y, r24
    4ba8:	99 83       	std	Y+1, r25	; 0x01
    4baa:	aa 83       	std	Y+2, r26	; 0x02
    4bac:	bb 83       	std	Y+3, r27	; 0x03
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);

    4bae:	8c 81       	ldd	r24, Y+4	; 0x04
    4bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    4bb2:	ae 81       	ldd	r26, Y+6	; 0x06
    4bb4:	bf 81       	ldd	r27, Y+7	; 0x07
    4bb6:	80 30       	cpi	r24, 0x00	; 0
    4bb8:	2a ec       	ldi	r18, 0xCA	; 202
    4bba:	92 07       	cpc	r25, r18
    4bbc:	2a e9       	ldi	r18, 0x9A	; 154
    4bbe:	a2 07       	cpc	r26, r18
    4bc0:	2b e3       	ldi	r18, 0x3B	; 59
    4bc2:	b2 07       	cpc	r27, r18
    4bc4:	08 f7       	brcc	.-62     	; 0x4b88 <nrk_time_get+0x6a>
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	1f 91       	pop	r17
    4bcc:	0f 91       	pop	r16
    4bce:	ff 90       	pop	r15
    4bd0:	ef 90       	pop	r14
    4bd2:	08 95       	ret

00004bd4 <nrk_idle_task>:
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
    4bd4:	0e 94 8a 1c 	call	0x3914	; 0x3914 <nrk_stack_check>
        NOP();
        NOP();
    4bd8:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <_nrk_get_next_wakeup>
    4bdc:	8b 30       	cpi	r24, 0x0B	; 11
    4bde:	30 f4       	brcc	.+12     	; 0x4bec <nrk_idle_task+0x18>
        NOP();
    } while (--timeout);
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	80 93 0e 07 	sts	0x070E, r24

    4be6:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <nrk_idle>
    4bea:	09 c0       	rjmp	.+18     	; 0x4bfe <nrk_idle_task+0x2a>
} // halWait
    4bec:	8a e0       	ldi	r24, 0x0A	; 10
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	0e 94 80 29 	call	0x5300	; 0x5300 <nrk_spin_wait_us>
    4bf4:	82 e0       	ldi	r24, 0x02	; 2
    4bf6:	80 93 0e 07 	sts	0x070E, r24
    4bfa:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <nrk_sleep>
    4bfe:	80 91 bd 05 	lds	r24, 0x05BD
    4c02:	85 35       	cpi	r24, 0x55	; 85
    4c04:	19 f0       	breq	.+6      	; 0x4c0c <nrk_idle_task+0x38>
    4c06:	88 e0       	ldi	r24, 0x08	; 8
    4c08:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    4c0c:	80 91 fe 20 	lds	r24, 0x20FE
    4c10:	85 35       	cpi	r24, 0x55	; 85
    4c12:	01 f3       	breq	.-64     	; 0x4bd4 <nrk_idle_task>
    4c14:	88 e0       	ldi	r24, 0x08	; 8
    4c16:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    4c1a:	dc cf       	rjmp	.-72     	; 0x4bd4 <nrk_idle_task>

00004c1c <_nrk_scheduler>:
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);

    4c1c:	8f 92       	push	r8
    4c1e:	9f 92       	push	r9
    4c20:	af 92       	push	r10
    4c22:	bf 92       	push	r11
    4c24:	cf 92       	push	r12
    4c26:	df 92       	push	r13
    4c28:	ef 92       	push	r14
    4c2a:	ff 92       	push	r15
    4c2c:	0f 93       	push	r16
    4c2e:	1f 93       	push	r17
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
} // halWait
    4c34:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    4c38:	0e 94 8e 29 	call	0x531c	; 0x531c <_nrk_high_speed_timer_reset>
    4c3c:	0e 94 96 29 	call	0x532c	; 0x532c <_nrk_high_speed_timer_get>
    4c40:	4c 01       	movw	r8, r24
    4c42:	8a ef       	ldi	r24, 0xFA	; 250
    4c44:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    4c48:	60 91 b2 05 	lds	r22, 0x05B2
    4c4c:	77 27       	eor	r23, r23
    4c4e:	88 27       	eor	r24, r24
    4c50:	99 27       	eor	r25, r25
    4c52:	23 eb       	ldi	r18, 0xB3	; 179
    4c54:	36 ee       	ldi	r19, 0xE6	; 230
    4c56:	4e e0       	ldi	r20, 0x0E	; 14
    4c58:	50 e0       	ldi	r21, 0x00	; 0
    4c5a:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    4c5e:	7b 01       	movw	r14, r22
    4c60:	8c 01       	movw	r16, r24
    4c62:	80 91 15 07 	lds	r24, 0x0715
    4c66:	90 91 16 07 	lds	r25, 0x0716
    4c6a:	a0 91 17 07 	lds	r26, 0x0717
    4c6e:	b0 91 18 07 	lds	r27, 0x0718
    4c72:	e8 0e       	add	r14, r24
    4c74:	f9 1e       	adc	r15, r25
    4c76:	0a 1f       	adc	r16, r26
    4c78:	1b 1f       	adc	r17, r27
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	b7 01       	movw	r22, r14
    4c7e:	0e 94 0e 32 	call	0x641c	; 0x641c <__udivmodsi4>
    4c82:	a8 01       	movw	r20, r16
    4c84:	97 01       	movw	r18, r14
    4c86:	26 1b       	sub	r18, r22
    4c88:	37 0b       	sbc	r19, r23
    4c8a:	48 0b       	sbc	r20, r24
    4c8c:	59 0b       	sbc	r21, r25
    4c8e:	80 91 11 07 	lds	r24, 0x0711
    4c92:	90 91 12 07 	lds	r25, 0x0712
    4c96:	a0 91 13 07 	lds	r26, 0x0713
    4c9a:	b0 91 14 07 	lds	r27, 0x0714
    4c9e:	1b c0       	rjmp	.+54     	; 0x4cd6 <_nrk_scheduler+0xba>
    4ca0:	e1 2c       	mov	r14, r1
    4ca2:	66 e3       	ldi	r22, 0x36	; 54
    4ca4:	f6 2e       	mov	r15, r22
    4ca6:	65 e6       	ldi	r22, 0x65	; 101
    4ca8:	06 2f       	mov	r16, r22
    4caa:	64 ec       	ldi	r22, 0xC4	; 196
    4cac:	16 2f       	mov	r17, r22
    4cae:	e2 0e       	add	r14, r18
    4cb0:	f3 1e       	adc	r15, r19
    4cb2:	04 1f       	adc	r16, r20
    4cb4:	15 1f       	adc	r17, r21
    4cb6:	c8 01       	movw	r24, r16
    4cb8:	b7 01       	movw	r22, r14
    4cba:	23 eb       	ldi	r18, 0xB3	; 179
    4cbc:	36 ee       	ldi	r19, 0xE6	; 230
    4cbe:	4e e0       	ldi	r20, 0x0E	; 14
    4cc0:	50 e0       	ldi	r21, 0x00	; 0
    4cc2:	0e 94 0e 32 	call	0x641c	; 0x641c <__udivmodsi4>
    4cc6:	a8 01       	movw	r20, r16
    4cc8:	97 01       	movw	r18, r14
    4cca:	26 1b       	sub	r18, r22
    4ccc:	37 0b       	sbc	r19, r23
    4cce:	48 0b       	sbc	r20, r24
    4cd0:	59 0b       	sbc	r21, r25
    4cd2:	d6 01       	movw	r26, r12
    4cd4:	c5 01       	movw	r24, r10
    4cd6:	5c 01       	movw	r10, r24
    4cd8:	6d 01       	movw	r12, r26
    4cda:	08 94       	sec
    4cdc:	a1 1c       	adc	r10, r1
    4cde:	b1 1c       	adc	r11, r1
    4ce0:	c1 1c       	adc	r12, r1
    4ce2:	d1 1c       	adc	r13, r1
    4ce4:	20 30       	cpi	r18, 0x00	; 0
    4ce6:	6a ec       	ldi	r22, 0xCA	; 202
    4ce8:	36 07       	cpc	r19, r22
    4cea:	6a e9       	ldi	r22, 0x9A	; 154
    4cec:	46 07       	cpc	r20, r22
    4cee:	6b e3       	ldi	r22, 0x3B	; 59
    4cf0:	56 07       	cpc	r21, r22
    4cf2:	b0 f6       	brcc	.-84     	; 0x4ca0 <_nrk_scheduler+0x84>
    4cf4:	80 93 11 07 	sts	0x0711, r24
    4cf8:	90 93 12 07 	sts	0x0712, r25
    4cfc:	a0 93 13 07 	sts	0x0713, r26
    4d00:	b0 93 14 07 	sts	0x0714, r27
    4d04:	20 93 15 07 	sts	0x0715, r18
    4d08:	30 93 16 07 	sts	0x0716, r19
    4d0c:	40 93 17 07 	sts	0x0717, r20
    4d10:	50 93 18 07 	sts	0x0718, r21
    4d14:	e0 91 1a 07 	lds	r30, 0x071A
    4d18:	f0 91 1b 07 	lds	r31, 0x071B
    4d1c:	85 81       	ldd	r24, Z+5	; 0x05
    4d1e:	88 23       	and	r24, r24
    4d20:	19 f1       	breq	.+70     	; 0x4d68 <_nrk_scheduler+0x14c>
    4d22:	81 85       	ldd	r24, Z+9	; 0x09
    4d24:	84 30       	cpi	r24, 0x04	; 4
    4d26:	01 f1       	breq	.+64     	; 0x4d68 <_nrk_scheduler+0x14c>
    4d28:	87 81       	ldd	r24, Z+7	; 0x07
    4d2a:	82 30       	cpi	r24, 0x02	; 2
    4d2c:	29 f0       	breq	.+10     	; 0x4d38 <_nrk_scheduler+0x11c>
    4d2e:	88 23       	and	r24, r24
    4d30:	41 f0       	breq	.+16     	; 0x4d42 <_nrk_scheduler+0x126>
    4d32:	86 81       	ldd	r24, Z+6	; 0x06
    4d34:	88 23       	and	r24, r24
    4d36:	11 f4       	brne	.+4      	; 0x4d3c <_nrk_scheduler+0x120>
    4d38:	85 e0       	ldi	r24, 0x05	; 5
    4d3a:	01 c0       	rjmp	.+2      	; 0x4d3e <_nrk_scheduler+0x122>
    4d3c:	83 e0       	ldi	r24, 0x03	; 3
    4d3e:	81 87       	std	Z+9, r24	; 0x09
    4d40:	0c c0       	rjmp	.+24     	; 0x4d5a <_nrk_scheduler+0x13e>
    4d42:	83 e0       	ldi	r24, 0x03	; 3
    4d44:	81 87       	std	Z+9, r24	; 0x09
    4d46:	e0 91 1a 07 	lds	r30, 0x071A
    4d4a:	f0 91 1b 07 	lds	r31, 0x071B
    4d4e:	17 82       	std	Z+7, r1	; 0x07
    4d50:	e0 91 1a 07 	lds	r30, 0x071A
    4d54:	f0 91 1b 07 	lds	r31, 0x071B
    4d58:	16 82       	std	Z+6, r1	; 0x06
    4d5a:	e0 91 1a 07 	lds	r30, 0x071A
    4d5e:	f0 91 1b 07 	lds	r31, 0x071B
    4d62:	80 85       	ldd	r24, Z+8	; 0x08
    4d64:	0e 94 64 20 	call	0x40c8	; 0x40c8 <nrk_rem_from_readyQ>
    4d68:	e0 91 1a 07 	lds	r30, 0x071A
    4d6c:	f0 91 1b 07 	lds	r31, 0x071B
    4d70:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d72:	96 8d       	ldd	r25, Z+30	; 0x1e
    4d74:	89 2b       	or	r24, r25
    4d76:	91 f1       	breq	.+100    	; 0x4ddc <_nrk_scheduler+0x1c0>
    4d78:	60 85       	ldd	r22, Z+8	; 0x08
    4d7a:	66 23       	and	r22, r22
    4d7c:	79 f1       	breq	.+94     	; 0x4ddc <_nrk_scheduler+0x1c0>
    4d7e:	81 85       	ldd	r24, Z+9	; 0x09
    4d80:	84 30       	cpi	r24, 0x04	; 4
    4d82:	61 f1       	breq	.+88     	; 0x4ddc <_nrk_scheduler+0x1c0>
    4d84:	21 8d       	ldd	r18, Z+25	; 0x19
    4d86:	32 8d       	ldd	r19, Z+26	; 0x1a
    4d88:	80 91 b2 05 	lds	r24, 0x05B2
    4d8c:	99 27       	eor	r25, r25
    4d8e:	28 17       	cp	r18, r24
    4d90:	39 07       	cpc	r19, r25
    4d92:	50 f4       	brcc	.+20     	; 0x4da8 <_nrk_scheduler+0x18c>
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    4d9a:	e0 91 1a 07 	lds	r30, 0x071A
    4d9e:	f0 91 1b 07 	lds	r31, 0x071B
    4da2:	12 8e       	std	Z+26, r1	; 0x1a
    4da4:	11 8e       	std	Z+25, r1	; 0x19
    4da6:	04 c0       	rjmp	.+8      	; 0x4db0 <_nrk_scheduler+0x194>
    4da8:	28 1b       	sub	r18, r24
    4daa:	39 0b       	sbc	r19, r25
    4dac:	32 8f       	std	Z+26, r19	; 0x1a
    4dae:	21 8f       	std	Z+25, r18	; 0x19
    4db0:	e0 91 1a 07 	lds	r30, 0x071A
    4db4:	f0 91 1b 07 	lds	r31, 0x071B
    4db8:	10 85       	ldd	r17, Z+8	; 0x08
    4dba:	81 8d       	ldd	r24, Z+25	; 0x19
    4dbc:	92 8d       	ldd	r25, Z+26	; 0x1a
    4dbe:	89 2b       	or	r24, r25
    4dc0:	69 f4       	brne	.+26     	; 0x4ddc <_nrk_scheduler+0x1c0>
    4dc2:	61 2f       	mov	r22, r17
    4dc4:	83 e0       	ldi	r24, 0x03	; 3
    4dc6:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    4dca:	e0 91 1a 07 	lds	r30, 0x071A
    4dce:	f0 91 1b 07 	lds	r31, 0x071B
    4dd2:	83 e0       	ldi	r24, 0x03	; 3
    4dd4:	81 87       	std	Z+9, r24	; 0x09
    4dd6:	81 2f       	mov	r24, r17
    4dd8:	0e 94 64 20 	call	0x40c8	; 0x40c8 <nrk_rem_from_readyQ>
    4ddc:	cd e7       	ldi	r28, 0x7D	; 125
    4dde:	d6 e0       	ldi	r29, 0x06	; 6
    4de0:	00 e6       	ldi	r16, 0x60	; 96
    4de2:	1a ee       	ldi	r17, 0xEA	; 234
    4de4:	cc 24       	eor	r12, r12
    4de6:	dd 24       	eor	r13, r13
    4de8:	4c 2d       	mov	r20, r12
    4dea:	88 85       	ldd	r24, Y+8	; 0x08
    4dec:	8f 3f       	cpi	r24, 0xFF	; 255
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <_nrk_scheduler+0x1d6>
    4df0:	89 c0       	rjmp	.+274    	; 0x4f04 <_nrk_scheduler+0x2e8>
    4df2:	1d 82       	std	Y+5, r1	; 0x05
    4df4:	88 23       	and	r24, r24
    4df6:	91 f1       	breq	.+100    	; 0x4e5c <_nrk_scheduler+0x240>
    4df8:	89 85       	ldd	r24, Y+9	; 0x09
    4dfa:	84 30       	cpi	r24, 0x04	; 4
    4dfc:	79 f1       	breq	.+94     	; 0x4e5c <_nrk_scheduler+0x240>
    4dfe:	2d 89       	ldd	r18, Y+21	; 0x15
    4e00:	3e 89       	ldd	r19, Y+22	; 0x16
    4e02:	80 91 b2 05 	lds	r24, 0x05B2
    4e06:	99 27       	eor	r25, r25
    4e08:	28 17       	cp	r18, r24
    4e0a:	39 07       	cpc	r19, r25
    4e0c:	28 f0       	brcs	.+10     	; 0x4e18 <_nrk_scheduler+0x1fc>
    4e0e:	28 1b       	sub	r18, r24
    4e10:	39 0b       	sbc	r19, r25
    4e12:	3e 8b       	std	Y+22, r19	; 0x16
    4e14:	2d 8b       	std	Y+21, r18	; 0x15
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <_nrk_scheduler+0x200>
    4e18:	1e 8a       	std	Y+22, r1	; 0x16
    4e1a:	1d 8a       	std	Y+21, r1	; 0x15
    4e1c:	2f 89       	ldd	r18, Y+23	; 0x17
    4e1e:	38 8d       	ldd	r19, Y+24	; 0x18
    4e20:	28 17       	cp	r18, r24
    4e22:	39 07       	cpc	r19, r25
    4e24:	28 f0       	brcs	.+10     	; 0x4e30 <_nrk_scheduler+0x214>
    4e26:	28 1b       	sub	r18, r24
    4e28:	39 0b       	sbc	r19, r25
    4e2a:	38 8f       	std	Y+24, r19	; 0x18
    4e2c:	2f 8b       	std	Y+23, r18	; 0x17
    4e2e:	0e c0       	rjmp	.+28     	; 0x4e4c <_nrk_scheduler+0x230>
    4e30:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4e32:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4e34:	86 17       	cp	r24, r22
    4e36:	97 07       	cpc	r25, r23
    4e38:	28 f4       	brcc	.+10     	; 0x4e44 <_nrk_scheduler+0x228>
    4e3a:	68 1b       	sub	r22, r24
    4e3c:	79 0b       	sbc	r23, r25
    4e3e:	78 8f       	std	Y+24, r23	; 0x18
    4e40:	6f 8b       	std	Y+23, r22	; 0x17
    4e42:	04 c0       	rjmp	.+8      	; 0x4e4c <_nrk_scheduler+0x230>
    4e44:	0e 94 e7 31 	call	0x63ce	; 0x63ce <__udivmodhi4>
    4e48:	98 8f       	std	Y+24, r25	; 0x18
    4e4a:	8f 8b       	std	Y+23, r24	; 0x17
    4e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e50:	89 2b       	or	r24, r25
    4e52:	21 f4       	brne	.+8      	; 0x4e5c <_nrk_scheduler+0x240>
    4e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e58:	98 8f       	std	Y+24, r25	; 0x18
    4e5a:	8f 8b       	std	Y+23, r24	; 0x17
    4e5c:	89 85       	ldd	r24, Y+9	; 0x09
    4e5e:	83 30       	cpi	r24, 0x03	; 3
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <_nrk_scheduler+0x248>
    4e62:	50 c0       	rjmp	.+160    	; 0x4f04 <_nrk_scheduler+0x2e8>
    4e64:	8d 89       	ldd	r24, Y+21	; 0x15
    4e66:	9e 89       	ldd	r25, Y+22	; 0x16
    4e68:	89 2b       	or	r24, r25
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <_nrk_scheduler+0x252>
    4e6c:	43 c0       	rjmp	.+134    	; 0x4ef4 <_nrk_scheduler+0x2d8>
    4e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e70:	88 23       	and	r24, r24
    4e72:	a1 f0       	breq	.+40     	; 0x4e9c <_nrk_scheduler+0x280>
    4e74:	8e 81       	ldd	r24, Y+6	; 0x06
    4e76:	88 23       	and	r24, r24
    4e78:	89 f0       	breq	.+34     	; 0x4e9c <_nrk_scheduler+0x280>
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	a0 e0       	ldi	r26, 0x00	; 0
    4e80:	b0 e0       	ldi	r27, 0x00	; 0
    4e82:	00 90 0a 07 	lds	r0, 0x070A
    4e86:	04 c0       	rjmp	.+8      	; 0x4e90 <_nrk_scheduler+0x274>
    4e88:	88 0f       	add	r24, r24
    4e8a:	99 1f       	adc	r25, r25
    4e8c:	aa 1f       	adc	r26, r26
    4e8e:	bb 1f       	adc	r27, r27
    4e90:	0a 94       	dec	r0
    4e92:	d2 f7       	brpl	.-12     	; 0x4e88 <_nrk_scheduler+0x26c>
    4e94:	89 8b       	std	Y+17, r24	; 0x11
    4e96:	9a 8b       	std	Y+18, r25	; 0x12
    4e98:	ab 8b       	std	Y+19, r26	; 0x13
    4e9a:	bc 8b       	std	Y+20, r27	; 0x14
    4e9c:	1f 82       	std	Y+7, r1	; 0x07
    4e9e:	1e 82       	std	Y+6, r1	; 0x06
    4ea0:	1d 82       	std	Y+5, r1	; 0x05
    4ea2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4ea4:	38 a1       	ldd	r19, Y+32	; 0x20
    4ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ea8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4eaa:	21 30       	cpi	r18, 0x01	; 1
    4eac:	31 05       	cpc	r19, r1
    4eae:	61 f4       	brne	.+24     	; 0x4ec8 <_nrk_scheduler+0x2ac>
    4eb0:	9a 8f       	std	Y+26, r25	; 0x1a
    4eb2:	89 8f       	std	Y+25, r24	; 0x19
    4eb4:	82 e0       	ldi	r24, 0x02	; 2
    4eb6:	89 87       	std	Y+9, r24	; 0x09
    4eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eba:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebc:	9e 8b       	std	Y+22, r25	; 0x16
    4ebe:	8d 8b       	std	Y+21, r24	; 0x15
    4ec0:	84 2f       	mov	r24, r20
    4ec2:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <nrk_add_to_readyQ>
    4ec6:	16 c0       	rjmp	.+44     	; 0x4ef4 <_nrk_scheduler+0x2d8>
    4ec8:	9a 8f       	std	Y+26, r25	; 0x1a
    4eca:	89 8f       	std	Y+25, r24	; 0x19
    4ecc:	21 50       	subi	r18, 0x01	; 1
    4ece:	30 40       	sbci	r19, 0x00	; 0
    4ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ed4:	ac 01       	movw	r20, r24
    4ed6:	24 9f       	mul	r18, r20
    4ed8:	c0 01       	movw	r24, r0
    4eda:	25 9f       	mul	r18, r21
    4edc:	90 0d       	add	r25, r0
    4ede:	34 9f       	mul	r19, r20
    4ee0:	90 0d       	add	r25, r0
    4ee2:	11 24       	eor	r1, r1
    4ee4:	9e 8b       	std	Y+22, r25	; 0x16
    4ee6:	8d 8b       	std	Y+21, r24	; 0x15
    4ee8:	98 8f       	std	Y+24, r25	; 0x18
    4eea:	8f 8b       	std	Y+23, r24	; 0x17
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	98 a3       	std	Y+32, r25	; 0x20
    4ef2:	8f 8f       	std	Y+31, r24	; 0x1f
    4ef4:	8d 89       	ldd	r24, Y+21	; 0x15
    4ef6:	9e 89       	ldd	r25, Y+22	; 0x16
    4ef8:	00 97       	sbiw	r24, 0x00	; 0
    4efa:	21 f0       	breq	.+8      	; 0x4f04 <_nrk_scheduler+0x2e8>
    4efc:	80 17       	cp	r24, r16
    4efe:	91 07       	cpc	r25, r17
    4f00:	08 f4       	brcc	.+2      	; 0x4f04 <_nrk_scheduler+0x2e8>
    4f02:	8c 01       	movw	r16, r24
    4f04:	08 94       	sec
    4f06:	c1 1c       	adc	r12, r1
    4f08:	d1 1c       	adc	r13, r1
    4f0a:	a1 96       	adiw	r28, 0x21	; 33
    4f0c:	54 e0       	ldi	r21, 0x04	; 4
    4f0e:	c5 16       	cp	r12, r21
    4f10:	d1 04       	cpc	r13, r1
    4f12:	09 f0       	breq	.+2      	; 0x4f16 <_nrk_scheduler+0x2fa>
    4f14:	69 cf       	rjmp	.-302    	; 0x4de8 <_nrk_scheduler+0x1cc>
    4f16:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <nrk_get_high_ready_task_ID>
    4f1a:	e8 2e       	mov	r14, r24
    4f1c:	99 27       	eor	r25, r25
    4f1e:	87 fd       	sbrc	r24, 7
    4f20:	90 95       	com	r25
    4f22:	fc 01       	movw	r30, r24
    4f24:	25 e0       	ldi	r18, 0x05	; 5
    4f26:	ee 0f       	add	r30, r30
    4f28:	ff 1f       	adc	r31, r31
    4f2a:	2a 95       	dec	r18
    4f2c:	e1 f7       	brne	.-8      	; 0x4f26 <_nrk_scheduler+0x30a>
    4f2e:	e8 0f       	add	r30, r24
    4f30:	f9 1f       	adc	r31, r25
    4f32:	e3 58       	subi	r30, 0x83	; 131
    4f34:	f9 4f       	sbci	r31, 0xF9	; 249
    4f36:	42 85       	ldd	r20, Z+10	; 0x0a
    4f38:	40 93 1c 07 	sts	0x071C, r20
    4f3c:	81 e2       	ldi	r24, 0x21	; 33
    4f3e:	6e 2d       	mov	r22, r14
    4f40:	68 02       	muls	r22, r24
    4f42:	90 01       	movw	r18, r0
    4f44:	11 24       	eor	r1, r1
    4f46:	23 58       	subi	r18, 0x83	; 131
    4f48:	39 4f       	sbci	r19, 0xF9	; 249
    4f4a:	30 93 0c 07 	sts	0x070C, r19
    4f4e:	20 93 0b 07 	sts	0x070B, r18
    4f52:	ee 20       	and	r14, r14
    4f54:	91 f0       	breq	.+36     	; 0x4f7a <_nrk_scheduler+0x35e>
    4f56:	85 8d       	ldd	r24, Z+29	; 0x1d
    4f58:	96 8d       	ldd	r25, Z+30	; 0x1e
    4f5a:	89 2b       	or	r24, r25
    4f5c:	51 f0       	breq	.+20     	; 0x4f72 <_nrk_scheduler+0x356>
    4f5e:	81 8d       	ldd	r24, Z+25	; 0x19
    4f60:	92 8d       	ldd	r25, Z+26	; 0x1a
    4f62:	8a 3f       	cpi	r24, 0xFA	; 250
    4f64:	91 05       	cpc	r25, r1
    4f66:	28 f4       	brcc	.+10     	; 0x4f72 <_nrk_scheduler+0x356>
    4f68:	80 17       	cp	r24, r16
    4f6a:	91 07       	cpc	r25, r17
    4f6c:	e0 f4       	brcc	.+56     	; 0x4fa6 <_nrk_scheduler+0x38a>
    4f6e:	8c 01       	movw	r16, r24
    4f70:	1a c0       	rjmp	.+52     	; 0x4fa6 <_nrk_scheduler+0x38a>
    4f72:	0b 3f       	cpi	r16, 0xFB	; 251
    4f74:	11 05       	cpc	r17, r1
    4f76:	b8 f0       	brcs	.+46     	; 0x4fa6 <_nrk_scheduler+0x38a>
    4f78:	14 c0       	rjmp	.+40     	; 0x4fa2 <_nrk_scheduler+0x386>
    4f7a:	0b 30       	cpi	r16, 0x0B	; 11
    4f7c:	11 05       	cpc	r17, r1
    4f7e:	98 f0       	brcs	.+38     	; 0x4fa6 <_nrk_scheduler+0x38a>
    4f80:	c8 01       	movw	r24, r16
    4f82:	0a 97       	sbiw	r24, 0x0a	; 10
    4f84:	8a 3f       	cpi	r24, 0xFA	; 250
    4f86:	91 05       	cpc	r25, r1
    4f88:	30 f4       	brcc	.+12     	; 0x4f96 <_nrk_scheduler+0x37a>
    4f8a:	8c 01       	movw	r16, r24
    4f8c:	09 97       	sbiw	r24, 0x09	; 9
    4f8e:	58 f4       	brcc	.+22     	; 0x4fa6 <_nrk_scheduler+0x38a>
    4f90:	09 e0       	ldi	r16, 0x09	; 9
    4f92:	10 e0       	ldi	r17, 0x00	; 0
    4f94:	08 c0       	rjmp	.+16     	; 0x4fa6 <_nrk_scheduler+0x38a>
    4f96:	05 50       	subi	r16, 0x05	; 5
    4f98:	11 40       	sbci	r17, 0x01	; 1
    4f9a:	18 f4       	brcc	.+6      	; 0x4fa2 <_nrk_scheduler+0x386>
    4f9c:	00 ef       	ldi	r16, 0xF0	; 240
    4f9e:	10 e0       	ldi	r17, 0x00	; 0
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <_nrk_scheduler+0x38a>
    4fa2:	0a ef       	ldi	r16, 0xFA	; 250
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
    4fa6:	40 93 0d 07 	sts	0x070D, r20
    4faa:	30 93 1b 07 	sts	0x071B, r19
    4fae:	20 93 1a 07 	sts	0x071A, r18
    4fb2:	00 93 b2 05 	sts	0x05B2, r16
    4fb6:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    4fba:	99 27       	eor	r25, r25
    4fbc:	80 17       	cp	r24, r16
    4fbe:	91 07       	cpc	r25, r17
    4fc0:	40 f0       	brcs	.+16     	; 0x4fd2 <_nrk_scheduler+0x3b6>
    4fc2:	0e 94 46 2a 	call	0x548c	; 0x548c <_nrk_os_timer_get>
    4fc6:	08 2f       	mov	r16, r24
    4fc8:	11 27       	eor	r17, r17
    4fca:	0e 5f       	subi	r16, 0xFE	; 254
    4fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    4fce:	00 93 b2 05 	sts	0x05B2, r16
    4fd2:	ee 20       	and	r14, r14
    4fd4:	11 f0       	breq	.+4      	; 0x4fda <_nrk_scheduler+0x3be>
    4fd6:	10 92 0e 07 	sts	0x070E, r1
    4fda:	80 2f       	mov	r24, r16
    4fdc:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_nrk_set_next_wakeup>
    4fe0:	6e ee       	ldi	r22, 0xEE	; 238
    4fe2:	72 e0       	ldi	r23, 0x02	; 2
    4fe4:	c4 01       	movw	r24, r8
    4fe6:	0e 94 cb 2a 	call	0x5596	; 0x5596 <nrk_high_speed_timer_wait>
    4fea:	0e 94 65 2d 	call	0x5aca	; 0x5aca <nrk_stack_pointer_restore>
    4fee:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <nrk_start_high_ready_task>
    4ff2:	df 91       	pop	r29
    4ff4:	cf 91       	pop	r28
    4ff6:	1f 91       	pop	r17
    4ff8:	0f 91       	pop	r16
    4ffa:	ff 90       	pop	r15
    4ffc:	ef 90       	pop	r14
    4ffe:	df 90       	pop	r13
    5000:	cf 90       	pop	r12
    5002:	bf 90       	pop	r11
    5004:	af 90       	pop	r10
    5006:	9f 90       	pop	r9
    5008:	8f 90       	pop	r8
    500a:	08 95       	ret

0000500c <_nrk_reserve_init>:
    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    500c:	8f ef       	ldi	r24, 0xFF	; 255
    500e:	80 93 46 07 	sts	0x0746, r24
    5012:	80 93 59 07 	sts	0x0759, r24
    5016:	80 93 6c 07 	sts	0x076C, r24
    501a:	80 93 7f 07 	sts	0x077F, r24
    501e:	80 93 92 07 	sts	0x0792, r24
    5022:	08 95       	ret

00005024 <nrk_reserve_create>:
    } while (--timeout);

} // halWait
    5024:	e6 e4       	ldi	r30, 0x46	; 70
    5026:	f7 e0       	ldi	r31, 0x07	; 7
    5028:	80 e0       	ldi	r24, 0x00	; 0
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	9c 01       	movw	r18, r24
    502e:	80 81       	ld	r24, Z
    5030:	8f 3f       	cpi	r24, 0xFF	; 255
    5032:	71 f4       	brne	.+28     	; 0x5050 <nrk_reserve_create+0x2c>
    5034:	83 e1       	ldi	r24, 0x13	; 19
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	28 9f       	mul	r18, r24
    503a:	f0 01       	movw	r30, r0
    503c:	29 9f       	mul	r18, r25
    503e:	f0 0d       	add	r31, r0
    5040:	38 9f       	mul	r19, r24
    5042:	f0 0d       	add	r31, r0
    5044:	11 24       	eor	r1, r1
    5046:	ea 5c       	subi	r30, 0xCA	; 202
    5048:	f8 4f       	sbci	r31, 0xF8	; 248
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	80 8b       	std	Z+16, r24	; 0x10
    504e:	08 c0       	rjmp	.+16     	; 0x5060 <nrk_reserve_create+0x3c>
    5050:	c9 01       	movw	r24, r18
    5052:	01 96       	adiw	r24, 0x01	; 1
    5054:	73 96       	adiw	r30, 0x13	; 19
} // halWait
    5056:	85 30       	cpi	r24, 0x05	; 5
    5058:	91 05       	cpc	r25, r1
    505a:	41 f7       	brne	.-48     	; 0x502c <nrk_reserve_create+0x8>
    505c:	2f ef       	ldi	r18, 0xFF	; 255
    505e:	3f ef       	ldi	r19, 0xFF	; 255
    5060:	c9 01       	movw	r24, r18
    5062:	08 95       	ret

00005064 <nrk_reserve_delete>:
    5064:	85 30       	cpi	r24, 0x05	; 5
    5066:	a8 f4       	brcc	.+42     	; 0x5092 <nrk_reserve_delete+0x2e>
    5068:	99 27       	eor	r25, r25
    506a:	87 fd       	sbrc	r24, 7
    506c:	90 95       	com	r25
    506e:	23 e1       	ldi	r18, 0x13	; 19
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	82 9f       	mul	r24, r18
    5074:	f0 01       	movw	r30, r0
    5076:	83 9f       	mul	r24, r19
    5078:	f0 0d       	add	r31, r0
    507a:	92 9f       	mul	r25, r18
    507c:	f0 0d       	add	r31, r0
    507e:	11 24       	eor	r1, r1
    5080:	ea 5c       	subi	r30, 0xCA	; 202
    5082:	f8 4f       	sbci	r31, 0xF8	; 248
    5084:	80 89       	ldd	r24, Z+16	; 0x10
    5086:	81 30       	cpi	r24, 0x01	; 1
    5088:	21 f4       	brne	.+8      	; 0x5092 <nrk_reserve_delete+0x2e>
    508a:	10 8a       	std	Z+16, r1	; 0x10
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	08 95       	ret
    5092:	8f ef       	ldi	r24, 0xFF	; 255
    5094:	9f ef       	ldi	r25, 0xFF	; 255
    5096:	08 95       	ret

00005098 <nrk_reserve_set>:
    5098:	cf 92       	push	r12
    509a:	df 92       	push	r13
    509c:	ef 92       	push	r14
    509e:	ff 92       	push	r15
    50a0:	0f 93       	push	r16
    50a2:	1f 93       	push	r17
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	cd b7       	in	r28, 0x3d	; 61
    50aa:	de b7       	in	r29, 0x3e	; 62
    50ac:	28 97       	sbiw	r28, 0x08	; 8
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	de bf       	out	0x3e, r29	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	cd bf       	out	0x3d, r28	; 61
    50b8:	7a 01       	movw	r14, r20
    50ba:	69 01       	movw	r12, r18
    50bc:	85 30       	cpi	r24, 0x05	; 5
    50be:	08 f0       	brcs	.+2      	; 0x50c2 <nrk_reserve_set+0x2a>
    50c0:	59 c0       	rjmp	.+178    	; 0x5174 <nrk_reserve_set+0xdc>
    50c2:	99 27       	eor	r25, r25
    50c4:	23 e1       	ldi	r18, 0x13	; 19
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	82 9f       	mul	r24, r18
    50ca:	80 01       	movw	r16, r0
    50cc:	83 9f       	mul	r24, r19
    50ce:	10 0d       	add	r17, r0
    50d0:	92 9f       	mul	r25, r18
    50d2:	10 0d       	add	r17, r0
    50d4:	11 24       	eor	r1, r1
    50d6:	0a 5c       	subi	r16, 0xCA	; 202
    50d8:	18 4f       	sbci	r17, 0xF8	; 248
    50da:	f8 01       	movw	r30, r16
    50dc:	80 89       	ldd	r24, Z+16	; 0x10
    50de:	8f 3f       	cpi	r24, 0xFF	; 255
    50e0:	09 f4       	brne	.+2      	; 0x50e4 <nrk_reserve_set+0x4c>
    50e2:	48 c0       	rjmp	.+144    	; 0x5174 <nrk_reserve_set+0xdc>
    50e4:	fb 01       	movw	r30, r22
    50e6:	80 81       	ld	r24, Z
    50e8:	91 81       	ldd	r25, Z+1	; 0x01
    50ea:	a2 81       	ldd	r26, Z+2	; 0x02
    50ec:	b3 81       	ldd	r27, Z+3	; 0x03
    50ee:	89 83       	std	Y+1, r24	; 0x01
    50f0:	9a 83       	std	Y+2, r25	; 0x02
    50f2:	ab 83       	std	Y+3, r26	; 0x03
    50f4:	bc 83       	std	Y+4, r27	; 0x04
    50f6:	84 81       	ldd	r24, Z+4	; 0x04
    50f8:	95 81       	ldd	r25, Z+5	; 0x05
    50fa:	a6 81       	ldd	r26, Z+6	; 0x06
    50fc:	b7 81       	ldd	r27, Z+7	; 0x07
    50fe:	8d 83       	std	Y+5, r24	; 0x05
    5100:	9e 83       	std	Y+6, r25	; 0x06
    5102:	af 83       	std	Y+7, r26	; 0x07
    5104:	b8 87       	std	Y+8, r27	; 0x08
    5106:	29 81       	ldd	r18, Y+1	; 0x01
    5108:	3a 81       	ldd	r19, Y+2	; 0x02
    510a:	4b 81       	ldd	r20, Y+3	; 0x03
    510c:	5c 81       	ldd	r21, Y+4	; 0x04
    510e:	6d 81       	ldd	r22, Y+5	; 0x05
    5110:	7e 81       	ldd	r23, Y+6	; 0x06
    5112:	8f 81       	ldd	r24, Y+7	; 0x07
    5114:	98 85       	ldd	r25, Y+8	; 0x08
    5116:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <_nrk_time_to_ticks_long>
    511a:	f8 01       	movw	r30, r16
    511c:	60 83       	st	Z, r22
    511e:	71 83       	std	Z+1, r23	; 0x01
    5120:	82 83       	std	Z+2, r24	; 0x02
    5122:	93 83       	std	Z+3, r25	; 0x03
    5124:	f5 86       	std	Z+13, r15	; 0x0d
    5126:	e4 86       	std	Z+12, r14	; 0x0c
    5128:	17 86       	std	Z+15, r1	; 0x0f
    512a:	16 86       	std	Z+14, r1	; 0x0e
    512c:	ce 01       	movw	r24, r28
    512e:	01 96       	adiw	r24, 0x01	; 1
    5130:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <nrk_time_get>
    5134:	29 81       	ldd	r18, Y+1	; 0x01
    5136:	3a 81       	ldd	r19, Y+2	; 0x02
    5138:	4b 81       	ldd	r20, Y+3	; 0x03
    513a:	5c 81       	ldd	r21, Y+4	; 0x04
    513c:	6d 81       	ldd	r22, Y+5	; 0x05
    513e:	7e 81       	ldd	r23, Y+6	; 0x06
    5140:	8f 81       	ldd	r24, Y+7	; 0x07
    5142:	98 85       	ldd	r25, Y+8	; 0x08
    5144:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <_nrk_time_to_ticks_long>
    5148:	f8 01       	movw	r30, r16
    514a:	60 87       	std	Z+8, r22	; 0x08
    514c:	71 87       	std	Z+9, r23	; 0x09
    514e:	82 87       	std	Z+10, r24	; 0x0a
    5150:	93 87       	std	Z+11, r25	; 0x0b
    5152:	20 81       	ld	r18, Z
    5154:	31 81       	ldd	r19, Z+1	; 0x01
    5156:	42 81       	ldd	r20, Z+2	; 0x02
    5158:	53 81       	ldd	r21, Z+3	; 0x03
    515a:	26 0f       	add	r18, r22
    515c:	37 1f       	adc	r19, r23
    515e:	48 1f       	adc	r20, r24
    5160:	59 1f       	adc	r21, r25
    5162:	24 83       	std	Z+4, r18	; 0x04
    5164:	35 83       	std	Z+5, r19	; 0x05
    5166:	46 83       	std	Z+6, r20	; 0x06
    5168:	57 83       	std	Z+7, r21	; 0x07
    516a:	d2 8a       	std	Z+18, r13	; 0x12
    516c:	c1 8a       	std	Z+17, r12	; 0x11
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	02 c0       	rjmp	.+4      	; 0x5178 <nrk_reserve_set+0xe0>
    5174:	8f ef       	ldi	r24, 0xFF	; 255
    5176:	9f ef       	ldi	r25, 0xFF	; 255
    5178:	28 96       	adiw	r28, 0x08	; 8
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	de bf       	out	0x3e, r29	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	cd bf       	out	0x3d, r28	; 61
    5184:	df 91       	pop	r29
    5186:	cf 91       	pop	r28
    5188:	1f 91       	pop	r17
    518a:	0f 91       	pop	r16
    518c:	ff 90       	pop	r15
    518e:	ef 90       	pop	r14
    5190:	df 90       	pop	r13
    5192:	cf 90       	pop	r12
    5194:	08 95       	ret

00005196 <_nrk_reserve_update>:
    5196:	0f 93       	push	r16
    5198:	1f 93       	push	r17
    519a:	cf 93       	push	r28
    519c:	df 93       	push	r29
    519e:	cd b7       	in	r28, 0x3d	; 61
    51a0:	de b7       	in	r29, 0x3e	; 62
    51a2:	28 97       	sbiw	r28, 0x08	; 8
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	f8 94       	cli
    51a8:	de bf       	out	0x3e, r29	; 62
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	cd bf       	out	0x3d, r28	; 61
    51ae:	08 2f       	mov	r16, r24
    51b0:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    51b4:	ce 01       	movw	r24, r28
    51b6:	01 96       	adiw	r24, 0x01	; 1
    51b8:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <nrk_time_get>
    51bc:	11 27       	eor	r17, r17
    51be:	29 81       	ldd	r18, Y+1	; 0x01
    51c0:	3a 81       	ldd	r19, Y+2	; 0x02
    51c2:	4b 81       	ldd	r20, Y+3	; 0x03
    51c4:	5c 81       	ldd	r21, Y+4	; 0x04
    51c6:	6d 81       	ldd	r22, Y+5	; 0x05
    51c8:	7e 81       	ldd	r23, Y+6	; 0x06
    51ca:	8f 81       	ldd	r24, Y+7	; 0x07
    51cc:	98 85       	ldd	r25, Y+8	; 0x08
    51ce:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <_nrk_time_to_ticks_long>
    51d2:	9b 01       	movw	r18, r22
    51d4:	ac 01       	movw	r20, r24
    51d6:	83 e1       	ldi	r24, 0x13	; 19
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	08 9f       	mul	r16, r24
    51dc:	f0 01       	movw	r30, r0
    51de:	09 9f       	mul	r16, r25
    51e0:	f0 0d       	add	r31, r0
    51e2:	18 9f       	mul	r17, r24
    51e4:	f0 0d       	add	r31, r0
    51e6:	11 24       	eor	r1, r1
    51e8:	ea 5c       	subi	r30, 0xCA	; 202
    51ea:	f8 4f       	sbci	r31, 0xF8	; 248
    51ec:	20 87       	std	Z+8, r18	; 0x08
    51ee:	31 87       	std	Z+9, r19	; 0x09
    51f0:	42 87       	std	Z+10, r20	; 0x0a
    51f2:	53 87       	std	Z+11, r21	; 0x0b
    51f4:	84 81       	ldd	r24, Z+4	; 0x04
    51f6:	95 81       	ldd	r25, Z+5	; 0x05
    51f8:	a6 81       	ldd	r26, Z+6	; 0x06
    51fa:	b7 81       	ldd	r27, Z+7	; 0x07
    51fc:	28 17       	cp	r18, r24
    51fe:	39 07       	cpc	r19, r25
    5200:	4a 07       	cpc	r20, r26
    5202:	5b 07       	cpc	r21, r27
    5204:	70 f0       	brcs	.+28     	; 0x5222 <_nrk_reserve_update+0x8c>
    5206:	80 81       	ld	r24, Z
    5208:	91 81       	ldd	r25, Z+1	; 0x01
    520a:	a2 81       	ldd	r26, Z+2	; 0x02
    520c:	b3 81       	ldd	r27, Z+3	; 0x03
    520e:	82 0f       	add	r24, r18
    5210:	93 1f       	adc	r25, r19
    5212:	a4 1f       	adc	r26, r20
    5214:	b5 1f       	adc	r27, r21
    5216:	84 83       	std	Z+4, r24	; 0x04
    5218:	95 83       	std	Z+5, r25	; 0x05
    521a:	a6 83       	std	Z+6, r26	; 0x06
    521c:	b7 83       	std	Z+7, r27	; 0x07
    521e:	17 86       	std	Z+15, r1	; 0x0f
    5220:	16 86       	std	Z+14, r1	; 0x0e
    5222:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    5226:	28 96       	adiw	r28, 0x08	; 8
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	f8 94       	cli
    522c:	de bf       	out	0x3e, r29	; 62
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	cd bf       	out	0x3d, r28	; 61
    5232:	df 91       	pop	r29
    5234:	cf 91       	pop	r28
    5236:	1f 91       	pop	r17
    5238:	0f 91       	pop	r16
    523a:	08 95       	ret

0000523c <nrk_reserve_consume>:
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	48 2f       	mov	r20, r24
    5242:	85 30       	cpi	r24, 0x05	; 5
    5244:	10 f0       	brcs	.+4      	; 0x524a <nrk_reserve_consume+0xe>
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	10 c0       	rjmp	.+32     	; 0x526a <nrk_reserve_consume+0x2e>
    524a:	99 27       	eor	r25, r25
    524c:	23 e1       	ldi	r18, 0x13	; 19
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	82 9f       	mul	r24, r18
    5252:	e0 01       	movw	r28, r0
    5254:	83 9f       	mul	r24, r19
    5256:	d0 0d       	add	r29, r0
    5258:	92 9f       	mul	r25, r18
    525a:	d0 0d       	add	r29, r0
    525c:	11 24       	eor	r1, r1
    525e:	ca 5c       	subi	r28, 0xCA	; 202
    5260:	d8 4f       	sbci	r29, 0xF8	; 248
    5262:	88 89       	ldd	r24, Y+16	; 0x10
    5264:	8f 3f       	cpi	r24, 0xFF	; 255
    5266:	21 f4       	brne	.+8      	; 0x5270 <nrk_reserve_consume+0x34>
    5268:	82 e0       	ldi	r24, 0x02	; 2
    526a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    526e:	11 c0       	rjmp	.+34     	; 0x5292 <nrk_reserve_consume+0x56>
    5270:	84 2f       	mov	r24, r20
    5272:	0e 94 cb 28 	call	0x5196	; 0x5196 <_nrk_reserve_update>
    5276:	2e 85       	ldd	r18, Y+14	; 0x0e
    5278:	3f 85       	ldd	r19, Y+15	; 0x0f
    527a:	8c 85       	ldd	r24, Y+12	; 0x0c
    527c:	9d 85       	ldd	r25, Y+13	; 0x0d
    527e:	28 17       	cp	r18, r24
    5280:	39 07       	cpc	r19, r25
    5282:	54 f0       	brlt	.+20     	; 0x5298 <nrk_reserve_consume+0x5c>
    5284:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    5288:	e9 89       	ldd	r30, Y+17	; 0x11
    528a:	fa 89       	ldd	r31, Y+18	; 0x12
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	09 f0       	breq	.+2      	; 0x5292 <nrk_reserve_consume+0x56>
    5290:	09 95       	icall
    5292:	8f ef       	ldi	r24, 0xFF	; 255
    5294:	9f ef       	ldi	r25, 0xFF	; 255
    5296:	06 c0       	rjmp	.+12     	; 0x52a4 <nrk_reserve_consume+0x68>
    5298:	2f 5f       	subi	r18, 0xFF	; 255
    529a:	3f 4f       	sbci	r19, 0xFF	; 255
    529c:	3f 87       	std	Y+15, r19	; 0x0f
    529e:	2e 87       	std	Y+14, r18	; 0x0e
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	df 91       	pop	r29
    52a6:	cf 91       	pop	r28
    52a8:	08 95       	ret

000052aa <nrk_reserve_get>:
    52aa:	cf 93       	push	r28
    52ac:	df 93       	push	r29
    52ae:	48 2f       	mov	r20, r24
    52b0:	85 30       	cpi	r24, 0x05	; 5
    52b2:	10 f0       	brcs	.+4      	; 0x52b8 <nrk_reserve_get+0xe>
    52b4:	81 e0       	ldi	r24, 0x01	; 1
    52b6:	10 c0       	rjmp	.+32     	; 0x52d8 <nrk_reserve_get+0x2e>
    52b8:	99 27       	eor	r25, r25
    52ba:	23 e1       	ldi	r18, 0x13	; 19
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	82 9f       	mul	r24, r18
    52c0:	e0 01       	movw	r28, r0
    52c2:	83 9f       	mul	r24, r19
    52c4:	d0 0d       	add	r29, r0
    52c6:	92 9f       	mul	r25, r18
    52c8:	d0 0d       	add	r29, r0
    52ca:	11 24       	eor	r1, r1
    52cc:	ca 5c       	subi	r28, 0xCA	; 202
    52ce:	d8 4f       	sbci	r29, 0xF8	; 248
    52d0:	88 89       	ldd	r24, Y+16	; 0x10
    52d2:	8f 3f       	cpi	r24, 0xFF	; 255
    52d4:	31 f4       	brne	.+12     	; 0x52e2 <nrk_reserve_get+0x38>
    52d6:	82 e0       	ldi	r24, 0x02	; 2
    52d8:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_nrk_errno_set>
    52dc:	80 e0       	ldi	r24, 0x00	; 0
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	0c c0       	rjmp	.+24     	; 0x52fa <nrk_reserve_get+0x50>
    52e2:	84 2f       	mov	r24, r20
    52e4:	0e 94 cb 28 	call	0x5196	; 0x5196 <_nrk_reserve_update>
    52e8:	2e 85       	ldd	r18, Y+14	; 0x0e
    52ea:	3f 85       	ldd	r19, Y+15	; 0x0f
    52ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    52ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    52f0:	82 17       	cp	r24, r18
    52f2:	93 07       	cpc	r25, r19
    52f4:	9c f3       	brlt	.-26     	; 0x52dc <nrk_reserve_get+0x32>
    52f6:	82 1b       	sub	r24, r18
    52f8:	99 27       	eor	r25, r25
    52fa:	df 91       	pop	r29
    52fc:	cf 91       	pop	r28
    52fe:	08 95       	ret

00005300 <nrk_spin_wait_us>:
	...
//      uint16_t timeout
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	d1 f7       	brne	.-12     	; 0x5300 <nrk_spin_wait_us>
    530c:	08 95       	ret

0000530e <_nrk_high_speed_timer_stop>:
    530e:	10 92 81 00 	sts	0x0081, r1
    5312:	08 95       	ret

00005314 <_nrk_high_speed_timer_start>:
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	80 93 81 00 	sts	0x0081, r24
    531a:	08 95       	ret

0000531c <_nrk_high_speed_timer_reset>:
    531c:	83 b5       	in	r24, 0x23	; 35
    531e:	81 60       	ori	r24, 0x01	; 1
    5320:	83 bd       	out	0x23, r24	; 35
    5322:	10 92 85 00 	sts	0x0085, r1
    5326:	10 92 84 00 	sts	0x0084, r1
    532a:	08 95       	ret

0000532c <_nrk_high_speed_timer_get>:
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	22 97       	sbiw	r28, 0x02	; 2
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	f8 94       	cli
    533a:	de bf       	out	0x3e, r29	; 62
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	cd bf       	out	0x3d, r28	; 61
    5340:	80 91 84 00 	lds	r24, 0x0084
    5344:	90 91 85 00 	lds	r25, 0x0085
    5348:	9a 83       	std	Y+2, r25	; 0x02
    534a:	89 83       	std	Y+1, r24	; 0x01
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
    5350:	22 96       	adiw	r28, 0x02	; 2
    5352:	0f b6       	in	r0, 0x3f	; 63
    5354:	f8 94       	cli
    5356:	de bf       	out	0x3e, r29	; 62
    5358:	0f be       	out	0x3f, r0	; 63
    535a:	cd bf       	out	0x3d, r28	; 61
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	08 95       	ret

00005362 <_nrk_os_timer_stop>:
    5362:	10 92 b1 00 	sts	0x00B1, r1
    5366:	e0 e7       	ldi	r30, 0x70	; 112
    5368:	f0 e0       	ldi	r31, 0x00	; 0
    536a:	80 81       	ld	r24, Z
    536c:	8d 7f       	andi	r24, 0xFD	; 253
    536e:	80 83       	st	Z, r24
    5370:	80 81       	ld	r24, Z
    5372:	8e 7f       	andi	r24, 0xFE	; 254
    5374:	80 83       	st	Z, r24
    5376:	08 95       	ret

00005378 <_nrk_os_timer_set>:
    5378:	80 93 b2 00 	sts	0x00B2, r24
    537c:	08 95       	ret

0000537e <_nrk_os_timer_start>:
    537e:	e0 e7       	ldi	r30, 0x70	; 112
    5380:	f0 e0       	ldi	r31, 0x00	; 0
    5382:	80 81       	ld	r24, Z
    5384:	83 60       	ori	r24, 0x03	; 3
    5386:	80 83       	st	Z, r24
    5388:	83 e0       	ldi	r24, 0x03	; 3
    538a:	80 93 b1 00 	sts	0x00B1, r24
    538e:	08 95       	ret

00005390 <_nrk_os_timer_reset>:
    5390:	83 b5       	in	r24, 0x23	; 35
    5392:	82 60       	ori	r24, 0x02	; 2
    5394:	83 bd       	out	0x23, r24	; 35
    5396:	10 92 b2 00 	sts	0x00B2, r1
    539a:	10 92 4c 03 	sts	0x034C, r1
    539e:	10 92 b2 05 	sts	0x05B2, r1
    53a2:	08 95       	ret

000053a4 <_nrk_get_next_wakeup>:
    53a4:	80 91 b3 00 	lds	r24, 0x00B3
    53a8:	8f 5f       	subi	r24, 0xFF	; 255
    53aa:	99 27       	eor	r25, r25
    53ac:	08 95       	ret

000053ae <_nrk_set_next_wakeup>:
    53ae:	81 50       	subi	r24, 0x01	; 1
    53b0:	80 93 b3 00 	sts	0x00B3, r24
    53b4:	08 95       	ret

000053b6 <nrk_timer_int_stop>:
    53b6:	88 23       	and	r24, r24
    53b8:	11 f4       	brne	.+4      	; 0x53be <nrk_timer_int_stop+0x8>
    53ba:	10 92 71 00 	sts	0x0071, r1
    53be:	8f ef       	ldi	r24, 0xFF	; 255
    53c0:	9f ef       	ldi	r25, 0xFF	; 255
    53c2:	08 95       	ret

000053c4 <nrk_timer_int_reset>:
    53c4:	88 23       	and	r24, r24
    53c6:	19 f0       	breq	.+6      	; 0x53ce <nrk_timer_int_reset+0xa>
    53c8:	8f ef       	ldi	r24, 0xFF	; 255
    53ca:	9f ef       	ldi	r25, 0xFF	; 255
    53cc:	08 95       	ret
    53ce:	10 92 95 00 	sts	0x0095, r1
    53d2:	10 92 94 00 	sts	0x0094, r1
    53d6:	81 e0       	ldi	r24, 0x01	; 1
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	08 95       	ret

000053dc <nrk_timer_int_read>:
    53dc:	88 23       	and	r24, r24
    53de:	19 f0       	breq	.+6      	; 0x53e6 <nrk_timer_int_read+0xa>
    53e0:	80 e0       	ldi	r24, 0x00	; 0
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	08 95       	ret
    53e6:	80 91 94 00 	lds	r24, 0x0094
    53ea:	90 91 95 00 	lds	r25, 0x0095
    53ee:	08 95       	ret

000053f0 <nrk_timer_int_start>:
    53f0:	88 23       	and	r24, r24
    53f2:	19 f0       	breq	.+6      	; 0x53fa <nrk_timer_int_start+0xa>
    53f4:	8f ef       	ldi	r24, 0xFF	; 255
    53f6:	9f ef       	ldi	r25, 0xFF	; 255
    53f8:	08 95       	ret
    53fa:	82 e0       	ldi	r24, 0x02	; 2
    53fc:	80 93 71 00 	sts	0x0071, r24
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	08 95       	ret

00005406 <nrk_timer_int_configure>:
    5406:	88 23       	and	r24, r24
    5408:	19 f0       	breq	.+6      	; 0x5410 <nrk_timer_int_configure+0xa>
    540a:	8f ef       	ldi	r24, 0xFF	; 255
    540c:	9f ef       	ldi	r25, 0xFF	; 255
    540e:	08 95       	ret
    5410:	cb 01       	movw	r24, r22
    5412:	01 97       	sbiw	r24, 0x01	; 1
    5414:	05 97       	sbiw	r24, 0x05	; 5
    5416:	10 f4       	brcc	.+4      	; 0x541c <nrk_timer_int_configure+0x16>
    5418:	60 93 31 05 	sts	0x0531, r22
    541c:	10 92 90 00 	sts	0x0090, r1
    5420:	88 e0       	ldi	r24, 0x08	; 8
    5422:	80 93 91 00 	sts	0x0091, r24
    5426:	85 2f       	mov	r24, r21
    5428:	99 27       	eor	r25, r25
    542a:	80 93 99 00 	sts	0x0099, r24
    542e:	40 93 98 00 	sts	0x0098, r20
    5432:	30 93 c9 02 	sts	0x02C9, r19
    5436:	20 93 c8 02 	sts	0x02C8, r18
    543a:	80 91 31 05 	lds	r24, 0x0531
    543e:	81 30       	cpi	r24, 0x01	; 1
    5440:	21 f4       	brne	.+8      	; 0x544a <nrk_timer_int_configure+0x44>
    5442:	80 91 91 00 	lds	r24, 0x0091
    5446:	81 60       	ori	r24, 0x01	; 1
    5448:	0b c0       	rjmp	.+22     	; 0x5460 <nrk_timer_int_configure+0x5a>
    544a:	82 30       	cpi	r24, 0x02	; 2
    544c:	21 f4       	brne	.+8      	; 0x5456 <nrk_timer_int_configure+0x50>
    544e:	80 91 91 00 	lds	r24, 0x0091
    5452:	82 60       	ori	r24, 0x02	; 2
    5454:	05 c0       	rjmp	.+10     	; 0x5460 <nrk_timer_int_configure+0x5a>
    5456:	83 30       	cpi	r24, 0x03	; 3
    5458:	31 f4       	brne	.+12     	; 0x5466 <nrk_timer_int_configure+0x60>
    545a:	80 91 91 00 	lds	r24, 0x0091
    545e:	83 60       	ori	r24, 0x03	; 3
    5460:	80 93 91 00 	sts	0x0091, r24
    5464:	08 c0       	rjmp	.+16     	; 0x5476 <nrk_timer_int_configure+0x70>
    5466:	84 30       	cpi	r24, 0x04	; 4
    5468:	21 f4       	brne	.+8      	; 0x5472 <nrk_timer_int_configure+0x6c>
    546a:	80 91 91 00 	lds	r24, 0x0091
    546e:	84 60       	ori	r24, 0x04	; 4
    5470:	f7 cf       	rjmp	.-18     	; 0x5460 <nrk_timer_int_configure+0x5a>
    5472:	85 30       	cpi	r24, 0x05	; 5
    5474:	19 f0       	breq	.+6      	; 0x547c <nrk_timer_int_configure+0x76>
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	08 95       	ret
    547c:	80 91 91 00 	lds	r24, 0x0091
    5480:	85 60       	ori	r24, 0x05	; 5
    5482:	80 93 91 00 	sts	0x0091, r24
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	08 95       	ret

0000548c <_nrk_os_timer_get>:
    548c:	80 91 b2 00 	lds	r24, 0x00B2
    5490:	99 27       	eor	r25, r25
    5492:	08 95       	ret

00005494 <__vector_13>:
    5494:	0f 92       	push	r0
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	0f 92       	push	r0
    549a:	1f 92       	push	r1
    549c:	2f 92       	push	r2
    549e:	3f 92       	push	r3
    54a0:	4f 92       	push	r4
    54a2:	5f 92       	push	r5
    54a4:	6f 92       	push	r6
    54a6:	7f 92       	push	r7
    54a8:	8f 92       	push	r8
    54aa:	9f 92       	push	r9
    54ac:	af 92       	push	r10
    54ae:	bf 92       	push	r11
    54b0:	cf 92       	push	r12
    54b2:	df 92       	push	r13
    54b4:	ef 92       	push	r14
    54b6:	ff 92       	push	r15
    54b8:	0f 93       	push	r16
    54ba:	1f 93       	push	r17
    54bc:	2f 93       	push	r18
    54be:	3f 93       	push	r19
    54c0:	4f 93       	push	r20
    54c2:	5f 93       	push	r21
    54c4:	6f 93       	push	r22
    54c6:	7f 93       	push	r23
    54c8:	8f 93       	push	r24
    54ca:	9f 93       	push	r25
    54cc:	af 93       	push	r26
    54ce:	bf 93       	push	r27
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
    54d4:	ef 93       	push	r30
    54d6:	ff 93       	push	r31
    54d8:	a0 91 1a 07 	lds	r26, 0x071A
    54dc:	b0 91 1b 07 	lds	r27, 0x071B
    54e0:	0d b6       	in	r0, 0x3d	; 61
    54e2:	0d 92       	st	X+, r0
    54e4:	0e b6       	in	r0, 0x3e	; 62
    54e6:	0d 92       	st	X+, r0
    54e8:	1f 92       	push	r1
    54ea:	a0 91 75 04 	lds	r26, 0x0475
    54ee:	b0 91 76 04 	lds	r27, 0x0476
    54f2:	1e 90       	ld	r1, -X
    54f4:	be bf       	out	0x3e, r27	; 62
    54f6:	ad bf       	out	0x3d, r26	; 61
    54f8:	08 95       	ret

000054fa <__vector_17>:
    54fa:	1f 92       	push	r1
    54fc:	0f 92       	push	r0
    54fe:	0f b6       	in	r0, 0x3f	; 63
    5500:	0f 92       	push	r0
    5502:	11 24       	eor	r1, r1
    5504:	0f 90       	pop	r0
    5506:	0f be       	out	0x3f, r0	; 63
    5508:	0f 90       	pop	r0
    550a:	1f 90       	pop	r1
    550c:	18 95       	reti

0000550e <__vector_32>:
    550e:	1f 92       	push	r1
    5510:	0f 92       	push	r0
    5512:	0f b6       	in	r0, 0x3f	; 63
    5514:	0f 92       	push	r0
    5516:	11 24       	eor	r1, r1
    5518:	2f 93       	push	r18
    551a:	3f 93       	push	r19
    551c:	4f 93       	push	r20
    551e:	5f 93       	push	r21
    5520:	6f 93       	push	r22
    5522:	7f 93       	push	r23
    5524:	8f 93       	push	r24
    5526:	9f 93       	push	r25
    5528:	af 93       	push	r26
    552a:	bf 93       	push	r27
    552c:	ef 93       	push	r30
    552e:	ff 93       	push	r31
    5530:	e0 91 c8 02 	lds	r30, 0x02C8
    5534:	f0 91 c9 02 	lds	r31, 0x02C9
    5538:	30 97       	sbiw	r30, 0x00	; 0
    553a:	11 f0       	breq	.+4      	; 0x5540 <__vector_32+0x32>
    553c:	09 95       	icall
    553e:	04 c0       	rjmp	.+8      	; 0x5548 <__vector_32+0x3a>
    5540:	60 e0       	ldi	r22, 0x00	; 0
    5542:	8a e0       	ldi	r24, 0x0A	; 10
    5544:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    5548:	ff 91       	pop	r31
    554a:	ef 91       	pop	r30
    554c:	bf 91       	pop	r27
    554e:	af 91       	pop	r26
    5550:	9f 91       	pop	r25
    5552:	8f 91       	pop	r24
    5554:	7f 91       	pop	r23
    5556:	6f 91       	pop	r22
    5558:	5f 91       	pop	r21
    555a:	4f 91       	pop	r20
    555c:	3f 91       	pop	r19
    555e:	2f 91       	pop	r18
    5560:	0f 90       	pop	r0
    5562:	0f be       	out	0x3f, r0	; 63
    5564:	0f 90       	pop	r0
    5566:	1f 90       	pop	r1
    5568:	18 95       	reti

0000556a <__vector_default>:
    556a:	1f 92       	push	r1
    556c:	0f 92       	push	r0
    556e:	0f b6       	in	r0, 0x3f	; 63
    5570:	0f 92       	push	r0
    5572:	11 24       	eor	r1, r1
    5574:	2f 93       	push	r18
    5576:	3f 93       	push	r19
    5578:	4f 93       	push	r20
    557a:	5f 93       	push	r21
    557c:	6f 93       	push	r22
    557e:	7f 93       	push	r23
    5580:	8f 93       	push	r24
    5582:	9f 93       	push	r25
    5584:	af 93       	push	r26
    5586:	bf 93       	push	r27
    5588:	ef 93       	push	r30
    558a:	ff 93       	push	r31
    558c:	60 e0       	ldi	r22, 0x00	; 0
    558e:	8a e0       	ldi	r24, 0x0A	; 10
    5590:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    5594:	ff cf       	rjmp	.-2      	; 0x5594 <__vector_default+0x2a>

00005596 <nrk_high_speed_timer_wait>:
    5596:	cf 93       	push	r28
    5598:	df 93       	push	r29
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    559e:	22 97       	sbiw	r28, 0x02	; 2
    55a0:	0f b6       	in	r0, 0x3f	; 63
    55a2:	f8 94       	cli
    55a4:	de bf       	out	0x3e, r29	; 62
    55a6:	0f be       	out	0x3f, r0	; 63
    55a8:	cd bf       	out	0x3d, r28	; 61
    55aa:	fc 01       	movw	r30, r24
    55ac:	8f ef       	ldi	r24, 0xFF	; 255
    55ae:	e9 37       	cpi	r30, 0x79	; 121
    55b0:	f8 07       	cpc	r31, r24
    55b2:	10 f0       	brcs	.+4      	; 0x55b8 <nrk_high_speed_timer_wait+0x22>
    55b4:	e0 e0       	ldi	r30, 0x00	; 0
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
    55b8:	9f 01       	movw	r18, r30
    55ba:	44 27       	eor	r20, r20
    55bc:	55 27       	eor	r21, r21
    55be:	cb 01       	movw	r24, r22
    55c0:	aa 27       	eor	r26, r26
    55c2:	bb 27       	eor	r27, r27
    55c4:	28 0f       	add	r18, r24
    55c6:	39 1f       	adc	r19, r25
    55c8:	4a 1f       	adc	r20, r26
    55ca:	5b 1f       	adc	r21, r27
    55cc:	21 30       	cpi	r18, 0x01	; 1
    55ce:	80 e0       	ldi	r24, 0x00	; 0
    55d0:	38 07       	cpc	r19, r24
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	48 07       	cpc	r20, r24
    55d6:	80 e0       	ldi	r24, 0x00	; 0
    55d8:	58 07       	cpc	r21, r24
    55da:	78 f0       	brcs	.+30     	; 0x55fa <nrk_high_speed_timer_wait+0x64>
    55dc:	80 91 84 00 	lds	r24, 0x0084
    55e0:	90 91 85 00 	lds	r25, 0x0085
    55e4:	9a 83       	std	Y+2, r25	; 0x02
    55e6:	89 83       	std	Y+1, r24	; 0x01
    55e8:	89 81       	ldd	r24, Y+1	; 0x01
    55ea:	9a 81       	ldd	r25, Y+2	; 0x02
    55ec:	e8 17       	cp	r30, r24
    55ee:	f9 07       	cpc	r31, r25
    55f0:	a8 f3       	brcs	.-22     	; 0x55dc <nrk_high_speed_timer_wait+0x46>
    55f2:	20 50       	subi	r18, 0x00	; 0
    55f4:	30 40       	sbci	r19, 0x00	; 0
    55f6:	41 40       	sbci	r20, 0x01	; 1
    55f8:	50 40       	sbci	r21, 0x00	; 0
    55fa:	80 91 84 00 	lds	r24, 0x0084
    55fe:	90 91 85 00 	lds	r25, 0x0085
    5602:	9a 83       	std	Y+2, r25	; 0x02
    5604:	89 83       	std	Y+1, r24	; 0x01
    5606:	89 81       	ldd	r24, Y+1	; 0x01
    5608:	9a 81       	ldd	r25, Y+2	; 0x02
    560a:	82 17       	cp	r24, r18
    560c:	93 07       	cpc	r25, r19
    560e:	a8 f3       	brcs	.-22     	; 0x55fa <nrk_high_speed_timer_wait+0x64>
    5610:	22 96       	adiw	r28, 0x02	; 2
    5612:	0f b6       	in	r0, 0x3f	; 63
    5614:	f8 94       	cli
    5616:	de bf       	out	0x3e, r29	; 62
    5618:	0f be       	out	0x3f, r0	; 63
    561a:	cd bf       	out	0x3d, r28	; 61
    561c:	df 91       	pop	r29
    561e:	cf 91       	pop	r28
    5620:	08 95       	ret

00005622 <_nrk_setup_timer>:
    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    5622:	ef 92       	push	r14
    5624:	ff 92       	push	r15
    5626:	1f 93       	push	r17
    } while (--timeout);
    5628:	9e ef       	ldi	r25, 0xFE	; 254
    562a:	90 93 b2 05 	sts	0x05B2, r25

} // halWait
    562e:	80 e2       	ldi	r24, 0x20	; 32
    5630:	80 93 b6 00 	sts	0x00B6, r24
    5634:	90 93 b3 00 	sts	0x00B3, r25
    5638:	13 e0       	ldi	r17, 0x03	; 3
    563a:	17 bb       	out	0x17, r17	; 23
    563c:	82 e0       	ldi	r24, 0x02	; 2
    563e:	80 93 b0 00 	sts	0x00B0, r24
    5642:	91 eb       	ldi	r25, 0xB1	; 177
    5644:	e9 2e       	mov	r14, r25
    5646:	f1 2c       	mov	r15, r1
    5648:	f7 01       	movw	r30, r14
    564a:	10 83       	st	Z, r17
    564c:	83 b5       	in	r24, 0x23	; 35
    564e:	82 60       	ori	r24, 0x02	; 2
    5650:	83 bd       	out	0x23, r24	; 35
    5652:	17 bb       	out	0x17, r17	; 23
    5654:	14 bd       	out	0x24, r17	; 36
    5656:	83 b5       	in	r24, 0x23	; 35
    5658:	82 60       	ori	r24, 0x02	; 2
    565a:	83 bd       	out	0x23, r24	; 35
    565c:	10 92 80 00 	sts	0x0080, r1
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	80 93 81 00 	sts	0x0081, r24
    5666:	10 92 85 00 	sts	0x0085, r1
    566a:	10 92 84 00 	sts	0x0084, r1
    566e:	83 b5       	in	r24, 0x23	; 35
    5670:	82 60       	ori	r24, 0x02	; 2
    5672:	83 bd       	out	0x23, r24	; 35
    5674:	83 b5       	in	r24, 0x23	; 35
    5676:	81 60       	ori	r24, 0x01	; 1
    5678:	83 bd       	out	0x23, r24	; 35
    567a:	0e 94 c8 29 	call	0x5390	; 0x5390 <_nrk_os_timer_reset>
    567e:	e0 e7       	ldi	r30, 0x70	; 112
    5680:	f0 e0       	ldi	r31, 0x00	; 0
    5682:	80 81       	ld	r24, Z
    5684:	83 60       	ori	r24, 0x03	; 3
    5686:	80 83       	st	Z, r24
    5688:	f7 01       	movw	r30, r14
    568a:	10 83       	st	Z, r17
    568c:	10 92 4c 03 	sts	0x034C, r1
    5690:	1f 91       	pop	r17
    5692:	ff 90       	pop	r15
    5694:	ef 90       	pop	r14
    5696:	08 95       	ret

00005698 <nrk_ext_int_enable>:
//	void halWait(uint16_t timeout)
//
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
    5698:	88 23       	and	r24, r24
    569a:	11 f4       	brne	.+4      	; 0x56a0 <nrk_ext_int_enable+0x8>
    569c:	e8 9a       	sbi	0x1d, 0	; 29
    569e:	33 c0       	rjmp	.+102    	; 0x5706 <nrk_ext_int_enable+0x6e>
//      uint16_t timeout
    56a0:	81 30       	cpi	r24, 0x01	; 1
    56a2:	11 f4       	brne	.+4      	; 0x56a8 <nrk_ext_int_enable+0x10>
    56a4:	e9 9a       	sbi	0x1d, 1	; 29
    56a6:	2f c0       	rjmp	.+94     	; 0x5706 <nrk_ext_int_enable+0x6e>
//          The timeout in microseconds
    56a8:	82 30       	cpi	r24, 0x02	; 2
    56aa:	11 f4       	brne	.+4      	; 0x56b0 <nrk_ext_int_enable+0x18>
    56ac:	ea 9a       	sbi	0x1d, 2	; 29
    56ae:	2b c0       	rjmp	.+86     	; 0x5706 <nrk_ext_int_enable+0x6e>
//-------------------------------------------------------------------------------------------------------
    56b0:	83 30       	cpi	r24, 0x03	; 3
    56b2:	21 f4       	brne	.+8      	; 0x56bc <nrk_ext_int_enable+0x24>
    56b4:	80 91 6b 00 	lds	r24, 0x006B
    56b8:	81 60       	ori	r24, 0x01	; 1
    56ba:	23 c0       	rjmp	.+70     	; 0x5702 <nrk_ext_int_enable+0x6a>
void halWait(uint16_t timeout) {
    56bc:	84 30       	cpi	r24, 0x04	; 4
    56be:	21 f4       	brne	.+8      	; 0x56c8 <nrk_ext_int_enable+0x30>
    56c0:	80 91 6b 00 	lds	r24, 0x006B
    56c4:	82 60       	ori	r24, 0x02	; 2
    56c6:	1d c0       	rjmp	.+58     	; 0x5702 <nrk_ext_int_enable+0x6a>

    56c8:	85 30       	cpi	r24, 0x05	; 5
    56ca:	21 f4       	brne	.+8      	; 0x56d4 <nrk_ext_int_enable+0x3c>
    56cc:	80 91 6b 00 	lds	r24, 0x006B
    56d0:	84 60       	ori	r24, 0x04	; 4
    56d2:	17 c0       	rjmp	.+46     	; 0x5702 <nrk_ext_int_enable+0x6a>
    // This sequence uses exactly 8 clock cycle for each round
    56d4:	86 30       	cpi	r24, 0x06	; 6
    56d6:	21 f4       	brne	.+8      	; 0x56e0 <nrk_ext_int_enable+0x48>
    56d8:	80 91 6b 00 	lds	r24, 0x006B
    56dc:	88 60       	ori	r24, 0x08	; 8
    56de:	11 c0       	rjmp	.+34     	; 0x5702 <nrk_ext_int_enable+0x6a>
    do {
    56e0:	87 30       	cpi	r24, 0x07	; 7
    56e2:	21 f4       	brne	.+8      	; 0x56ec <nrk_ext_int_enable+0x54>
    56e4:	80 91 6b 00 	lds	r24, 0x006B
    56e8:	80 61       	ori	r24, 0x10	; 16
    56ea:	0b c0       	rjmp	.+22     	; 0x5702 <nrk_ext_int_enable+0x6a>
        NOP();
    56ec:	88 30       	cpi	r24, 0x08	; 8
    56ee:	21 f4       	brne	.+8      	; 0x56f8 <nrk_ext_int_enable+0x60>
    56f0:	80 91 6b 00 	lds	r24, 0x006B
    56f4:	80 62       	ori	r24, 0x20	; 32
    56f6:	05 c0       	rjmp	.+10     	; 0x5702 <nrk_ext_int_enable+0x6a>
        NOP();
    56f8:	89 30       	cpi	r24, 0x09	; 9
    56fa:	41 f4       	brne	.+16     	; 0x570c <nrk_ext_int_enable+0x74>
    56fc:	80 91 6b 00 	lds	r24, 0x006B
    5700:	80 64       	ori	r24, 0x40	; 64
    5702:	80 93 6b 00 	sts	0x006B, r24
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	08 95       	ret
        NOP();
    570c:	8a 30       	cpi	r24, 0x0A	; 10
    570e:	19 f0       	breq	.+6      	; 0x5716 <nrk_ext_int_enable+0x7e>
    5710:	8f ef       	ldi	r24, 0xFF	; 255
    5712:	9f ef       	ldi	r25, 0xFF	; 255
    5714:	08 95       	ret
    5716:	80 91 6b 00 	lds	r24, 0x006B
    571a:	80 68       	ori	r24, 0x80	; 128
    571c:	80 93 6b 00 	sts	0x006B, r24
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	90 e0       	ldi	r25, 0x00	; 0
        NOP();
    } while (--timeout);
    5724:	08 95       	ret

00005726 <nrk_ext_int_disable>:

} // halWait
    5726:	88 23       	and	r24, r24
    5728:	11 f4       	brne	.+4      	; 0x572e <nrk_ext_int_disable+0x8>
    572a:	e8 98       	cbi	0x1d, 0	; 29
    572c:	31 c0       	rjmp	.+98     	; 0x5790 <nrk_ext_int_disable+0x6a>
    572e:	81 30       	cpi	r24, 0x01	; 1
    5730:	11 f0       	breq	.+4      	; 0x5736 <nrk_ext_int_disable+0x10>
    5732:	82 30       	cpi	r24, 0x02	; 2
    5734:	11 f4       	brne	.+4      	; 0x573a <nrk_ext_int_disable+0x14>
    5736:	e9 98       	cbi	0x1d, 1	; 29
    5738:	2b c0       	rjmp	.+86     	; 0x5790 <nrk_ext_int_disable+0x6a>
    573a:	83 30       	cpi	r24, 0x03	; 3
    573c:	21 f4       	brne	.+8      	; 0x5746 <nrk_ext_int_disable+0x20>
    573e:	80 91 6b 00 	lds	r24, 0x006B
    5742:	8e 7f       	andi	r24, 0xFE	; 254
    5744:	23 c0       	rjmp	.+70     	; 0x578c <nrk_ext_int_disable+0x66>
    5746:	84 30       	cpi	r24, 0x04	; 4
    5748:	21 f4       	brne	.+8      	; 0x5752 <nrk_ext_int_disable+0x2c>
    574a:	80 91 6b 00 	lds	r24, 0x006B
    574e:	8d 7f       	andi	r24, 0xFD	; 253
    5750:	1d c0       	rjmp	.+58     	; 0x578c <nrk_ext_int_disable+0x66>
    5752:	85 30       	cpi	r24, 0x05	; 5
    5754:	21 f4       	brne	.+8      	; 0x575e <nrk_ext_int_disable+0x38>
    5756:	80 91 6b 00 	lds	r24, 0x006B
    575a:	8b 7f       	andi	r24, 0xFB	; 251
    575c:	17 c0       	rjmp	.+46     	; 0x578c <nrk_ext_int_disable+0x66>
    575e:	86 30       	cpi	r24, 0x06	; 6
    5760:	21 f4       	brne	.+8      	; 0x576a <nrk_ext_int_disable+0x44>
    5762:	80 91 6b 00 	lds	r24, 0x006B
    5766:	87 7f       	andi	r24, 0xF7	; 247
    5768:	11 c0       	rjmp	.+34     	; 0x578c <nrk_ext_int_disable+0x66>
    576a:	87 30       	cpi	r24, 0x07	; 7
    576c:	21 f4       	brne	.+8      	; 0x5776 <nrk_ext_int_disable+0x50>
    576e:	80 91 6b 00 	lds	r24, 0x006B
    5772:	8f 7e       	andi	r24, 0xEF	; 239
    5774:	0b c0       	rjmp	.+22     	; 0x578c <nrk_ext_int_disable+0x66>
    5776:	88 30       	cpi	r24, 0x08	; 8
    5778:	21 f4       	brne	.+8      	; 0x5782 <nrk_ext_int_disable+0x5c>
    577a:	80 91 6b 00 	lds	r24, 0x006B
    577e:	8f 7d       	andi	r24, 0xDF	; 223
    5780:	05 c0       	rjmp	.+10     	; 0x578c <nrk_ext_int_disable+0x66>
    5782:	89 30       	cpi	r24, 0x09	; 9
    5784:	41 f4       	brne	.+16     	; 0x5796 <nrk_ext_int_disable+0x70>
    5786:	80 91 6b 00 	lds	r24, 0x006B
    578a:	8f 7b       	andi	r24, 0xBF	; 191
    578c:	80 93 6b 00 	sts	0x006B, r24
    5790:	81 e0       	ldi	r24, 0x01	; 1
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	08 95       	ret
    5796:	8a 30       	cpi	r24, 0x0A	; 10
    5798:	19 f0       	breq	.+6      	; 0x57a0 <nrk_ext_int_disable+0x7a>
    579a:	8f ef       	ldi	r24, 0xFF	; 255
    579c:	9f ef       	ldi	r25, 0xFF	; 255
    579e:	08 95       	ret
    57a0:	80 91 6b 00 	lds	r24, 0x006B
    57a4:	8f 77       	andi	r24, 0x7F	; 127
    57a6:	80 93 6b 00 	sts	0x006B, r24
    57aa:	81 e0       	ldi	r24, 0x01	; 1
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	08 95       	ret

000057b0 <nrk_ext_int_configure>:
    57b0:	88 23       	and	r24, r24
    57b2:	39 f5       	brne	.+78     	; 0x5802 <nrk_ext_int_configure+0x52>
    57b4:	50 93 98 07 	sts	0x0798, r21
    57b8:	40 93 97 07 	sts	0x0797, r20
    57bc:	66 23       	and	r22, r22
    57be:	21 f4       	brne	.+8      	; 0x57c8 <nrk_ext_int_configure+0x18>
    57c0:	80 91 69 00 	lds	r24, 0x0069
    57c4:	8c 7f       	andi	r24, 0xFC	; 252
    57c6:	45 c0       	rjmp	.+138    	; 0x5852 <nrk_ext_int_configure+0xa2>
    57c8:	61 30       	cpi	r22, 0x01	; 1
    57ca:	49 f4       	brne	.+18     	; 0x57de <nrk_ext_int_configure+0x2e>
    57cc:	80 91 69 00 	lds	r24, 0x0069
    57d0:	8d 7f       	andi	r24, 0xFD	; 253
    57d2:	80 93 69 00 	sts	0x0069, r24
    57d6:	80 91 69 00 	lds	r24, 0x0069
    57da:	81 60       	ori	r24, 0x01	; 1
    57dc:	3a c0       	rjmp	.+116    	; 0x5852 <nrk_ext_int_configure+0xa2>
    57de:	62 30       	cpi	r22, 0x02	; 2
    57e0:	49 f4       	brne	.+18     	; 0x57f4 <nrk_ext_int_configure+0x44>
    57e2:	80 91 69 00 	lds	r24, 0x0069
    57e6:	82 60       	ori	r24, 0x02	; 2
    57e8:	80 93 69 00 	sts	0x0069, r24
    57ec:	80 91 69 00 	lds	r24, 0x0069
    57f0:	8e 7f       	andi	r24, 0xFE	; 254
    57f2:	2f c0       	rjmp	.+94     	; 0x5852 <nrk_ext_int_configure+0xa2>
    57f4:	63 30       	cpi	r22, 0x03	; 3
    57f6:	09 f0       	breq	.+2      	; 0x57fa <nrk_ext_int_configure+0x4a>
    57f8:	69 c0       	rjmp	.+210    	; 0x58cc <nrk_ext_int_configure+0x11c>
    57fa:	80 91 69 00 	lds	r24, 0x0069
    57fe:	83 60       	ori	r24, 0x03	; 3
    5800:	28 c0       	rjmp	.+80     	; 0x5852 <nrk_ext_int_configure+0xa2>
    5802:	81 30       	cpi	r24, 0x01	; 1
    5804:	49 f5       	brne	.+82     	; 0x5858 <nrk_ext_int_configure+0xa8>
    5806:	50 93 96 07 	sts	0x0796, r21
    580a:	40 93 95 07 	sts	0x0795, r20
    580e:	66 23       	and	r22, r22
    5810:	21 f4       	brne	.+8      	; 0x581a <nrk_ext_int_configure+0x6a>
    5812:	80 91 69 00 	lds	r24, 0x0069
    5816:	83 7f       	andi	r24, 0xF3	; 243
    5818:	1c c0       	rjmp	.+56     	; 0x5852 <nrk_ext_int_configure+0xa2>
    581a:	61 30       	cpi	r22, 0x01	; 1
    581c:	49 f4       	brne	.+18     	; 0x5830 <nrk_ext_int_configure+0x80>
    581e:	80 91 69 00 	lds	r24, 0x0069
    5822:	87 7f       	andi	r24, 0xF7	; 247
    5824:	80 93 69 00 	sts	0x0069, r24
    5828:	80 91 69 00 	lds	r24, 0x0069
    582c:	84 60       	ori	r24, 0x04	; 4
    582e:	11 c0       	rjmp	.+34     	; 0x5852 <nrk_ext_int_configure+0xa2>
    5830:	62 30       	cpi	r22, 0x02	; 2
    5832:	49 f4       	brne	.+18     	; 0x5846 <nrk_ext_int_configure+0x96>
    5834:	80 91 69 00 	lds	r24, 0x0069
    5838:	88 60       	ori	r24, 0x08	; 8
    583a:	80 93 69 00 	sts	0x0069, r24
    583e:	80 91 69 00 	lds	r24, 0x0069
    5842:	8b 7f       	andi	r24, 0xFB	; 251
    5844:	06 c0       	rjmp	.+12     	; 0x5852 <nrk_ext_int_configure+0xa2>
    5846:	63 30       	cpi	r22, 0x03	; 3
    5848:	09 f0       	breq	.+2      	; 0x584c <nrk_ext_int_configure+0x9c>
    584a:	40 c0       	rjmp	.+128    	; 0x58cc <nrk_ext_int_configure+0x11c>
    584c:	80 91 69 00 	lds	r24, 0x0069
    5850:	8c 60       	ori	r24, 0x0C	; 12
    5852:	80 93 69 00 	sts	0x0069, r24
    5856:	37 c0       	rjmp	.+110    	; 0x58c6 <nrk_ext_int_configure+0x116>
    5858:	82 30       	cpi	r24, 0x02	; 2
    585a:	31 f5       	brne	.+76     	; 0x58a8 <nrk_ext_int_configure+0xf8>
    585c:	50 93 96 07 	sts	0x0796, r21
    5860:	40 93 95 07 	sts	0x0795, r20
    5864:	66 23       	and	r22, r22
    5866:	21 f4       	brne	.+8      	; 0x5870 <nrk_ext_int_configure+0xc0>
    5868:	80 91 69 00 	lds	r24, 0x0069
    586c:	8f 7c       	andi	r24, 0xCF	; 207
    586e:	f1 cf       	rjmp	.-30     	; 0x5852 <nrk_ext_int_configure+0xa2>
    5870:	61 30       	cpi	r22, 0x01	; 1
    5872:	49 f4       	brne	.+18     	; 0x5886 <nrk_ext_int_configure+0xd6>
    5874:	80 91 69 00 	lds	r24, 0x0069
    5878:	8f 7d       	andi	r24, 0xDF	; 223
    587a:	80 93 69 00 	sts	0x0069, r24
    587e:	80 91 69 00 	lds	r24, 0x0069
    5882:	80 61       	ori	r24, 0x10	; 16
    5884:	e6 cf       	rjmp	.-52     	; 0x5852 <nrk_ext_int_configure+0xa2>
    5886:	62 30       	cpi	r22, 0x02	; 2
    5888:	49 f4       	brne	.+18     	; 0x589c <nrk_ext_int_configure+0xec>
    588a:	80 91 69 00 	lds	r24, 0x0069
    588e:	80 62       	ori	r24, 0x20	; 32
    5890:	80 93 69 00 	sts	0x0069, r24
    5894:	80 91 69 00 	lds	r24, 0x0069
    5898:	8f 7e       	andi	r24, 0xEF	; 239
    589a:	db cf       	rjmp	.-74     	; 0x5852 <nrk_ext_int_configure+0xa2>
    589c:	63 30       	cpi	r22, 0x03	; 3
    589e:	b1 f4       	brne	.+44     	; 0x58cc <nrk_ext_int_configure+0x11c>
    58a0:	80 91 69 00 	lds	r24, 0x0069
    58a4:	80 63       	ori	r24, 0x30	; 48
    58a6:	d5 cf       	rjmp	.-86     	; 0x5852 <nrk_ext_int_configure+0xa2>
    58a8:	83 50       	subi	r24, 0x03	; 3
    58aa:	88 30       	cpi	r24, 0x08	; 8
    58ac:	18 f0       	brcs	.+6      	; 0x58b4 <nrk_ext_int_configure+0x104>
    58ae:	8f ef       	ldi	r24, 0xFF	; 255
    58b0:	9f ef       	ldi	r25, 0xFF	; 255
    58b2:	08 95       	ret
    58b4:	80 91 68 00 	lds	r24, 0x0068
    58b8:	81 60       	ori	r24, 0x01	; 1
    58ba:	80 93 68 00 	sts	0x0068, r24
    58be:	50 93 9c 07 	sts	0x079C, r21
    58c2:	40 93 9b 07 	sts	0x079B, r20
    58c6:	81 e0       	ldi	r24, 0x01	; 1
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	08 95       	ret
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	08 95       	ret

000058d2 <__vector_1>:
    58d2:	1f 92       	push	r1
    58d4:	0f 92       	push	r0
    58d6:	0f b6       	in	r0, 0x3f	; 63
    58d8:	0f 92       	push	r0
    58da:	11 24       	eor	r1, r1
    58dc:	2f 93       	push	r18
    58de:	3f 93       	push	r19
    58e0:	4f 93       	push	r20
    58e2:	5f 93       	push	r21
    58e4:	6f 93       	push	r22
    58e6:	7f 93       	push	r23
    58e8:	8f 93       	push	r24
    58ea:	9f 93       	push	r25
    58ec:	af 93       	push	r26
    58ee:	bf 93       	push	r27
    58f0:	ef 93       	push	r30
    58f2:	ff 93       	push	r31
    58f4:	e0 91 97 07 	lds	r30, 0x0797
    58f8:	f0 91 98 07 	lds	r31, 0x0798
    58fc:	30 97       	sbiw	r30, 0x00	; 0
    58fe:	11 f0       	breq	.+4      	; 0x5904 <__vector_1+0x32>
    5900:	09 95       	icall
    5902:	04 c0       	rjmp	.+8      	; 0x590c <__vector_1+0x3a>
    5904:	60 e0       	ldi	r22, 0x00	; 0
    5906:	8a e0       	ldi	r24, 0x0A	; 10
    5908:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    590c:	ff 91       	pop	r31
    590e:	ef 91       	pop	r30
    5910:	bf 91       	pop	r27
    5912:	af 91       	pop	r26
    5914:	9f 91       	pop	r25
    5916:	8f 91       	pop	r24
    5918:	7f 91       	pop	r23
    591a:	6f 91       	pop	r22
    591c:	5f 91       	pop	r21
    591e:	4f 91       	pop	r20
    5920:	3f 91       	pop	r19
    5922:	2f 91       	pop	r18
    5924:	0f 90       	pop	r0
    5926:	0f be       	out	0x3f, r0	; 63
    5928:	0f 90       	pop	r0
    592a:	1f 90       	pop	r1
    592c:	18 95       	reti

0000592e <__vector_9>:
    592e:	1f 92       	push	r1
    5930:	0f 92       	push	r0
    5932:	0f b6       	in	r0, 0x3f	; 63
    5934:	0f 92       	push	r0
    5936:	11 24       	eor	r1, r1
    5938:	2f 93       	push	r18
    593a:	3f 93       	push	r19
    593c:	4f 93       	push	r20
    593e:	5f 93       	push	r21
    5940:	6f 93       	push	r22
    5942:	7f 93       	push	r23
    5944:	8f 93       	push	r24
    5946:	9f 93       	push	r25
    5948:	af 93       	push	r26
    594a:	bf 93       	push	r27
    594c:	ef 93       	push	r30
    594e:	ff 93       	push	r31
    5950:	e0 91 9b 07 	lds	r30, 0x079B
    5954:	f0 91 9c 07 	lds	r31, 0x079C
    5958:	30 97       	sbiw	r30, 0x00	; 0
    595a:	11 f0       	breq	.+4      	; 0x5960 <__vector_9+0x32>
    595c:	09 95       	icall
    595e:	04 c0       	rjmp	.+8      	; 0x5968 <__vector_9+0x3a>
    5960:	60 e0       	ldi	r22, 0x00	; 0
    5962:	8a e0       	ldi	r24, 0x0A	; 10
    5964:	0e 94 a6 1b 	call	0x374c	; 0x374c <nrk_kernel_error_add>
    5968:	ff 91       	pop	r31
    596a:	ef 91       	pop	r30
    596c:	bf 91       	pop	r27
    596e:	af 91       	pop	r26
    5970:	9f 91       	pop	r25
    5972:	8f 91       	pop	r24
    5974:	7f 91       	pop	r23
    5976:	6f 91       	pop	r22
    5978:	5f 91       	pop	r21
    597a:	4f 91       	pop	r20
    597c:	3f 91       	pop	r19
    597e:	2f 91       	pop	r18
    5980:	0f 90       	pop	r0
    5982:	0f be       	out	0x3f, r0	; 63
    5984:	0f 90       	pop	r0
    5986:	1f 90       	pop	r1
    5988:	18 95       	reti

0000598a <_nrk_startup_ok>:

//-------------------------------------------------------------------------------------------------------
//	void halWait(uint16_t timeout)
//
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
    598a:	80 91 b0 00 	lds	r24, 0x00B0
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	81 11       	cpse	r24, r1
    5992:	91 e0       	ldi	r25, 0x01	; 1
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	98 27       	eor	r25, r24
//
//  ARGUMENTS:
    5998:	89 2f       	mov	r24, r25
    599a:	99 27       	eor	r25, r25
    599c:	08 95       	ret

0000599e <update_watchdog>:
//      uint16_t timeout
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
    599e:	08 95       	ret

000059a0 <nrk_watchdog_check>:
    59a0:	04 b6       	in	r0, 0x34	; 52
    59a2:	03 fc       	sbrc	r0, 3
    59a4:	03 c0       	rjmp	.+6      	; 0x59ac <nrk_watchdog_check+0xc>
    59a6:	81 e0       	ldi	r24, 0x01	; 1
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	08 95       	ret
    59ac:	8f ef       	ldi	r24, 0xFF	; 255
    59ae:	9f ef       	ldi	r25, 0xFF	; 255
    59b0:	08 95       	ret

000059b2 <nrk_watchdog_reset>:
    59b2:	a8 95       	wdr
    59b4:	08 95       	ret

000059b6 <nrk_watchdog_disable>:

//-------------------------------------------------------------------------------------------------------
//	void halWait(uint16_t timeout)
//
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
    59b6:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
    59ba:	a8 95       	wdr
//	void halWait(uint16_t timeout)
//
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
    59bc:	84 b7       	in	r24, 0x34	; 52
    59be:	87 7f       	andi	r24, 0xF7	; 247
    59c0:	84 bf       	out	0x34, r24	; 52
//      uint16_t timeout
    59c2:	e0 e6       	ldi	r30, 0x60	; 96
    59c4:	f0 e0       	ldi	r31, 0x00	; 0
    59c6:	80 81       	ld	r24, Z
    59c8:	88 61       	ori	r24, 0x18	; 24
    59ca:	80 83       	st	Z, r24
//          The timeout in microseconds
    59cc:	10 82       	st	Z, r1
//-------------------------------------------------------------------------------------------------------
    59ce:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    59d2:	08 95       	ret

000059d4 <nrk_watchdog_enable>:

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
        NOP();
    59d4:	0e 94 85 18 	call	0x310a	; 0x310a <nrk_int_disable>
        NOP();
    59d8:	84 b7       	in	r24, 0x34	; 52
    59da:	87 7f       	andi	r24, 0xF7	; 247
    59dc:	84 bf       	out	0x34, r24	; 52
    59de:	a8 95       	wdr
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);

    59e0:	e0 e6       	ldi	r30, 0x60	; 96
    59e2:	f0 e0       	ldi	r31, 0x00	; 0
    59e4:	80 81       	ld	r24, Z
    59e6:	88 61       	ori	r24, 0x18	; 24
    59e8:	80 83       	st	Z, r24
} // halWait
    59ea:	8d e0       	ldi	r24, 0x0D	; 13
    59ec:	80 83       	st	Z, r24
    59ee:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    59f2:	08 95       	ret

000059f4 <nrk_battery_save>:
    59f4:	08 95       	ret

000059f6 <nrk_sleep>:
    59f6:	83 b7       	in	r24, 0x33	; 51
    59f8:	81 7f       	andi	r24, 0xF1	; 241
    59fa:	86 60       	ori	r24, 0x06	; 6
    59fc:	83 bf       	out	0x33, r24	; 51
    59fe:	83 b7       	in	r24, 0x33	; 51
    5a00:	81 60       	ori	r24, 0x01	; 1
    5a02:	83 bf       	out	0x33, r24	; 51
    5a04:	88 95       	sleep
    5a06:	83 b7       	in	r24, 0x33	; 51
    5a08:	8e 7f       	andi	r24, 0xFE	; 254
    5a0a:	83 bf       	out	0x33, r24	; 51
    5a0c:	08 95       	ret

00005a0e <nrk_idle>:
    5a0e:	83 b7       	in	r24, 0x33	; 51
    5a10:	81 7f       	andi	r24, 0xF1	; 241
    5a12:	83 bf       	out	0x33, r24	; 51
    5a14:	83 b7       	in	r24, 0x33	; 51
    5a16:	81 60       	ori	r24, 0x01	; 1
    5a18:	83 bf       	out	0x33, r24	; 51
    5a1a:	88 95       	sleep
    5a1c:	83 b7       	in	r24, 0x33	; 51
    5a1e:	8e 7f       	andi	r24, 0xFE	; 254
    5a20:	83 bf       	out	0x33, r24	; 51
    5a22:	08 95       	ret

00005a24 <nrk_task_set_entry_function>:
    5a24:	fc 01       	movw	r30, r24
    5a26:	76 83       	std	Z+6, r23	; 0x06
    5a28:	65 83       	std	Z+5, r22	; 0x05
    5a2a:	08 95       	ret

00005a2c <nrk_task_stk_init>:
    5a2c:	fb 01       	movw	r30, r22
    5a2e:	da 01       	movw	r26, r20
    5a30:	25 e5       	ldi	r18, 0x55	; 85
    5a32:	2c 93       	st	X, r18
    5a34:	32 97       	sbiw	r30, 0x02	; 2
    5a36:	29 2f       	mov	r18, r25
    5a38:	33 27       	eor	r19, r19
    5a3a:	20 83       	st	Z, r18
    5a3c:	81 83       	std	Z+1, r24	; 0x01
    5a3e:	32 97       	sbiw	r30, 0x02	; 2
    5a40:	11 82       	std	Z+1, r1	; 0x01
    5a42:	10 82       	st	Z, r1
    5a44:	32 97       	sbiw	r30, 0x02	; 2
    5a46:	11 82       	std	Z+1, r1	; 0x01
    5a48:	10 82       	st	Z, r1
    5a4a:	32 97       	sbiw	r30, 0x02	; 2
    5a4c:	11 82       	std	Z+1, r1	; 0x01
    5a4e:	10 82       	st	Z, r1
    5a50:	32 97       	sbiw	r30, 0x02	; 2
    5a52:	11 82       	std	Z+1, r1	; 0x01
    5a54:	10 82       	st	Z, r1
    5a56:	32 97       	sbiw	r30, 0x02	; 2
    5a58:	11 82       	std	Z+1, r1	; 0x01
    5a5a:	10 82       	st	Z, r1
    5a5c:	32 97       	sbiw	r30, 0x02	; 2
    5a5e:	11 82       	std	Z+1, r1	; 0x01
    5a60:	10 82       	st	Z, r1
    5a62:	32 97       	sbiw	r30, 0x02	; 2
    5a64:	11 82       	std	Z+1, r1	; 0x01
    5a66:	10 82       	st	Z, r1
    5a68:	32 97       	sbiw	r30, 0x02	; 2
    5a6a:	11 82       	std	Z+1, r1	; 0x01
    5a6c:	10 82       	st	Z, r1
    5a6e:	32 97       	sbiw	r30, 0x02	; 2
    5a70:	11 82       	std	Z+1, r1	; 0x01
    5a72:	10 82       	st	Z, r1
    5a74:	32 97       	sbiw	r30, 0x02	; 2
    5a76:	11 82       	std	Z+1, r1	; 0x01
    5a78:	10 82       	st	Z, r1
    5a7a:	32 97       	sbiw	r30, 0x02	; 2
    5a7c:	11 82       	std	Z+1, r1	; 0x01
    5a7e:	10 82       	st	Z, r1
    5a80:	32 97       	sbiw	r30, 0x02	; 2
    5a82:	11 82       	std	Z+1, r1	; 0x01
    5a84:	10 82       	st	Z, r1
    5a86:	32 97       	sbiw	r30, 0x02	; 2
    5a88:	11 82       	std	Z+1, r1	; 0x01
    5a8a:	10 82       	st	Z, r1
    5a8c:	32 97       	sbiw	r30, 0x02	; 2
    5a8e:	11 82       	std	Z+1, r1	; 0x01
    5a90:	10 82       	st	Z, r1
    5a92:	32 97       	sbiw	r30, 0x02	; 2
    5a94:	11 82       	std	Z+1, r1	; 0x01
    5a96:	10 82       	st	Z, r1
    5a98:	32 97       	sbiw	r30, 0x02	; 2
    5a9a:	11 82       	std	Z+1, r1	; 0x01
    5a9c:	10 82       	st	Z, r1
    5a9e:	32 97       	sbiw	r30, 0x02	; 2
    5aa0:	11 82       	std	Z+1, r1	; 0x01
    5aa2:	10 82       	st	Z, r1
    5aa4:	cf 01       	movw	r24, r30
    5aa6:	08 95       	ret

00005aa8 <nrk_stack_pointer_init>:
    5aa8:	85 e5       	ldi	r24, 0x55	; 85
    5aaa:	80 93 fe 20 	sts	0x20FE, r24
    5aae:	ee ef       	ldi	r30, 0xFE	; 254
    5ab0:	f1 e2       	ldi	r31, 0x21	; 33
    5ab2:	f0 93 76 04 	sts	0x0476, r31
    5ab6:	e0 93 75 04 	sts	0x0475, r30
    5aba:	2c e8       	ldi	r18, 0x8C	; 140
    5abc:	38 e1       	ldi	r19, 0x18	; 24
    5abe:	83 2f       	mov	r24, r19
    5ac0:	99 27       	eor	r25, r25
    5ac2:	80 83       	st	Z, r24
    5ac4:	20 93 ff 21 	sts	0x21FF, r18
    5ac8:	08 95       	ret

00005aca <nrk_stack_pointer_restore>:
    5aca:	2c e8       	ldi	r18, 0x8C	; 140
    5acc:	38 e1       	ldi	r19, 0x18	; 24
    5ace:	83 2f       	mov	r24, r19
    5ad0:	99 27       	eor	r25, r25
    5ad2:	80 93 fe 21 	sts	0x21FE, r24
    5ad6:	20 93 ff 21 	sts	0x21FF, r18
    5ada:	08 95       	ret

00005adc <nrk_target_start>:
    5adc:	0e 94 11 2b 	call	0x5622	; 0x5622 <_nrk_setup_timer>
    5ae0:	0e 94 87 18 	call	0x310e	; 0x310e <nrk_int_enable>
    5ae4:	08 95       	ret

00005ae6 <nrk_task_set_stk>:
    5ae6:	ef 92       	push	r14
    5ae8:	ff 92       	push	r15
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	7c 01       	movw	r14, r24
    5af4:	8b 01       	movw	r16, r22
    5af6:	ea 01       	movw	r28, r20
    5af8:	40 32       	cpi	r20, 0x20	; 32
    5afa:	51 05       	cpc	r21, r1
    5afc:	18 f4       	brcc	.+6      	; 0x5b04 <nrk_task_set_stk+0x1e>
    5afe:	81 e1       	ldi	r24, 0x11	; 17
    5b00:	0e 94 ad 1b 	call	0x375a	; 0x375a <nrk_error_add>
    5b04:	c8 01       	movw	r24, r16
    5b06:	01 97       	sbiw	r24, 0x01	; 1
    5b08:	8c 0f       	add	r24, r28
    5b0a:	9d 1f       	adc	r25, r29
    5b0c:	f7 01       	movw	r30, r14
    5b0e:	92 83       	std	Z+2, r25	; 0x02
    5b10:	81 83       	std	Z+1, r24	; 0x01
    5b12:	14 83       	std	Z+4, r17	; 0x04
    5b14:	03 83       	std	Z+3, r16	; 0x03
    5b16:	df 91       	pop	r29
    5b18:	cf 91       	pop	r28
    5b1a:	1f 91       	pop	r17
    5b1c:	0f 91       	pop	r16
    5b1e:	ff 90       	pop	r15
    5b20:	ef 90       	pop	r14
    5b22:	08 95       	ret

00005b24 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    5b24:	a0 91 0b 07 	lds	r26, 0x070B
	lds r27,nrk_high_ready_TCB+1
    5b28:	b0 91 0c 07 	lds	r27, 0x070C

    	;x points to &OSTCB[x]
    
	ld r28,x+
    5b2c:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5b2e:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5b30:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5b32:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    5b34:	ff 91       	pop	r31
	pop r30
    5b36:	ef 91       	pop	r30
	pop r29
    5b38:	df 91       	pop	r29
	pop r28
    5b3a:	cf 91       	pop	r28
	pop r27
    5b3c:	bf 91       	pop	r27
	pop r26
    5b3e:	af 91       	pop	r26
	pop r25
    5b40:	9f 91       	pop	r25
	pop r24			
    5b42:	8f 91       	pop	r24
	pop r23
    5b44:	7f 91       	pop	r23
	pop r22
    5b46:	6f 91       	pop	r22
	pop r21
    5b48:	5f 91       	pop	r21
	pop r20	
    5b4a:	4f 91       	pop	r20
	pop r19
    5b4c:	3f 91       	pop	r19
	pop r18	
    5b4e:	2f 91       	pop	r18
	pop r17
    5b50:	1f 91       	pop	r17
	pop r16
    5b52:	0f 91       	pop	r16
	pop r15
    5b54:	ff 90       	pop	r15
	pop r14
    5b56:	ef 90       	pop	r14
	pop r13
    5b58:	df 90       	pop	r13
	pop r12
    5b5a:	cf 90       	pop	r12
	pop r11
    5b5c:	bf 90       	pop	r11
	pop r10
    5b5e:	af 90       	pop	r10
	pop r9
    5b60:	9f 90       	pop	r9
	pop r8
    5b62:	8f 90       	pop	r8
	pop r7
    5b64:	7f 90       	pop	r7
	pop r6
    5b66:	6f 90       	pop	r6
	pop r5
    5b68:	5f 90       	pop	r5
	pop r4
    5b6a:	4f 90       	pop	r4
	pop r3
    5b6c:	3f 90       	pop	r3
	pop r2
    5b6e:	2f 90       	pop	r2
	pop r1
    5b70:	1f 90       	pop	r1
	pop r0
    5b72:	0f 90       	pop	r0
	out __SREG__, r0
    5b74:	0f be       	out	0x3f, r0	; 63
	pop r0	
    5b76:	0f 90       	pop	r0
	   
    	reti 
    5b78:	18 95       	reti

00005b7a <vfprintf>:
    5b7a:	ab e0       	ldi	r26, 0x0B	; 11
    5b7c:	b0 e0       	ldi	r27, 0x00	; 0
    5b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    5b80:	fd e2       	ldi	r31, 0x2D	; 45
    5b82:	0c 94 30 32 	jmp	0x6460	; 0x6460 <__prologue_saves__>
    5b86:	4c 01       	movw	r8, r24
    5b88:	6b 01       	movw	r12, r22
    5b8a:	7a 01       	movw	r14, r20
    5b8c:	fc 01       	movw	r30, r24
    5b8e:	17 82       	std	Z+7, r1	; 0x07
    5b90:	16 82       	std	Z+6, r1	; 0x06
    5b92:	83 81       	ldd	r24, Z+3	; 0x03
    5b94:	81 fd       	sbrc	r24, 1
    5b96:	08 c0       	rjmp	.+16     	; 0x5ba8 <vfprintf+0x2e>
    5b98:	8f ef       	ldi	r24, 0xFF	; 255
    5b9a:	9f ef       	ldi	r25, 0xFF	; 255
    5b9c:	1a c1       	rjmp	.+564    	; 0x5dd2 <vfprintf+0x258>
    5b9e:	22 e0       	ldi	r18, 0x02	; 2
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	e2 0e       	add	r14, r18
    5ba4:	f3 1e       	adc	r15, r19
    5ba6:	0c c0       	rjmp	.+24     	; 0x5bc0 <vfprintf+0x46>
    5ba8:	96 ed       	ldi	r25, 0xD6	; 214
    5baa:	29 2e       	mov	r2, r25
    5bac:	93 e0       	ldi	r25, 0x03	; 3
    5bae:	39 2e       	mov	r3, r25
    5bb0:	3e 01       	movw	r6, r28
    5bb2:	08 94       	sec
    5bb4:	61 1c       	adc	r6, r1
    5bb6:	71 1c       	adc	r7, r1
    5bb8:	8f ec       	ldi	r24, 0xCF	; 207
    5bba:	48 2e       	mov	r4, r24
    5bbc:	83 e0       	ldi	r24, 0x03	; 3
    5bbe:	58 2e       	mov	r5, r24
    5bc0:	f4 01       	movw	r30, r8
    5bc2:	03 81       	ldd	r16, Z+3	; 0x03
    5bc4:	f6 01       	movw	r30, r12
    5bc6:	03 fd       	sbrc	r16, 3
    5bc8:	85 91       	lpm	r24, Z+
    5bca:	03 ff       	sbrs	r16, 3
    5bcc:	81 91       	ld	r24, Z+
    5bce:	6f 01       	movw	r12, r30
    5bd0:	88 23       	and	r24, r24
    5bd2:	09 f4       	brne	.+2      	; 0x5bd6 <vfprintf+0x5c>
    5bd4:	fb c0       	rjmp	.+502    	; 0x5dcc <vfprintf+0x252>
    5bd6:	85 32       	cpi	r24, 0x25	; 37
    5bd8:	59 f4       	brne	.+22     	; 0x5bf0 <vfprintf+0x76>
    5bda:	03 fd       	sbrc	r16, 3
    5bdc:	65 91       	lpm	r22, Z+
    5bde:	03 ff       	sbrs	r16, 3
    5be0:	61 91       	ld	r22, Z+
    5be2:	6f 01       	movw	r12, r30
    5be4:	65 32       	cpi	r22, 0x25	; 37
    5be6:	19 f0       	breq	.+6      	; 0x5bee <vfprintf+0x74>
    5be8:	16 2f       	mov	r17, r22
    5bea:	bb 24       	eor	r11, r11
    5bec:	1c c0       	rjmp	.+56     	; 0x5c26 <vfprintf+0xac>
    5bee:	85 e2       	ldi	r24, 0x25	; 37
    5bf0:	b4 01       	movw	r22, r8
    5bf2:	99 27       	eor	r25, r25
    5bf4:	2a c0       	rjmp	.+84     	; 0x5c4a <vfprintf+0xd0>
    5bf6:	11 23       	and	r17, r17
    5bf8:	59 f1       	breq	.+86     	; 0x5c50 <vfprintf+0xd6>
    5bfa:	61 2f       	mov	r22, r17
    5bfc:	77 27       	eor	r23, r23
    5bfe:	c1 01       	movw	r24, r2
    5c00:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <strchr_P>
    5c04:	89 2b       	or	r24, r25
    5c06:	49 f4       	brne	.+18     	; 0x5c1a <vfprintf+0xa0>
    5c08:	13 32       	cpi	r17, 0x23	; 35
    5c0a:	19 f4       	brne	.+6      	; 0x5c12 <vfprintf+0x98>
    5c0c:	f0 e1       	ldi	r31, 0x10	; 16
    5c0e:	bf 2a       	or	r11, r31
    5c10:	04 c0       	rjmp	.+8      	; 0x5c1a <vfprintf+0xa0>
    5c12:	1c 36       	cpi	r17, 0x6C	; 108
    5c14:	61 f4       	brne	.+24     	; 0x5c2e <vfprintf+0xb4>
    5c16:	20 e8       	ldi	r18, 0x80	; 128
    5c18:	b2 2a       	or	r11, r18
    5c1a:	f6 01       	movw	r30, r12
    5c1c:	03 fd       	sbrc	r16, 3
    5c1e:	15 91       	lpm	r17, Z+
    5c20:	03 ff       	sbrs	r16, 3
    5c22:	11 91       	ld	r17, Z+
    5c24:	6f 01       	movw	r12, r30
    5c26:	b7 fe       	sbrs	r11, 7
    5c28:	e6 cf       	rjmp	.-52     	; 0x5bf6 <vfprintf+0x7c>
    5c2a:	11 23       	and	r17, r17
    5c2c:	89 f0       	breq	.+34     	; 0x5c50 <vfprintf+0xd6>
    5c2e:	61 2f       	mov	r22, r17
    5c30:	77 27       	eor	r23, r23
    5c32:	c2 01       	movw	r24, r4
    5c34:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <strchr_P>
    5c38:	89 2b       	or	r24, r25
    5c3a:	51 f0       	breq	.+20     	; 0x5c50 <vfprintf+0xd6>
    5c3c:	24 e0       	ldi	r18, 0x04	; 4
    5c3e:	30 e0       	ldi	r19, 0x00	; 0
    5c40:	e2 0e       	add	r14, r18
    5c42:	f3 1e       	adc	r15, r19
    5c44:	b4 01       	movw	r22, r8
    5c46:	8f e3       	ldi	r24, 0x3F	; 63
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5c4e:	b8 cf       	rjmp	.-144    	; 0x5bc0 <vfprintf+0x46>
    5c50:	13 36       	cpi	r17, 0x63	; 99
    5c52:	29 f0       	breq	.+10     	; 0x5c5e <vfprintf+0xe4>
    5c54:	13 37       	cpi	r17, 0x73	; 115
    5c56:	81 f0       	breq	.+32     	; 0x5c78 <vfprintf+0xfe>
    5c58:	13 35       	cpi	r17, 0x53	; 83
    5c5a:	f9 f4       	brne	.+62     	; 0x5c9a <vfprintf+0x120>
    5c5c:	0b c0       	rjmp	.+22     	; 0x5c74 <vfprintf+0xfa>
    5c5e:	87 01       	movw	r16, r14
    5c60:	0e 5f       	subi	r16, 0xFE	; 254
    5c62:	1f 4f       	sbci	r17, 0xFF	; 255
    5c64:	b4 01       	movw	r22, r8
    5c66:	f7 01       	movw	r30, r14
    5c68:	80 81       	ld	r24, Z
    5c6a:	91 81       	ldd	r25, Z+1	; 0x01
    5c6c:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5c70:	78 01       	movw	r14, r16
    5c72:	a6 cf       	rjmp	.-180    	; 0x5bc0 <vfprintf+0x46>
    5c74:	f1 e0       	ldi	r31, 0x01	; 1
    5c76:	bf 2a       	or	r11, r31
    5c78:	f7 01       	movw	r30, r14
    5c7a:	00 81       	ld	r16, Z
    5c7c:	11 81       	ldd	r17, Z+1	; 0x01
    5c7e:	04 c0       	rjmp	.+8      	; 0x5c88 <vfprintf+0x10e>
    5c80:	b4 01       	movw	r22, r8
    5c82:	99 27       	eor	r25, r25
    5c84:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5c88:	f8 01       	movw	r30, r16
    5c8a:	b0 fc       	sbrc	r11, 0
    5c8c:	85 91       	lpm	r24, Z+
    5c8e:	b0 fe       	sbrs	r11, 0
    5c90:	81 91       	ld	r24, Z+
    5c92:	8f 01       	movw	r16, r30
    5c94:	88 23       	and	r24, r24
    5c96:	a1 f7       	brne	.-24     	; 0x5c80 <vfprintf+0x106>
    5c98:	82 cf       	rjmp	.-252    	; 0x5b9e <vfprintf+0x24>
    5c9a:	14 36       	cpi	r17, 0x64	; 100
    5c9c:	11 f0       	breq	.+4      	; 0x5ca2 <vfprintf+0x128>
    5c9e:	19 36       	cpi	r17, 0x69	; 105
    5ca0:	49 f5       	brne	.+82     	; 0x5cf4 <vfprintf+0x17a>
    5ca2:	b7 fe       	sbrs	r11, 7
    5ca4:	0a c0       	rjmp	.+20     	; 0x5cba <vfprintf+0x140>
    5ca6:	f7 01       	movw	r30, r14
    5ca8:	60 81       	ld	r22, Z
    5caa:	71 81       	ldd	r23, Z+1	; 0x01
    5cac:	82 81       	ldd	r24, Z+2	; 0x02
    5cae:	93 81       	ldd	r25, Z+3	; 0x03
    5cb0:	24 e0       	ldi	r18, 0x04	; 4
    5cb2:	30 e0       	ldi	r19, 0x00	; 0
    5cb4:	e2 0e       	add	r14, r18
    5cb6:	f3 1e       	adc	r15, r19
    5cb8:	0d c0       	rjmp	.+26     	; 0x5cd4 <vfprintf+0x15a>
    5cba:	f7 01       	movw	r30, r14
    5cbc:	80 81       	ld	r24, Z
    5cbe:	91 81       	ldd	r25, Z+1	; 0x01
    5cc0:	9c 01       	movw	r18, r24
    5cc2:	b9 01       	movw	r22, r18
    5cc4:	88 27       	eor	r24, r24
    5cc6:	77 fd       	sbrc	r23, 7
    5cc8:	80 95       	com	r24
    5cca:	98 2f       	mov	r25, r24
    5ccc:	42 e0       	ldi	r20, 0x02	; 2
    5cce:	50 e0       	ldi	r21, 0x00	; 0
    5cd0:	e4 0e       	add	r14, r20
    5cd2:	f5 1e       	adc	r15, r21
    5cd4:	5f ee       	ldi	r21, 0xEF	; 239
    5cd6:	b5 22       	and	r11, r21
    5cd8:	97 ff       	sbrs	r25, 7
    5cda:	09 c0       	rjmp	.+18     	; 0x5cee <vfprintf+0x174>
    5cdc:	90 95       	com	r25
    5cde:	80 95       	com	r24
    5ce0:	70 95       	com	r23
    5ce2:	61 95       	neg	r22
    5ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cea:	e0 e4       	ldi	r30, 0x40	; 64
    5cec:	be 2a       	or	r11, r30
    5cee:	2a e0       	ldi	r18, 0x0A	; 10
    5cf0:	30 e0       	ldi	r19, 0x00	; 0
    5cf2:	3a c0       	rjmp	.+116    	; 0x5d68 <vfprintf+0x1ee>
    5cf4:	10 37       	cpi	r17, 0x70	; 112
    5cf6:	b1 f0       	breq	.+44     	; 0x5d24 <vfprintf+0x1aa>
    5cf8:	11 37       	cpi	r17, 0x71	; 113
    5cfa:	30 f4       	brcc	.+12     	; 0x5d08 <vfprintf+0x18e>
    5cfc:	18 35       	cpi	r17, 0x58	; 88
    5cfe:	c9 f0       	breq	.+50     	; 0x5d32 <vfprintf+0x1b8>
    5d00:	1f 36       	cpi	r17, 0x6F	; 111
    5d02:	09 f0       	breq	.+2      	; 0x5d06 <vfprintf+0x18c>
    5d04:	63 c0       	rjmp	.+198    	; 0x5dcc <vfprintf+0x252>
    5d06:	06 c0       	rjmp	.+12     	; 0x5d14 <vfprintf+0x19a>
    5d08:	15 37       	cpi	r17, 0x75	; 117
    5d0a:	39 f0       	breq	.+14     	; 0x5d1a <vfprintf+0x1a0>
    5d0c:	18 37       	cpi	r17, 0x78	; 120
    5d0e:	09 f0       	breq	.+2      	; 0x5d12 <vfprintf+0x198>
    5d10:	5d c0       	rjmp	.+186    	; 0x5dcc <vfprintf+0x252>
    5d12:	0a c0       	rjmp	.+20     	; 0x5d28 <vfprintf+0x1ae>
    5d14:	28 e0       	ldi	r18, 0x08	; 8
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	10 c0       	rjmp	.+32     	; 0x5d3a <vfprintf+0x1c0>
    5d1a:	ff ee       	ldi	r31, 0xEF	; 239
    5d1c:	bf 22       	and	r11, r31
    5d1e:	2a e0       	ldi	r18, 0x0A	; 10
    5d20:	30 e0       	ldi	r19, 0x00	; 0
    5d22:	0b c0       	rjmp	.+22     	; 0x5d3a <vfprintf+0x1c0>
    5d24:	20 e1       	ldi	r18, 0x10	; 16
    5d26:	b2 2a       	or	r11, r18
    5d28:	34 e2       	ldi	r19, 0x24	; 36
    5d2a:	b3 2a       	or	r11, r19
    5d2c:	20 e1       	ldi	r18, 0x10	; 16
    5d2e:	30 e0       	ldi	r19, 0x00	; 0
    5d30:	04 c0       	rjmp	.+8      	; 0x5d3a <vfprintf+0x1c0>
    5d32:	44 e0       	ldi	r20, 0x04	; 4
    5d34:	b4 2a       	or	r11, r20
    5d36:	20 e1       	ldi	r18, 0x10	; 16
    5d38:	32 e0       	ldi	r19, 0x02	; 2
    5d3a:	b7 fe       	sbrs	r11, 7
    5d3c:	0a c0       	rjmp	.+20     	; 0x5d52 <vfprintf+0x1d8>
    5d3e:	f7 01       	movw	r30, r14
    5d40:	60 81       	ld	r22, Z
    5d42:	71 81       	ldd	r23, Z+1	; 0x01
    5d44:	82 81       	ldd	r24, Z+2	; 0x02
    5d46:	93 81       	ldd	r25, Z+3	; 0x03
    5d48:	44 e0       	ldi	r20, 0x04	; 4
    5d4a:	50 e0       	ldi	r21, 0x00	; 0
    5d4c:	e4 0e       	add	r14, r20
    5d4e:	f5 1e       	adc	r15, r21
    5d50:	0b c0       	rjmp	.+22     	; 0x5d68 <vfprintf+0x1ee>
    5d52:	f7 01       	movw	r30, r14
    5d54:	80 81       	ld	r24, Z
    5d56:	91 81       	ldd	r25, Z+1	; 0x01
    5d58:	ac 01       	movw	r20, r24
    5d5a:	ba 01       	movw	r22, r20
    5d5c:	88 27       	eor	r24, r24
    5d5e:	99 27       	eor	r25, r25
    5d60:	e2 e0       	ldi	r30, 0x02	; 2
    5d62:	f0 e0       	ldi	r31, 0x00	; 0
    5d64:	ee 0e       	add	r14, r30
    5d66:	ff 1e       	adc	r15, r31
    5d68:	a3 01       	movw	r20, r6
    5d6a:	0e 94 49 30 	call	0x6092	; 0x6092 <__ultoa_invert>
    5d6e:	a8 2e       	mov	r10, r24
    5d70:	a6 18       	sub	r10, r6
    5d72:	0b 2d       	mov	r16, r11
    5d74:	11 27       	eor	r17, r17
    5d76:	06 ff       	sbrs	r16, 6
    5d78:	05 c0       	rjmp	.+10     	; 0x5d84 <vfprintf+0x20a>
    5d7a:	b4 01       	movw	r22, r8
    5d7c:	8d e2       	ldi	r24, 0x2D	; 45
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5d84:	04 ff       	sbrs	r16, 4
    5d86:	15 c0       	rjmp	.+42     	; 0x5db2 <vfprintf+0x238>
    5d88:	fe 01       	movw	r30, r28
    5d8a:	ea 0d       	add	r30, r10
    5d8c:	f1 1d       	adc	r31, r1
    5d8e:	80 81       	ld	r24, Z
    5d90:	80 33       	cpi	r24, 0x30	; 48
    5d92:	79 f0       	breq	.+30     	; 0x5db2 <vfprintf+0x238>
    5d94:	b4 01       	movw	r22, r8
    5d96:	80 e3       	ldi	r24, 0x30	; 48
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5d9e:	02 ff       	sbrs	r16, 2
    5da0:	08 c0       	rjmp	.+16     	; 0x5db2 <vfprintf+0x238>
    5da2:	00 72       	andi	r16, 0x20	; 32
    5da4:	10 70       	andi	r17, 0x00	; 0
    5da6:	b4 01       	movw	r22, r8
    5da8:	c8 01       	movw	r24, r16
    5daa:	88 5a       	subi	r24, 0xA8	; 168
    5dac:	9f 4f       	sbci	r25, 0xFF	; 255
    5dae:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5db2:	aa 94       	dec	r10
    5db4:	f3 01       	movw	r30, r6
    5db6:	ea 0d       	add	r30, r10
    5db8:	f1 1d       	adc	r31, r1
    5dba:	80 81       	ld	r24, Z
    5dbc:	b4 01       	movw	r22, r8
    5dbe:	99 27       	eor	r25, r25
    5dc0:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <fputc>
    5dc4:	aa 20       	and	r10, r10
    5dc6:	09 f4       	brne	.+2      	; 0x5dca <vfprintf+0x250>
    5dc8:	fb ce       	rjmp	.-522    	; 0x5bc0 <vfprintf+0x46>
    5dca:	f3 cf       	rjmp	.-26     	; 0x5db2 <vfprintf+0x238>
    5dcc:	f4 01       	movw	r30, r8
    5dce:	86 81       	ldd	r24, Z+6	; 0x06
    5dd0:	97 81       	ldd	r25, Z+7	; 0x07
    5dd2:	e2 e1       	ldi	r30, 0x12	; 18
    5dd4:	2b 96       	adiw	r28, 0x0b	; 11
    5dd6:	0c 94 4c 32 	jmp	0x6498	; 0x6498 <__epilogue_restores__>

00005dda <do_rand>:
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
    5dda:	a0 e0       	ldi	r26, 0x00	; 0
    5ddc:	b0 e0       	ldi	r27, 0x00	; 0
    5dde:	e3 ef       	ldi	r30, 0xF3	; 243
    5de0:	fe e2       	ldi	r31, 0x2E	; 46
    5de2:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__prologue_saves__+0x10>
    5de6:	ec 01       	movw	r28, r24
    5de8:	68 81       	ld	r22, Y
    5dea:	79 81       	ldd	r23, Y+1	; 0x01
    5dec:	8a 81       	ldd	r24, Y+2	; 0x02
    5dee:	9b 81       	ldd	r25, Y+3	; 0x03
    5df0:	61 15       	cp	r22, r1
    5df2:	71 05       	cpc	r23, r1
    5df4:	81 05       	cpc	r24, r1
    5df6:	91 05       	cpc	r25, r1
    5df8:	49 f4       	brne	.+18     	; 0x5e0c <do_rand+0x32>
    5dfa:	84 e2       	ldi	r24, 0x24	; 36
    5dfc:	a8 2e       	mov	r10, r24
    5dfe:	89 ed       	ldi	r24, 0xD9	; 217
    5e00:	b8 2e       	mov	r11, r24
    5e02:	8b e5       	ldi	r24, 0x5B	; 91
    5e04:	c8 2e       	mov	r12, r24
    5e06:	87 e0       	ldi	r24, 0x07	; 7
    5e08:	d8 2e       	mov	r13, r24
    5e0a:	02 c0       	rjmp	.+4      	; 0x5e10 <do_rand+0x36>
    5e0c:	5b 01       	movw	r10, r22
    5e0e:	6c 01       	movw	r12, r24
    5e10:	c6 01       	movw	r24, r12
    5e12:	b5 01       	movw	r22, r10
    5e14:	2d e1       	ldi	r18, 0x1D	; 29
    5e16:	33 ef       	ldi	r19, 0xF3	; 243
    5e18:	41 e0       	ldi	r20, 0x01	; 1
    5e1a:	50 e0       	ldi	r21, 0x00	; 0
    5e1c:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <__divmodsi4>
    5e20:	27 ea       	ldi	r18, 0xA7	; 167
    5e22:	31 e4       	ldi	r19, 0x41	; 65
    5e24:	40 e0       	ldi	r20, 0x00	; 0
    5e26:	50 e0       	ldi	r21, 0x00	; 0
    5e28:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    5e2c:	7b 01       	movw	r14, r22
    5e2e:	8c 01       	movw	r16, r24
    5e30:	c6 01       	movw	r24, r12
    5e32:	b5 01       	movw	r22, r10
    5e34:	2d e1       	ldi	r18, 0x1D	; 29
    5e36:	33 ef       	ldi	r19, 0xF3	; 243
    5e38:	41 e0       	ldi	r20, 0x01	; 1
    5e3a:	50 e0       	ldi	r21, 0x00	; 0
    5e3c:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <__divmodsi4>
    5e40:	ca 01       	movw	r24, r20
    5e42:	b9 01       	movw	r22, r18
    5e44:	24 e1       	ldi	r18, 0x14	; 20
    5e46:	3b e0       	ldi	r19, 0x0B	; 11
    5e48:	40 e0       	ldi	r20, 0x00	; 0
    5e4a:	50 e0       	ldi	r21, 0x00	; 0
    5e4c:	0e 94 c8 31 	call	0x6390	; 0x6390 <__mulsi3>
    5e50:	e6 1a       	sub	r14, r22
    5e52:	f7 0a       	sbc	r15, r23
    5e54:	08 0b       	sbc	r16, r24
    5e56:	19 0b       	sbc	r17, r25
    5e58:	17 ff       	sbrs	r17, 7
    5e5a:	08 c0       	rjmp	.+16     	; 0x5e6c <do_rand+0x92>
    5e5c:	8f ef       	ldi	r24, 0xFF	; 255
    5e5e:	9f ef       	ldi	r25, 0xFF	; 255
    5e60:	af ef       	ldi	r26, 0xFF	; 255
    5e62:	bf e7       	ldi	r27, 0x7F	; 127
    5e64:	e8 0e       	add	r14, r24
    5e66:	f9 1e       	adc	r15, r25
    5e68:	0a 1f       	adc	r16, r26
    5e6a:	1b 1f       	adc	r17, r27
    5e6c:	e8 82       	st	Y, r14
    5e6e:	f9 82       	std	Y+1, r15	; 0x01
    5e70:	0a 83       	std	Y+2, r16	; 0x02
    5e72:	1b 83       	std	Y+3, r17	; 0x03
    5e74:	c7 01       	movw	r24, r14
    5e76:	9f 77       	andi	r25, 0x7F	; 127
    5e78:	ea e0       	ldi	r30, 0x0A	; 10
    5e7a:	cd b7       	in	r28, 0x3d	; 61
    5e7c:	de b7       	in	r29, 0x3e	; 62
    5e7e:	0c 94 54 32 	jmp	0x64a8	; 0x64a8 <__epilogue_restores__+0x10>

00005e82 <rand_r>:
    5e82:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <do_rand>
    5e86:	08 95       	ret

00005e88 <rand>:
    5e88:	8f ea       	ldi	r24, 0xAF	; 175
    5e8a:	92 e0       	ldi	r25, 0x02	; 2
    5e8c:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <do_rand>
    5e90:	08 95       	ret

00005e92 <srand>:
    5e92:	aa 27       	eor	r26, r26
    5e94:	bb 27       	eor	r27, r27
    5e96:	80 93 af 02 	sts	0x02AF, r24
    5e9a:	90 93 b0 02 	sts	0x02B0, r25
    5e9e:	a0 93 b1 02 	sts	0x02B1, r26
    5ea2:	b0 93 b2 02 	sts	0x02B2, r27
    5ea6:	08 95       	ret

00005ea8 <strchr_P>:
    5ea8:	fc 01       	movw	r30, r24
    5eaa:	05 90       	lpm	r0, Z+
    5eac:	06 16       	cp	r0, r22
    5eae:	21 f0       	breq	.+8      	; 0x5eb8 <strchr_P+0x10>
    5eb0:	00 20       	and	r0, r0
    5eb2:	d9 f7       	brne	.-10     	; 0x5eaa <strchr_P+0x2>
    5eb4:	c0 01       	movw	r24, r0
    5eb6:	08 95       	ret
    5eb8:	31 97       	sbiw	r30, 0x01	; 1
    5eba:	cf 01       	movw	r24, r30
    5ebc:	08 95       	ret

00005ebe <fdevopen>:
    5ebe:	ef 92       	push	r14
    5ec0:	ff 92       	push	r15
    5ec2:	0f 93       	push	r16
    5ec4:	1f 93       	push	r17
    5ec6:	cf 93       	push	r28
    5ec8:	df 93       	push	r29
    5eca:	8c 01       	movw	r16, r24
    5ecc:	7b 01       	movw	r14, r22
    5ece:	89 2b       	or	r24, r25
    5ed0:	11 f4       	brne	.+4      	; 0x5ed6 <fdevopen+0x18>
    5ed2:	67 2b       	or	r22, r23
    5ed4:	d1 f1       	breq	.+116    	; 0x5f4a <fdevopen+0x8c>
    5ed6:	6e e0       	ldi	r22, 0x0E	; 14
    5ed8:	70 e0       	ldi	r23, 0x00	; 0
    5eda:	81 e0       	ldi	r24, 0x01	; 1
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	0e 94 a7 30 	call	0x614e	; 0x614e <calloc>
    5ee2:	fc 01       	movw	r30, r24
    5ee4:	00 97       	sbiw	r24, 0x00	; 0
    5ee6:	89 f1       	breq	.+98     	; 0x5f4a <fdevopen+0x8c>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	80 e8       	ldi	r24, 0x80	; 128
    5eec:	83 83       	std	Z+3, r24	; 0x03
    5eee:	e1 14       	cp	r14, r1
    5ef0:	f1 04       	cpc	r15, r1
    5ef2:	71 f0       	breq	.+28     	; 0x5f10 <fdevopen+0x52>
    5ef4:	f3 86       	std	Z+11, r15	; 0x0b
    5ef6:	e2 86       	std	Z+10, r14	; 0x0a
    5ef8:	81 e8       	ldi	r24, 0x81	; 129
    5efa:	83 83       	std	Z+3, r24	; 0x03
    5efc:	80 91 9d 07 	lds	r24, 0x079D
    5f00:	90 91 9e 07 	lds	r25, 0x079E
    5f04:	89 2b       	or	r24, r25
    5f06:	21 f4       	brne	.+8      	; 0x5f10 <fdevopen+0x52>
    5f08:	f0 93 9e 07 	sts	0x079E, r31
    5f0c:	e0 93 9d 07 	sts	0x079D, r30
    5f10:	01 15       	cp	r16, r1
    5f12:	11 05       	cpc	r17, r1
    5f14:	e1 f0       	breq	.+56     	; 0x5f4e <fdevopen+0x90>
    5f16:	11 87       	std	Z+9, r17	; 0x09
    5f18:	00 87       	std	Z+8, r16	; 0x08
    5f1a:	83 81       	ldd	r24, Z+3	; 0x03
    5f1c:	82 60       	ori	r24, 0x02	; 2
    5f1e:	83 83       	std	Z+3, r24	; 0x03
    5f20:	80 91 9f 07 	lds	r24, 0x079F
    5f24:	90 91 a0 07 	lds	r25, 0x07A0
    5f28:	89 2b       	or	r24, r25
    5f2a:	89 f4       	brne	.+34     	; 0x5f4e <fdevopen+0x90>
    5f2c:	f0 93 a0 07 	sts	0x07A0, r31
    5f30:	e0 93 9f 07 	sts	0x079F, r30
    5f34:	80 91 a1 07 	lds	r24, 0x07A1
    5f38:	90 91 a2 07 	lds	r25, 0x07A2
    5f3c:	89 2b       	or	r24, r25
    5f3e:	39 f4       	brne	.+14     	; 0x5f4e <fdevopen+0x90>
    5f40:	f0 93 a2 07 	sts	0x07A2, r31
    5f44:	e0 93 a1 07 	sts	0x07A1, r30
    5f48:	02 c0       	rjmp	.+4      	; 0x5f4e <fdevopen+0x90>
    5f4a:	a0 e0       	ldi	r26, 0x00	; 0
    5f4c:	b0 e0       	ldi	r27, 0x00	; 0
    5f4e:	cd 01       	movw	r24, r26
    5f50:	e6 e0       	ldi	r30, 0x06	; 6
    5f52:	cd b7       	in	r28, 0x3d	; 61
    5f54:	de b7       	in	r29, 0x3e	; 62
    5f56:	0c 94 58 32 	jmp	0x64b0	; 0x64b0 <__epilogue_restores__+0x18>

00005f5a <fputc>:
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
//      uint16_t timeout
//          The timeout in microseconds
    5f5a:	0f 93       	push	r16
    5f5c:	1f 93       	push	r17
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29
    5f62:	8c 01       	movw	r16, r24
    5f64:	eb 01       	movw	r28, r22
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {
    5f66:	8b 81       	ldd	r24, Y+3	; 0x03
    5f68:	99 27       	eor	r25, r25
    5f6a:	81 ff       	sbrs	r24, 1
    5f6c:	1b c0       	rjmp	.+54     	; 0x5fa4 <fputc+0x4a>

    // This sequence uses exactly 8 clock cycle for each round
    do {
    5f6e:	82 ff       	sbrs	r24, 2
    5f70:	0d c0       	rjmp	.+26     	; 0x5f8c <fputc+0x32>
        NOP();
    5f72:	2e 81       	ldd	r18, Y+6	; 0x06
    5f74:	3f 81       	ldd	r19, Y+7	; 0x07
    5f76:	8c 81       	ldd	r24, Y+4	; 0x04
    5f78:	9d 81       	ldd	r25, Y+5	; 0x05
    5f7a:	28 17       	cp	r18, r24
    5f7c:	39 07       	cpc	r19, r25
    5f7e:	64 f4       	brge	.+24     	; 0x5f98 <fputc+0x3e>
        NOP();
    5f80:	e8 81       	ld	r30, Y
    5f82:	f9 81       	ldd	r31, Y+1	; 0x01
    5f84:	01 93       	st	Z+, r16
    5f86:	f9 83       	std	Y+1, r31	; 0x01
    5f88:	e8 83       	st	Y, r30
    5f8a:	06 c0       	rjmp	.+12     	; 0x5f98 <fputc+0x3e>
        NOP();
        NOP();
    } while (--timeout);

    5f8c:	e8 85       	ldd	r30, Y+8	; 0x08
    5f8e:	f9 85       	ldd	r31, Y+9	; 0x09
    5f90:	80 2f       	mov	r24, r16
    5f92:	09 95       	icall
    5f94:	89 2b       	or	r24, r25
    5f96:	31 f4       	brne	.+12     	; 0x5fa4 <fputc+0x4a>
} // halWait
    5f98:	8e 81       	ldd	r24, Y+6	; 0x06
    5f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    5f9c:	01 96       	adiw	r24, 0x01	; 1
    5f9e:	9f 83       	std	Y+7, r25	; 0x07
    5fa0:	8e 83       	std	Y+6, r24	; 0x06
    5fa2:	02 c0       	rjmp	.+4      	; 0x5fa8 <fputc+0x4e>
    5fa4:	0f ef       	ldi	r16, 0xFF	; 255
    5fa6:	1f ef       	ldi	r17, 0xFF	; 255
    5fa8:	c8 01       	movw	r24, r16
    5faa:	df 91       	pop	r29
    5fac:	cf 91       	pop	r28
    5fae:	1f 91       	pop	r17
    5fb0:	0f 91       	pop	r16
    5fb2:	08 95       	ret

00005fb4 <printf>:
//
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
//      uint16_t timeout
    5fb4:	a2 e0       	ldi	r26, 0x02	; 2
    5fb6:	b0 e0       	ldi	r27, 0x00	; 0
    5fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    5fba:	ff e2       	ldi	r31, 0x2F	; 47
    5fbc:	0c 94 40 32 	jmp	0x6480	; 0x6480 <__prologue_saves__+0x20>
    5fc0:	fe 01       	movw	r30, r28
    5fc2:	37 96       	adiw	r30, 0x07	; 7
    5fc4:	61 91       	ld	r22, Z+
    5fc6:	71 91       	ld	r23, Z+
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    5fc8:	fa 83       	std	Y+2, r31	; 0x02
    5fca:	e9 83       	std	Y+1, r30	; 0x01
    // This sequence uses exactly 8 clock cycle for each round
    5fcc:	af 01       	movw	r20, r30
    5fce:	80 91 9f 07 	lds	r24, 0x079F
    5fd2:	90 91 a0 07 	lds	r25, 0x07A0
    5fd6:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <vfprintf>
    5fda:	e2 e0       	ldi	r30, 0x02	; 2
    5fdc:	22 96       	adiw	r28, 0x02	; 2
    5fde:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__epilogue_restores__+0x20>

00005fe2 <puts>:
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
//      uint16_t timeout
//          The timeout in microseconds
    5fe2:	0f 93       	push	r16
    5fe4:	1f 93       	push	r17
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
    5fea:	8c 01       	movw	r16, r24
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    5fec:	e0 91 9f 07 	lds	r30, 0x079F
    5ff0:	f0 91 a0 07 	lds	r31, 0x07A0
    5ff4:	83 81       	ldd	r24, Z+3	; 0x03
    5ff6:	81 ff       	sbrs	r24, 1
    5ff8:	1f c0       	rjmp	.+62     	; 0x6038 <puts+0x56>
    5ffa:	c0 e0       	ldi	r28, 0x00	; 0
    5ffc:	d0 e0       	ldi	r29, 0x00	; 0
    5ffe:	0a c0       	rjmp	.+20     	; 0x6014 <puts+0x32>
    do {
        NOP();
        NOP();
        NOP();
    6000:	fd 01       	movw	r30, r26
    6002:	20 85       	ldd	r18, Z+8	; 0x08
    6004:	31 85       	ldd	r19, Z+9	; 0x09
    6006:	bd 01       	movw	r22, r26
    6008:	f9 01       	movw	r30, r18
    600a:	09 95       	icall
    600c:	89 2b       	or	r24, r25
    600e:	11 f0       	breq	.+4      	; 0x6014 <puts+0x32>
    6010:	cf ef       	ldi	r28, 0xFF	; 255
    6012:	df ef       	ldi	r29, 0xFF	; 255
void halWait(uint16_t timeout) {

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
    6014:	f8 01       	movw	r30, r16
    6016:	81 91       	ld	r24, Z+
    6018:	8f 01       	movw	r16, r30
    601a:	a0 91 9f 07 	lds	r26, 0x079F
    601e:	b0 91 a0 07 	lds	r27, 0x07A0
    6022:	88 23       	and	r24, r24
    6024:	69 f7       	brne	.-38     	; 0x6000 <puts+0x1e>
        NOP();
        NOP();
    } while (--timeout);
    6026:	fd 01       	movw	r30, r26
    6028:	20 85       	ldd	r18, Z+8	; 0x08
    602a:	31 85       	ldd	r19, Z+9	; 0x09
    602c:	bd 01       	movw	r22, r26
    602e:	8a e0       	ldi	r24, 0x0A	; 10
    6030:	f9 01       	movw	r30, r18
    6032:	09 95       	icall
    6034:	89 2b       	or	r24, r25
    6036:	11 f0       	breq	.+4      	; 0x603c <puts+0x5a>
    6038:	cf ef       	ldi	r28, 0xFF	; 255
    603a:	df ef       	ldi	r29, 0xFF	; 255

} // halWait
    603c:	ce 01       	movw	r24, r28
    603e:	df 91       	pop	r29
    6040:	cf 91       	pop	r28
    6042:	1f 91       	pop	r17
    6044:	0f 91       	pop	r16
    6046:	08 95       	ret

00006048 <sprintf>:
//
//  ARGUMENTS:
//      uint16_t timeout
//          The timeout in microseconds
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {
    6048:	a0 e1       	ldi	r26, 0x10	; 16
    604a:	b0 e0       	ldi	r27, 0x00	; 0
    604c:	ea e2       	ldi	r30, 0x2A	; 42
    604e:	f0 e3       	ldi	r31, 0x30	; 48
    6050:	0c 94 3e 32 	jmp	0x647c	; 0x647c <__prologue_saves__+0x1c>
    6054:	0f 89       	ldd	r16, Y+23	; 0x17
    6056:	18 8d       	ldd	r17, Y+24	; 0x18

    // This sequence uses exactly 8 clock cycle for each round
    do {
        NOP();
        NOP();
    6058:	86 e0       	ldi	r24, 0x06	; 6
    605a:	8e 83       	std	Y+6, r24	; 0x06
        NOP();
    605c:	1c 83       	std	Y+4, r17	; 0x04
    605e:	0b 83       	std	Y+3, r16	; 0x03
        NOP();
    6060:	8f ef       	ldi	r24, 0xFF	; 255
    6062:	9f e7       	ldi	r25, 0x7F	; 127
    6064:	98 87       	std	Y+8, r25	; 0x08
    6066:	8f 83       	std	Y+7, r24	; 0x07
    } while (--timeout);
    6068:	ae 01       	movw	r20, r28
    606a:	45 5e       	subi	r20, 0xE5	; 229
    606c:	5f 4f       	sbci	r21, 0xFF	; 255
    606e:	5a 83       	std	Y+2, r21	; 0x02
    6070:	49 83       	std	Y+1, r20	; 0x01

    6072:	69 8d       	ldd	r22, Y+25	; 0x19
    6074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6076:	ce 01       	movw	r24, r28
    6078:	03 96       	adiw	r24, 0x03	; 3
    607a:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <vfprintf>
} // halWait
    607e:	29 85       	ldd	r18, Y+9	; 0x09
    6080:	3a 85       	ldd	r19, Y+10	; 0x0a
    6082:	02 0f       	add	r16, r18
    6084:	13 1f       	adc	r17, r19
    6086:	f8 01       	movw	r30, r16
    6088:	10 82       	st	Z, r1
    608a:	e4 e0       	ldi	r30, 0x04	; 4
    608c:	60 96       	adiw	r28, 0x10	; 16
    608e:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__epilogue_restores__+0x1c>

00006092 <__ultoa_invert>:
    6092:	fa 01       	movw	r30, r20
    6094:	aa 27       	eor	r26, r26
    6096:	28 30       	cpi	r18, 0x08	; 8
    6098:	51 f1       	breq	.+84     	; 0x60ee <__ultoa_invert+0x5c>
    609a:	20 31       	cpi	r18, 0x10	; 16
    609c:	81 f1       	breq	.+96     	; 0x60fe <__ultoa_invert+0x6c>
    609e:	e8 94       	clt
    60a0:	6f 93       	push	r22
    60a2:	6e 7f       	andi	r22, 0xFE	; 254
    60a4:	6e 5f       	subi	r22, 0xFE	; 254
    60a6:	7f 4f       	sbci	r23, 0xFF	; 255
    60a8:	8f 4f       	sbci	r24, 0xFF	; 255
    60aa:	9f 4f       	sbci	r25, 0xFF	; 255
    60ac:	af 4f       	sbci	r26, 0xFF	; 255
    60ae:	b1 e0       	ldi	r27, 0x01	; 1
    60b0:	3e d0       	rcall	.+124    	; 0x612e <__ultoa_invert+0x9c>
    60b2:	b4 e0       	ldi	r27, 0x04	; 4
    60b4:	3c d0       	rcall	.+120    	; 0x612e <__ultoa_invert+0x9c>
    60b6:	67 0f       	add	r22, r23
    60b8:	78 1f       	adc	r23, r24
    60ba:	89 1f       	adc	r24, r25
    60bc:	9a 1f       	adc	r25, r26
    60be:	a1 1d       	adc	r26, r1
    60c0:	68 0f       	add	r22, r24
    60c2:	79 1f       	adc	r23, r25
    60c4:	8a 1f       	adc	r24, r26
    60c6:	91 1d       	adc	r25, r1
    60c8:	a1 1d       	adc	r26, r1
    60ca:	6a 0f       	add	r22, r26
    60cc:	71 1d       	adc	r23, r1
    60ce:	81 1d       	adc	r24, r1
    60d0:	91 1d       	adc	r25, r1
    60d2:	a1 1d       	adc	r26, r1
    60d4:	20 d0       	rcall	.+64     	; 0x6116 <__ultoa_invert+0x84>
    60d6:	09 f4       	brne	.+2      	; 0x60da <__ultoa_invert+0x48>
    60d8:	68 94       	set
    60da:	3f 91       	pop	r19
    60dc:	2a e0       	ldi	r18, 0x0A	; 10
    60de:	26 9f       	mul	r18, r22
    60e0:	11 24       	eor	r1, r1
    60e2:	30 19       	sub	r19, r0
    60e4:	30 5d       	subi	r19, 0xD0	; 208
    60e6:	31 93       	st	Z+, r19
    60e8:	de f6       	brtc	.-74     	; 0x60a0 <__ultoa_invert+0xe>
    60ea:	cf 01       	movw	r24, r30
    60ec:	08 95       	ret
    60ee:	46 2f       	mov	r20, r22
    60f0:	47 70       	andi	r20, 0x07	; 7
    60f2:	40 5d       	subi	r20, 0xD0	; 208
    60f4:	41 93       	st	Z+, r20
    60f6:	b3 e0       	ldi	r27, 0x03	; 3
    60f8:	0f d0       	rcall	.+30     	; 0x6118 <__ultoa_invert+0x86>
    60fa:	c9 f7       	brne	.-14     	; 0x60ee <__ultoa_invert+0x5c>
    60fc:	f6 cf       	rjmp	.-20     	; 0x60ea <__ultoa_invert+0x58>
    60fe:	46 2f       	mov	r20, r22
    6100:	4f 70       	andi	r20, 0x0F	; 15
    6102:	40 5d       	subi	r20, 0xD0	; 208
    6104:	4a 33       	cpi	r20, 0x3A	; 58
    6106:	18 f0       	brcs	.+6      	; 0x610e <__ultoa_invert+0x7c>
    6108:	49 5d       	subi	r20, 0xD9	; 217
    610a:	31 fd       	sbrc	r19, 1
    610c:	40 52       	subi	r20, 0x20	; 32
    610e:	41 93       	st	Z+, r20
    6110:	02 d0       	rcall	.+4      	; 0x6116 <__ultoa_invert+0x84>
    6112:	a9 f7       	brne	.-22     	; 0x60fe <__ultoa_invert+0x6c>
    6114:	ea cf       	rjmp	.-44     	; 0x60ea <__ultoa_invert+0x58>
    6116:	b4 e0       	ldi	r27, 0x04	; 4
    6118:	a6 95       	lsr	r26
    611a:	97 95       	ror	r25
    611c:	87 95       	ror	r24
    611e:	77 95       	ror	r23
    6120:	67 95       	ror	r22
    6122:	ba 95       	dec	r27
    6124:	c9 f7       	brne	.-14     	; 0x6118 <__ultoa_invert+0x86>
    6126:	00 97       	sbiw	r24, 0x00	; 0
    6128:	61 05       	cpc	r22, r1
    612a:	71 05       	cpc	r23, r1
    612c:	08 95       	ret
    612e:	9b 01       	movw	r18, r22
    6130:	ac 01       	movw	r20, r24
    6132:	0a 2e       	mov	r0, r26
    6134:	06 94       	lsr	r0
    6136:	57 95       	ror	r21
    6138:	47 95       	ror	r20
    613a:	37 95       	ror	r19
    613c:	27 95       	ror	r18
    613e:	ba 95       	dec	r27
    6140:	c9 f7       	brne	.-14     	; 0x6134 <__ultoa_invert+0xa2>
    6142:	62 0f       	add	r22, r18
    6144:	73 1f       	adc	r23, r19
    6146:	84 1f       	adc	r24, r20
    6148:	95 1f       	adc	r25, r21
    614a:	a0 1d       	adc	r26, r0
    614c:	08 95       	ret

0000614e <calloc>:
//	DESCRIPTION:
//		Runs an idle loop for [timeout] microseconds.
//
//  ARGUMENTS:
//      uint16_t timeout
//          The timeout in microseconds
    614e:	0f 93       	push	r16
    6150:	1f 93       	push	r17
    6152:	cf 93       	push	r28
    6154:	df 93       	push	r29
//-------------------------------------------------------------------------------------------------------
void halWait(uint16_t timeout) {

    6156:	68 9f       	mul	r22, r24
    6158:	80 01       	movw	r16, r0
    615a:	69 9f       	mul	r22, r25
    615c:	10 0d       	add	r17, r0
    615e:	78 9f       	mul	r23, r24
    6160:	10 0d       	add	r17, r0
    6162:	11 24       	eor	r1, r1
    6164:	c8 01       	movw	r24, r16
    6166:	0e 94 c3 30 	call	0x6186	; 0x6186 <malloc>
    616a:	ec 01       	movw	r28, r24
    616c:	00 97       	sbiw	r24, 0x00	; 0
    616e:	29 f0       	breq	.+10     	; 0x617a <calloc+0x2c>
    // This sequence uses exactly 8 clock cycle for each round
    do {
    6170:	a8 01       	movw	r20, r16
    6172:	60 e0       	ldi	r22, 0x00	; 0
    6174:	70 e0       	ldi	r23, 0x00	; 0
    6176:	0e 94 c1 31 	call	0x6382	; 0x6382 <memset>
        NOP();
        NOP();
    617a:	ce 01       	movw	r24, r28
    617c:	df 91       	pop	r29
    617e:	cf 91       	pop	r28
    6180:	1f 91       	pop	r17
    6182:	0f 91       	pop	r16
    6184:	08 95       	ret

00006186 <malloc>:
    6186:	cf 93       	push	r28
    6188:	df 93       	push	r29
    618a:	ac 01       	movw	r20, r24
    618c:	02 97       	sbiw	r24, 0x02	; 2
    618e:	10 f4       	brcc	.+4      	; 0x6194 <malloc+0xe>
    6190:	42 e0       	ldi	r20, 0x02	; 2
    6192:	50 e0       	ldi	r21, 0x00	; 0
    6194:	a0 91 a5 07 	lds	r26, 0x07A5
    6198:	b0 91 a6 07 	lds	r27, 0x07A6
    619c:	fd 01       	movw	r30, r26
    619e:	c0 e0       	ldi	r28, 0x00	; 0
    61a0:	d0 e0       	ldi	r29, 0x00	; 0
    61a2:	20 e0       	ldi	r18, 0x00	; 0
    61a4:	30 e0       	ldi	r19, 0x00	; 0
    61a6:	20 c0       	rjmp	.+64     	; 0x61e8 <malloc+0x62>
    61a8:	80 81       	ld	r24, Z
    61aa:	91 81       	ldd	r25, Z+1	; 0x01
    61ac:	84 17       	cp	r24, r20
    61ae:	95 07       	cpc	r25, r21
    61b0:	69 f4       	brne	.+26     	; 0x61cc <malloc+0x46>
    61b2:	82 81       	ldd	r24, Z+2	; 0x02
    61b4:	93 81       	ldd	r25, Z+3	; 0x03
    61b6:	20 97       	sbiw	r28, 0x00	; 0
    61b8:	19 f0       	breq	.+6      	; 0x61c0 <malloc+0x3a>
    61ba:	9b 83       	std	Y+3, r25	; 0x03
    61bc:	8a 83       	std	Y+2, r24	; 0x02
    61be:	04 c0       	rjmp	.+8      	; 0x61c8 <malloc+0x42>
    61c0:	90 93 a6 07 	sts	0x07A6, r25
    61c4:	80 93 a5 07 	sts	0x07A5, r24
    61c8:	9f 01       	movw	r18, r30
    61ca:	32 c0       	rjmp	.+100    	; 0x6230 <malloc+0xaa>
    61cc:	48 17       	cp	r20, r24
    61ce:	59 07       	cpc	r21, r25
    61d0:	38 f4       	brcc	.+14     	; 0x61e0 <malloc+0x5a>
    61d2:	21 15       	cp	r18, r1
    61d4:	31 05       	cpc	r19, r1
    61d6:	19 f0       	breq	.+6      	; 0x61de <malloc+0x58>
    61d8:	82 17       	cp	r24, r18
    61da:	93 07       	cpc	r25, r19
    61dc:	08 f4       	brcc	.+2      	; 0x61e0 <malloc+0x5a>
    61de:	9c 01       	movw	r18, r24
    61e0:	ef 01       	movw	r28, r30
    61e2:	02 80       	ldd	r0, Z+2	; 0x02
    61e4:	f3 81       	ldd	r31, Z+3	; 0x03
    61e6:	e0 2d       	mov	r30, r0
    61e8:	30 97       	sbiw	r30, 0x00	; 0
    61ea:	f1 f6       	brne	.-68     	; 0x61a8 <malloc+0x22>
    61ec:	21 15       	cp	r18, r1
    61ee:	31 05       	cpc	r19, r1
    61f0:	99 f1       	breq	.+102    	; 0x6258 <malloc+0xd2>
    61f2:	c9 01       	movw	r24, r18
    61f4:	84 1b       	sub	r24, r20
    61f6:	95 0b       	sbc	r25, r21
    61f8:	04 97       	sbiw	r24, 0x04	; 4
    61fa:	08 f4       	brcc	.+2      	; 0x61fe <malloc+0x78>
    61fc:	a9 01       	movw	r20, r18
    61fe:	e0 e0       	ldi	r30, 0x00	; 0
    6200:	f0 e0       	ldi	r31, 0x00	; 0
    6202:	28 c0       	rjmp	.+80     	; 0x6254 <malloc+0xce>
    6204:	8d 91       	ld	r24, X+
    6206:	9c 91       	ld	r25, X
    6208:	11 97       	sbiw	r26, 0x01	; 1
    620a:	82 17       	cp	r24, r18
    620c:	93 07       	cpc	r25, r19
    620e:	f9 f4       	brne	.+62     	; 0x624e <malloc+0xc8>
    6210:	48 17       	cp	r20, r24
    6212:	59 07       	cpc	r21, r25
    6214:	81 f4       	brne	.+32     	; 0x6236 <malloc+0xb0>
    6216:	ed 01       	movw	r28, r26
    6218:	8a 81       	ldd	r24, Y+2	; 0x02
    621a:	9b 81       	ldd	r25, Y+3	; 0x03
    621c:	30 97       	sbiw	r30, 0x00	; 0
    621e:	19 f0       	breq	.+6      	; 0x6226 <malloc+0xa0>
    6220:	93 83       	std	Z+3, r25	; 0x03
    6222:	82 83       	std	Z+2, r24	; 0x02
    6224:	04 c0       	rjmp	.+8      	; 0x622e <malloc+0xa8>
    6226:	90 93 a6 07 	sts	0x07A6, r25
    622a:	80 93 a5 07 	sts	0x07A5, r24
    622e:	9d 01       	movw	r18, r26
    6230:	2e 5f       	subi	r18, 0xFE	; 254
    6232:	3f 4f       	sbci	r19, 0xFF	; 255
    6234:	4c c0       	rjmp	.+152    	; 0x62ce <malloc+0x148>
    6236:	84 1b       	sub	r24, r20
    6238:	95 0b       	sbc	r25, r21
    623a:	fd 01       	movw	r30, r26
    623c:	e8 0f       	add	r30, r24
    623e:	f9 1f       	adc	r31, r25
    6240:	41 93       	st	Z+, r20
    6242:	51 93       	st	Z+, r21
    6244:	02 97       	sbiw	r24, 0x02	; 2
    6246:	8d 93       	st	X+, r24
    6248:	9c 93       	st	X, r25
    624a:	9f 01       	movw	r18, r30
    624c:	40 c0       	rjmp	.+128    	; 0x62ce <malloc+0x148>
    624e:	fd 01       	movw	r30, r26
    6250:	a2 81       	ldd	r26, Z+2	; 0x02
    6252:	b3 81       	ldd	r27, Z+3	; 0x03
    6254:	10 97       	sbiw	r26, 0x00	; 0
    6256:	b1 f6       	brne	.-84     	; 0x6204 <malloc+0x7e>
    6258:	80 91 a3 07 	lds	r24, 0x07A3
    625c:	90 91 a4 07 	lds	r25, 0x07A4
    6260:	89 2b       	or	r24, r25
    6262:	41 f4       	brne	.+16     	; 0x6274 <malloc+0xee>
    6264:	80 91 b5 02 	lds	r24, 0x02B5
    6268:	90 91 b6 02 	lds	r25, 0x02B6
    626c:	90 93 a4 07 	sts	0x07A4, r25
    6270:	80 93 a3 07 	sts	0x07A3, r24
    6274:	20 91 b7 02 	lds	r18, 0x02B7
    6278:	30 91 b8 02 	lds	r19, 0x02B8
    627c:	21 15       	cp	r18, r1
    627e:	31 05       	cpc	r19, r1
    6280:	49 f4       	brne	.+18     	; 0x6294 <malloc+0x10e>
    6282:	8d b7       	in	r24, 0x3d	; 61
    6284:	28 2f       	mov	r18, r24
    6286:	33 27       	eor	r19, r19
    6288:	80 91 b3 02 	lds	r24, 0x02B3
    628c:	90 91 b4 02 	lds	r25, 0x02B4
    6290:	28 1b       	sub	r18, r24
    6292:	39 0b       	sbc	r19, r25
    6294:	a0 91 a3 07 	lds	r26, 0x07A3
    6298:	b0 91 a4 07 	lds	r27, 0x07A4
    629c:	2a 1b       	sub	r18, r26
    629e:	3b 0b       	sbc	r19, r27
    62a0:	24 17       	cp	r18, r20
    62a2:	35 07       	cpc	r19, r21
    62a4:	90 f0       	brcs	.+36     	; 0x62ca <malloc+0x144>
    62a6:	ca 01       	movw	r24, r20
    62a8:	02 96       	adiw	r24, 0x02	; 2
    62aa:	28 17       	cp	r18, r24
    62ac:	39 07       	cpc	r19, r25
    62ae:	68 f0       	brcs	.+26     	; 0x62ca <malloc+0x144>
    62b0:	9d 01       	movw	r18, r26
    62b2:	2e 5f       	subi	r18, 0xFE	; 254
    62b4:	3f 4f       	sbci	r19, 0xFF	; 255
    62b6:	c9 01       	movw	r24, r18
    62b8:	84 0f       	add	r24, r20
    62ba:	95 1f       	adc	r25, r21
    62bc:	90 93 a4 07 	sts	0x07A4, r25
    62c0:	80 93 a3 07 	sts	0x07A3, r24
    62c4:	4d 93       	st	X+, r20
    62c6:	5c 93       	st	X, r21
    62c8:	02 c0       	rjmp	.+4      	; 0x62ce <malloc+0x148>
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	c9 01       	movw	r24, r18
    62d0:	df 91       	pop	r29
    62d2:	cf 91       	pop	r28
    62d4:	08 95       	ret

000062d6 <free>:
    62d6:	cf 93       	push	r28
    62d8:	df 93       	push	r29
    62da:	00 97       	sbiw	r24, 0x00	; 0
    62dc:	09 f4       	brne	.+2      	; 0x62e0 <free+0xa>
    62de:	4e c0       	rjmp	.+156    	; 0x637c <free+0xa6>
    62e0:	ec 01       	movw	r28, r24
    62e2:	22 97       	sbiw	r28, 0x02	; 2
    62e4:	1b 82       	std	Y+3, r1	; 0x03
    62e6:	1a 82       	std	Y+2, r1	; 0x02
    62e8:	a0 91 a5 07 	lds	r26, 0x07A5
    62ec:	b0 91 a6 07 	lds	r27, 0x07A6
    62f0:	10 97       	sbiw	r26, 0x00	; 0
    62f2:	11 f1       	breq	.+68     	; 0x6338 <free+0x62>
    62f4:	40 e0       	ldi	r20, 0x00	; 0
    62f6:	50 e0       	ldi	r21, 0x00	; 0
    62f8:	01 c0       	rjmp	.+2      	; 0x62fc <free+0x26>
    62fa:	dc 01       	movw	r26, r24
    62fc:	ac 17       	cp	r26, r28
    62fe:	bd 07       	cpc	r27, r29
    6300:	00 f1       	brcs	.+64     	; 0x6342 <free+0x6c>
    6302:	bb 83       	std	Y+3, r27	; 0x03
    6304:	aa 83       	std	Y+2, r26	; 0x02
    6306:	fe 01       	movw	r30, r28
    6308:	21 91       	ld	r18, Z+
    630a:	31 91       	ld	r19, Z+
    630c:	e2 0f       	add	r30, r18
    630e:	f3 1f       	adc	r31, r19
    6310:	ea 17       	cp	r30, r26
    6312:	fb 07       	cpc	r31, r27
    6314:	71 f4       	brne	.+28     	; 0x6332 <free+0x5c>
    6316:	8d 91       	ld	r24, X+
    6318:	9c 91       	ld	r25, X
    631a:	11 97       	sbiw	r26, 0x01	; 1
    631c:	28 0f       	add	r18, r24
    631e:	39 1f       	adc	r19, r25
    6320:	2e 5f       	subi	r18, 0xFE	; 254
    6322:	3f 4f       	sbci	r19, 0xFF	; 255
    6324:	39 83       	std	Y+1, r19	; 0x01
    6326:	28 83       	st	Y, r18
    6328:	fd 01       	movw	r30, r26
    632a:	82 81       	ldd	r24, Z+2	; 0x02
    632c:	93 81       	ldd	r25, Z+3	; 0x03
    632e:	9b 83       	std	Y+3, r25	; 0x03
    6330:	8a 83       	std	Y+2, r24	; 0x02
    6332:	41 15       	cp	r20, r1
    6334:	51 05       	cpc	r21, r1
    6336:	59 f4       	brne	.+22     	; 0x634e <free+0x78>
    6338:	d0 93 a6 07 	sts	0x07A6, r29
    633c:	c0 93 a5 07 	sts	0x07A5, r28
    6340:	1d c0       	rjmp	.+58     	; 0x637c <free+0xa6>
    6342:	fd 01       	movw	r30, r26
    6344:	82 81       	ldd	r24, Z+2	; 0x02
    6346:	93 81       	ldd	r25, Z+3	; 0x03
    6348:	ad 01       	movw	r20, r26
    634a:	00 97       	sbiw	r24, 0x00	; 0
    634c:	b1 f6       	brne	.-84     	; 0x62fa <free+0x24>
    634e:	fa 01       	movw	r30, r20
    6350:	d3 83       	std	Z+3, r29	; 0x03
    6352:	c2 83       	std	Z+2, r28	; 0x02
    6354:	21 91       	ld	r18, Z+
    6356:	31 91       	ld	r19, Z+
    6358:	e2 0f       	add	r30, r18
    635a:	f3 1f       	adc	r31, r19
    635c:	ec 17       	cp	r30, r28
    635e:	fd 07       	cpc	r31, r29
    6360:	69 f4       	brne	.+26     	; 0x637c <free+0xa6>
    6362:	88 81       	ld	r24, Y
    6364:	99 81       	ldd	r25, Y+1	; 0x01
    6366:	28 0f       	add	r18, r24
    6368:	39 1f       	adc	r19, r25
    636a:	2e 5f       	subi	r18, 0xFE	; 254
    636c:	3f 4f       	sbci	r19, 0xFF	; 255
    636e:	fa 01       	movw	r30, r20
    6370:	31 83       	std	Z+1, r19	; 0x01
    6372:	20 83       	st	Z, r18
    6374:	8a 81       	ldd	r24, Y+2	; 0x02
    6376:	9b 81       	ldd	r25, Y+3	; 0x03
    6378:	93 83       	std	Z+3, r25	; 0x03
    637a:	82 83       	std	Z+2, r24	; 0x02
    637c:	df 91       	pop	r29
    637e:	cf 91       	pop	r28
    6380:	08 95       	ret

00006382 <memset>:
    6382:	dc 01       	movw	r26, r24
    6384:	01 c0       	rjmp	.+2      	; 0x6388 <memset+0x6>
    6386:	6d 93       	st	X+, r22
    6388:	41 50       	subi	r20, 0x01	; 1
    638a:	50 40       	sbci	r21, 0x00	; 0
    638c:	e0 f7       	brcc	.-8      	; 0x6386 <memset+0x4>
    638e:	08 95       	ret

00006390 <__mulsi3>:
    6390:	62 9f       	mul	r22, r18
    6392:	d0 01       	movw	r26, r0
    6394:	73 9f       	mul	r23, r19
    6396:	f0 01       	movw	r30, r0
    6398:	82 9f       	mul	r24, r18
    639a:	e0 0d       	add	r30, r0
    639c:	f1 1d       	adc	r31, r1
    639e:	64 9f       	mul	r22, r20
    63a0:	e0 0d       	add	r30, r0
    63a2:	f1 1d       	adc	r31, r1
    63a4:	92 9f       	mul	r25, r18
    63a6:	f0 0d       	add	r31, r0
    63a8:	83 9f       	mul	r24, r19
    63aa:	f0 0d       	add	r31, r0
    63ac:	74 9f       	mul	r23, r20
    63ae:	f0 0d       	add	r31, r0
    63b0:	65 9f       	mul	r22, r21
    63b2:	f0 0d       	add	r31, r0
    63b4:	99 27       	eor	r25, r25
    63b6:	72 9f       	mul	r23, r18
    63b8:	b0 0d       	add	r27, r0
    63ba:	e1 1d       	adc	r30, r1
    63bc:	f9 1f       	adc	r31, r25
    63be:	63 9f       	mul	r22, r19
    63c0:	b0 0d       	add	r27, r0
    63c2:	e1 1d       	adc	r30, r1
    63c4:	f9 1f       	adc	r31, r25
    63c6:	bd 01       	movw	r22, r26
    63c8:	cf 01       	movw	r24, r30
    63ca:	11 24       	eor	r1, r1
    63cc:	08 95       	ret

000063ce <__udivmodhi4>:
    63ce:	aa 1b       	sub	r26, r26
    63d0:	bb 1b       	sub	r27, r27
    63d2:	51 e1       	ldi	r21, 0x11	; 17
    63d4:	07 c0       	rjmp	.+14     	; 0x63e4 <__udivmodhi4_ep>

000063d6 <__udivmodhi4_loop>:
    63d6:	aa 1f       	adc	r26, r26
    63d8:	bb 1f       	adc	r27, r27
    63da:	a6 17       	cp	r26, r22
    63dc:	b7 07       	cpc	r27, r23
    63de:	10 f0       	brcs	.+4      	; 0x63e4 <__udivmodhi4_ep>
    63e0:	a6 1b       	sub	r26, r22
    63e2:	b7 0b       	sbc	r27, r23

000063e4 <__udivmodhi4_ep>:
    63e4:	88 1f       	adc	r24, r24
    63e6:	99 1f       	adc	r25, r25
    63e8:	5a 95       	dec	r21
    63ea:	a9 f7       	brne	.-22     	; 0x63d6 <__udivmodhi4_loop>
    63ec:	80 95       	com	r24
    63ee:	90 95       	com	r25
    63f0:	bc 01       	movw	r22, r24
    63f2:	cd 01       	movw	r24, r26
    63f4:	08 95       	ret

000063f6 <__divmodhi4>:
    63f6:	97 fb       	bst	r25, 7
    63f8:	09 2e       	mov	r0, r25
    63fa:	07 26       	eor	r0, r23
    63fc:	0a d0       	rcall	.+20     	; 0x6412 <__divmodhi4_neg1>
    63fe:	77 fd       	sbrc	r23, 7
    6400:	04 d0       	rcall	.+8      	; 0x640a <__divmodhi4_neg2>
    6402:	e5 df       	rcall	.-54     	; 0x63ce <__udivmodhi4>
    6404:	06 d0       	rcall	.+12     	; 0x6412 <__divmodhi4_neg1>
    6406:	00 20       	and	r0, r0
    6408:	1a f4       	brpl	.+6      	; 0x6410 <__divmodhi4_exit>

0000640a <__divmodhi4_neg2>:
    640a:	70 95       	com	r23
    640c:	61 95       	neg	r22
    640e:	7f 4f       	sbci	r23, 0xFF	; 255

00006410 <__divmodhi4_exit>:
    6410:	08 95       	ret

00006412 <__divmodhi4_neg1>:
    6412:	f6 f7       	brtc	.-4      	; 0x6410 <__divmodhi4_exit>
    6414:	90 95       	com	r25
    6416:	81 95       	neg	r24
    6418:	9f 4f       	sbci	r25, 0xFF	; 255
    641a:	08 95       	ret

0000641c <__udivmodsi4>:
    641c:	a1 e2       	ldi	r26, 0x21	; 33
    641e:	1a 2e       	mov	r1, r26
    6420:	aa 1b       	sub	r26, r26
    6422:	bb 1b       	sub	r27, r27
    6424:	fd 01       	movw	r30, r26
    6426:	0d c0       	rjmp	.+26     	; 0x6442 <__udivmodsi4_ep>

00006428 <__udivmodsi4_loop>:
    6428:	aa 1f       	adc	r26, r26
    642a:	bb 1f       	adc	r27, r27
    642c:	ee 1f       	adc	r30, r30
    642e:	ff 1f       	adc	r31, r31
    6430:	a2 17       	cp	r26, r18
    6432:	b3 07       	cpc	r27, r19
    6434:	e4 07       	cpc	r30, r20
    6436:	f5 07       	cpc	r31, r21
    6438:	20 f0       	brcs	.+8      	; 0x6442 <__udivmodsi4_ep>
    643a:	a2 1b       	sub	r26, r18
    643c:	b3 0b       	sbc	r27, r19
    643e:	e4 0b       	sbc	r30, r20
    6440:	f5 0b       	sbc	r31, r21

00006442 <__udivmodsi4_ep>:
    6442:	66 1f       	adc	r22, r22
    6444:	77 1f       	adc	r23, r23
    6446:	88 1f       	adc	r24, r24
    6448:	99 1f       	adc	r25, r25
    644a:	1a 94       	dec	r1
    644c:	69 f7       	brne	.-38     	; 0x6428 <__udivmodsi4_loop>
    644e:	60 95       	com	r22
    6450:	70 95       	com	r23
    6452:	80 95       	com	r24
    6454:	90 95       	com	r25
    6456:	9b 01       	movw	r18, r22
    6458:	ac 01       	movw	r20, r24
    645a:	bd 01       	movw	r22, r26
    645c:	cf 01       	movw	r24, r30
    645e:	08 95       	ret

00006460 <__prologue_saves__>:
    6460:	2f 92       	push	r2
    6462:	3f 92       	push	r3
    6464:	4f 92       	push	r4
    6466:	5f 92       	push	r5
    6468:	6f 92       	push	r6
    646a:	7f 92       	push	r7
    646c:	8f 92       	push	r8
    646e:	9f 92       	push	r9
    6470:	af 92       	push	r10
    6472:	bf 92       	push	r11
    6474:	cf 92       	push	r12
    6476:	df 92       	push	r13
    6478:	ef 92       	push	r14
    647a:	ff 92       	push	r15
    647c:	0f 93       	push	r16
    647e:	1f 93       	push	r17
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
    6488:	ca 1b       	sub	r28, r26
    648a:	db 0b       	sbc	r29, r27
    648c:	0f b6       	in	r0, 0x3f	; 63
    648e:	f8 94       	cli
    6490:	de bf       	out	0x3e, r29	; 62
    6492:	0f be       	out	0x3f, r0	; 63
    6494:	cd bf       	out	0x3d, r28	; 61
    6496:	09 94       	ijmp

00006498 <__epilogue_restores__>:
    6498:	2a 88       	ldd	r2, Y+18	; 0x12
    649a:	39 88       	ldd	r3, Y+17	; 0x11
    649c:	48 88       	ldd	r4, Y+16	; 0x10
    649e:	5f 84       	ldd	r5, Y+15	; 0x0f
    64a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    64a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    64a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    64a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    64a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    64aa:	b9 84       	ldd	r11, Y+9	; 0x09
    64ac:	c8 84       	ldd	r12, Y+8	; 0x08
    64ae:	df 80       	ldd	r13, Y+7	; 0x07
    64b0:	ee 80       	ldd	r14, Y+6	; 0x06
    64b2:	fd 80       	ldd	r15, Y+5	; 0x05
    64b4:	0c 81       	ldd	r16, Y+4	; 0x04
    64b6:	1b 81       	ldd	r17, Y+3	; 0x03
    64b8:	aa 81       	ldd	r26, Y+2	; 0x02
    64ba:	b9 81       	ldd	r27, Y+1	; 0x01
    64bc:	ce 0f       	add	r28, r30
    64be:	d1 1d       	adc	r29, r1
    64c0:	0f b6       	in	r0, 0x3f	; 63
    64c2:	f8 94       	cli
    64c4:	de bf       	out	0x3e, r29	; 62
    64c6:	0f be       	out	0x3f, r0	; 63
    64c8:	cd bf       	out	0x3d, r28	; 61
    64ca:	ed 01       	movw	r28, r26
    64cc:	08 95       	ret

000064ce <__eeprom_read_byte_1F2021>:
    64ce:	f9 99       	sbic	0x1f, 1	; 31
    64d0:	fe cf       	rjmp	.-4      	; 0x64ce <__eeprom_read_byte_1F2021>
    64d2:	b2 bd       	out	0x22, r27	; 34
    64d4:	a1 bd       	out	0x21, r26	; 33
    64d6:	f8 9a       	sbi	0x1f, 0	; 31
    64d8:	11 96       	adiw	r26, 0x01	; 1
    64da:	00 b4       	in	r0, 0x20	; 32
    64dc:	08 95       	ret

000064de <__eeprom_write_byte_1F2021>:
    64de:	f9 99       	sbic	0x1f, 1	; 31
    64e0:	fe cf       	rjmp	.-4      	; 0x64de <__eeprom_write_byte_1F2021>
    64e2:	b2 bd       	out	0x22, r27	; 34
    64e4:	a1 bd       	out	0x21, r26	; 33
    64e6:	00 bc       	out	0x20, r0	; 32
    64e8:	11 96       	adiw	r26, 0x01	; 1
    64ea:	0f b6       	in	r0, 0x3f	; 63
    64ec:	f8 94       	cli
    64ee:	fa 9a       	sbi	0x1f, 2	; 31
    64f0:	f9 9a       	sbi	0x1f, 1	; 31
    64f2:	0f be       	out	0x3f, r0	; 63
    64f4:	08 95       	ret

000064f6 <__divmodsi4>:
    64f6:	97 fb       	bst	r25, 7
    64f8:	09 2e       	mov	r0, r25
    64fa:	05 26       	eor	r0, r21
    64fc:	0e d0       	rcall	.+28     	; 0x651a <__divmodsi4_neg1>
    64fe:	57 fd       	sbrc	r21, 7
    6500:	04 d0       	rcall	.+8      	; 0x650a <__divmodsi4_neg2>
    6502:	8c df       	rcall	.-232    	; 0x641c <__udivmodsi4>
    6504:	0a d0       	rcall	.+20     	; 0x651a <__divmodsi4_neg1>
    6506:	00 1c       	adc	r0, r0
    6508:	38 f4       	brcc	.+14     	; 0x6518 <__divmodsi4_exit>

0000650a <__divmodsi4_neg2>:
    650a:	50 95       	com	r21
    650c:	40 95       	com	r20
    650e:	30 95       	com	r19
    6510:	21 95       	neg	r18
    6512:	3f 4f       	sbci	r19, 0xFF	; 255
    6514:	4f 4f       	sbci	r20, 0xFF	; 255
    6516:	5f 4f       	sbci	r21, 0xFF	; 255

00006518 <__divmodsi4_exit>:
    6518:	08 95       	ret

0000651a <__divmodsi4_neg1>:
    651a:	f6 f7       	brtc	.-4      	; 0x6518 <__divmodsi4_exit>
    651c:	90 95       	com	r25
    651e:	80 95       	com	r24
    6520:	70 95       	com	r23
    6522:	61 95       	neg	r22
    6524:	7f 4f       	sbci	r23, 0xFF	; 255
    6526:	8f 4f       	sbci	r24, 0xFF	; 255
    6528:	9f 4f       	sbci	r25, 0xFF	; 255
    652a:	08 95       	ret

0000652c <_exit>:
    652c:	ff cf       	rjmp	.-2      	; 0x652c <_exit>
