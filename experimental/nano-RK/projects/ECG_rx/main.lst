   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 140               		.data
 141               	.LC0:
 142 0000 4372 6561 		.string	"Create done\r"
 142      7465 2064 
 142      6F6E 650D 
 142      00
 143               		.text
 145               	.global	nrk_create_taskset
 147               	nrk_create_taskset:
 148               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <avr/sleep.h>
  29:main.c        **** #include <hal.h>
  30:main.c        **** #include <bmac.h>
  31:main.c        **** #include <nrk_error.h>
  32:main.c        **** #include "accel_data.h"
  33:main.c        **** 
  34:main.c        **** // Only require MAC address for address decode 
  35:main.c        **** #define MAC_ADDR	0x0002
  36:main.c        **** #define CSMA_CHECK_PERIOD 25
  37:main.c        **** 
  38:main.c        **** nrk_task_type RX_TASK;
  39:main.c        **** NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
  40:main.c        **** void rx_task (void);
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** nrk_task_type TX_TASK;
  44:main.c        **** NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
  45:main.c        **** void tx_task (void);
  46:main.c        **** 
  47:main.c        **** void nrk_create_taskset ();
  48:main.c        **** 
  49:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  50:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  51:main.c        **** //uint8_t aes_key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 
  52:main.c        **** 
  53:main.c        **** int main ()
  54:main.c        **** {
  55:main.c        ****   uint16_t div;
  56:main.c        ****   nrk_setup_ports ();
  57:main.c        ****   nrk_setup_uart (UART_BAUDRATE_115K2);
  58:main.c        **** 
  59:main.c        ****   nrk_init ();
  60:main.c        **** 
  61:main.c        ****   nrk_led_clr (0);
  62:main.c        ****   nrk_led_clr (1);
  63:main.c        ****   nrk_led_clr (2);
  64:main.c        ****   nrk_led_clr (3);
  65:main.c        **** 
  66:main.c        ****   nrk_time_set (0, 0);
  67:main.c        **** 
  68:main.c        ****   bmac_task_config ();
  69:main.c        **** 
  70:main.c        ****   nrk_create_taskset ();
  71:main.c        ****   nrk_start ();
  72:main.c        **** 
  73:main.c        ****   return 0;
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** void rx_task ()
  77:main.c        **** {
  78:main.c        ****   uint8_t i, len;
  79:main.c        ****   int8_t rssi, val;
  80:main.c        ****   uint8_t *local_rx_buf;
  81:main.c        ****   nrk_time_t check_period;
  82:main.c        ****   int value = 0;
  83:main.c        ****   AccelReading accelReading;
  84:main.c        ****   //printf ("rx_task PID=%d\r\n", nrk_get_pid ());
  85:main.c        **** 
  86:main.c        ****   // init bmac on channel 20 
  87:main.c        ****   bmac_init (20);
  88:main.c        **** 
  89:main.c        ****   // Enable AES 128 bit encryption
  90:main.c        ****   // When encryption is active, messages from plaintext
  91:main.c        ****   // source will still be received. 
  92:main.c        ****   //bmac_encryption_set_key(aes_key,16);
  93:main.c        ****   //bmac_encryption_enable();
  94:main.c        ****   // bmac_encryption_disable();
  95:main.c        **** 
  96:main.c        ****   // By default the RX check rate is 100ms
  97:main.c        ****   // below shows how to change that
  98:main.c        ****   check_period.secs=0;
  99:main.c        ****   check_period.nano_secs=CSMA_CHECK_PERIOD*NANOS_PER_MS;
 100:main.c        ****   val=bmac_set_rx_check_rate(check_period);
 101:main.c        **** 
 102:main.c        ****   bmac_addr_decode_set_my_mac(1);
 103:main.c        ****   bmac_addr_decode_enable();
 104:main.c        ****   bmac_auto_ack_enable();
 105:main.c        **** 
 106:main.c        ****   // The default Clear Channel Assement RSSI threshold is -45
 107:main.c        ****   // Setting this value higher means that you will only trigger
 108:main.c        ****   // receive with a very strong signal.  Setting this lower means
 109:main.c        ****   // bmac will try to receive fainter packets.  If the value is set
 110:main.c        ****   // too high or too low performance will suffer greatly.
 111:main.c        ****   // bmac_set_cca_thresh(-45); 
 112:main.c        **** 
 113:main.c        **** 
 114:main.c        ****   //if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
 115:main.c        ****   // This sets the next RX buffer.
 116:main.c        ****   // This can be called at anytime before releaseing the packet
 117:main.c        ****   // if you wish to do a zero-copy buffer switch
 118:main.c        ****   bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
 119:main.c        **** 
 120:main.c        ****   while (1) {
 121:main.c        ****     // Wait until an RX packet is received
 122:main.c        ****     val = bmac_wait_until_rx_pkt ();
 123:main.c        ****     // Get the RX packet 
 124:main.c        ****     nrk_led_set (ORANGE_LED);
 125:main.c        ****     local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
 126:main.c        ****     //if( bmac_rx_pkt_is_encrypted()==1 ) nrk_kprintf( PSTR( "Packet Encrypted\r\n" ));
 127:main.c        ****    // printf ("Got RX packet len=%d RSSI=%d\n\r", len, rssi);
 128:main.c        ****     for (i = 1; i < len - sizeof(AccelReading); i+=2) {
 129:main.c        ****       value = (rx_buf[i] << 8) | rx_buf[i+1];
 130:main.c        ****       if(value < 0) value = -32768 - value;
 131:main.c        ****       else value = 32768 - value;
 132:main.c        ****       //  printf("%d,%d, \n\r",value,rx_buf[0]);
 133:main.c        ****     }
 134:main.c        **** 
 135:main.c        ****     memcpy(&accelReading, &rx_buf[len - sizeof(AccelReading)], sizeof(AccelReading));
 136:main.c        ****     printf("%d, %d, %d\n\r", accelReading.xValue, accelReading.yValue, accelReading.zValue);
 137:main.c        **** 
 138:main.c        ****     nrk_led_clr (ORANGE_LED);
 139:main.c        ****     // Release the RX buffer so future packets can arrive 
 140:main.c        ****     bmac_rx_pkt_release ();
 141:main.c        ****   }
 142:main.c        **** 
 143:main.c        **** }
 144:main.c        **** 
 145:main.c        **** uint8_t ctr_cnt[4];
 146:main.c        **** 
 147:main.c        **** void tx_task ()
 148:main.c        **** {
 149:main.c        ****   uint8_t j, i, val, len, cnt;
 150:main.c        ****   int8_t v;
 151:main.c        ****   nrk_sig_t tx_done_signal;
 152:main.c        ****   nrk_sig_mask_t ret;
 153:main.c        ****   nrk_time_t r_period;
 154:main.c        **** 
 155:main.c        ****   printf ("tx_task PID=%d\r\n", nrk_get_pid ());
 156:main.c        **** 
 157:main.c        ****   // Wait until the tx_task starts up bmac
 158:main.c        ****   // This should be called by all tasks using bmac that
 159:main.c        ****   // do not call bmac_init()...
 160:main.c        ****   while (!bmac_started ())
 161:main.c        ****     nrk_wait_until_next_period ();
 162:main.c        **** 
 163:main.c        **** 
 164:main.c        ****   // Sample of using Reservations on TX packets
 165:main.c        ****   // This example allows 2 packets to be sent every 5 seconds
 166:main.c        ****   // r_period.secs=5;
 167:main.c        ****   // r_period.nano_secs=0;
 168:main.c        ****   // v=bmac_tx_reserve_set( &r_period, 2 );
 169:main.c        ****   // if(v==NRK_ERROR) nrk_kprintf( PSTR("Error setting b-mac tx reservation (is NRK_MAX_RESERVES de
 170:main.c        **** 
 171:main.c        **** 
 172:main.c        ****   // Get and register the tx_done_signal if you want to
 173:main.c        ****   // do non-blocking transmits
 174:main.c        ****   tx_done_signal = bmac_get_tx_done_signal ();
 175:main.c        ****   nrk_signal_register (tx_done_signal);
 176:main.c        **** 
 177:main.c        ****   ctr_cnt[0]=0; ctr_cnt[1]=0; ctr_cnt[2]=0; ctr_cnt[3]=0;
 178:main.c        ****   cnt = 0;
 179:main.c        ****   while (1) {
 180:main.c        ****     // Build a TX packet
 181:main.c        ****     sprintf (tx_buf, "This is a test %d", cnt);
 182:main.c        ****     nrk_led_set (BLUE_LED);
 183:main.c        **** 
 184:main.c        ****     // Auto ACK is an energy efficient link layer ACK on packets
 185:main.c        ****     // If Auto ACK is enabled, then bmac_tx_pkt() will return failure
 186:main.c        ****     // if no ACK was received. In a broadcast domain, the ACK's will
 187:main.c        ****     // typically collide.  To avoid this, one can use address decoding. 
 188:main.c        ****     // The functions are as follows:
 189:main.c        ****     // bmac_auto_ack_enable();
 190:main.c        ****     // bmac_auto_ack_disable();
 191:main.c        **** 
 192:main.c        ****     // Address decoding is a way of preventing the radio from receiving
 193:main.c        ****     // packets that are not address to a particular node.  This will 
 194:main.c        ****     // supress ACK packets from nodes that should not automatically ACK.
 195:main.c        ****     // The functions are as follows:
 196:main.c        ****     // bmac_addr_decode_set_my_mac(uint16_t MAC_ADDR); 
 197:main.c        ****     // bmac_addr_decode_dest_mac(uint16_t DST_ADDR);  // 0xFFFF is broadcast
 198:main.c        ****     // bmac_addr_decode_enable();
 199:main.c        ****     // bmac_addr_decode_disable();
 200:main.c        **** 
 201:main.c        ****      ctr_cnt[0]=cnt; 
 202:main.c        ****      if(ctr_cnt[0]==255) ctr_cnt[1]++; 
 203:main.c        ****      if(ctr_cnt[1]==255) ctr_cnt[2]++; 
 204:main.c        ****      if(ctr_cnt[2]==255) ctr_cnt[3]++; 
 205:main.c        ****      // You need to increase the ctr on each packet to make the 
 206:main.c        ****      // stream cipher not repeat.
 207:main.c        ****      bmac_encryption_set_ctr_counter(&ctr_cnt,4);
 208:main.c        **** 
 209:main.c        ****     // For blocking transmits, use the following function call.
 210:main.c        ****     // For this there is no need to register  
 211:main.c        ****      val=bmac_tx_pkt(tx_buf, strlen(tx_buf));
 212:main.c        ****      if(val==NRK_OK) cnt++;
 213:main.c        ****      else nrk_kprintf( PSTR( "NO ack or Reserve Violated!\r\n" ));
 214:main.c        **** 
 215:main.c        **** 
 216:main.c        ****     // This function shows how to transmit packets in a
 217:main.c        ****     // non-blocking manner  
 218:main.c        ****     // val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
 219:main.c        ****     // nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));
 220:main.c        ****     // This functions waits on the tx_done_signal
 221:main.c        ****     // ret = nrk_event_wait (SIG(tx_done_signal));
 222:main.c        **** 
 223:main.c        ****     // Just check to be sure signal is okay
 224:main.c        ****     // if(ret & SIG(tx_done_signal) == 0 ) 
 225:main.c        ****     // nrk_kprintf (PSTR ("TX done signal error\r\n"));
 226:main.c        ****    
 227:main.c        ****     // If you want to see your remaining reservation
 228:main.c        ****     // printf( "reserve=%d ",bmac_tx_reserve_get() );
 229:main.c        ****     
 230:main.c        ****     // Task gets control again after TX complete
 231:main.c        ****     nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
 232:main.c        ****     nrk_led_clr (BLUE_LED);
 233:main.c        ****     nrk_wait_until_next_period ();
 234:main.c        ****   }
 235:main.c        **** 
 236:main.c        **** }
 237:main.c        **** 
 238:main.c        **** void nrk_create_taskset ()
 239:main.c        **** {
 150               	.LM0:
 151               	.LFBB1:
 152               	/* prologue: frame size=0 */
 153 0000 0F93      		push r16
 154 0002 1F93      		push r17
 155               	/* prologue end (size=2) */
 240:main.c        **** 
 241:main.c        **** 
 242:main.c        ****   RX_TASK.task = rx_task;
 157               	.LM1:
 158 0004 80E0      		ldi r24,lo8(pm(rx_task))
 159 0006 90E0      		ldi r25,hi8(pm(rx_task))
 160 0008 9093 0000 		sts (RX_TASK+5)+1,r25
 161 000c 8093 0000 		sts RX_TASK+5,r24
 243:main.c        ****   nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
 163               	.LM2:
 164 0010 00E0      		ldi r16,lo8(RX_TASK)
 165 0012 10E0      		ldi r17,hi8(RX_TASK)
 166 0014 40E8      		ldi r20,lo8(128)
 167 0016 50E0      		ldi r21,hi8(128)
 168 0018 60E0      		ldi r22,lo8(rx_task_stack)
 169 001a 70E0      		ldi r23,hi8(rx_task_stack)
 170 001c C801      		movw r24,r16
 171 001e 0E94 0000 		call nrk_task_set_stk
 244:main.c        ****   RX_TASK.prio = 2;
 173               	.LM3:
 174 0022 82E0      		ldi r24,lo8(2)
 175 0024 8093 0000 		sts RX_TASK+8,r24
 245:main.c        ****   RX_TASK.FirstActivation = TRUE;
 177               	.LM4:
 178 0028 81E0      		ldi r24,lo8(1)
 179 002a 8093 0000 		sts RX_TASK+7,r24
 246:main.c        ****   RX_TASK.Type = BASIC_TASK;
 181               	.LM5:
 182 002e 8093 0000 		sts RX_TASK+9,r24
 247:main.c        ****   RX_TASK.SchType = PREEMPTIVE;
 184               	.LM6:
 185 0032 8093 0000 		sts RX_TASK+10,r24
 248:main.c        ****   RX_TASK.period.secs = 0;
 187               	.LM7:
 188 0036 1092 0000 		sts RX_TASK+11,__zero_reg__
 189 003a 1092 0000 		sts (RX_TASK+11)+1,__zero_reg__
 190 003e 1092 0000 		sts (RX_TASK+11)+2,__zero_reg__
 191 0042 1092 0000 		sts (RX_TASK+11)+3,__zero_reg__
 249:main.c        ****   RX_TASK.period.nano_secs = 250 * NANOS_PER_MS;
 193               	.LM8:
 194 0046 80E8      		ldi r24,lo8(250000000)
 195 0048 92EB      		ldi r25,hi8(250000000)
 196 004a A6EE      		ldi r26,hlo8(250000000)
 197 004c BEE0      		ldi r27,hhi8(250000000)
 198 004e 8093 0000 		sts RX_TASK+15,r24
 199 0052 9093 0000 		sts (RX_TASK+15)+1,r25
 200 0056 A093 0000 		sts (RX_TASK+15)+2,r26
 201 005a B093 0000 		sts (RX_TASK+15)+3,r27
 250:main.c        ****   RX_TASK.cpu_reserve.secs = 1;
 203               	.LM9:
 204 005e 81E0      		ldi r24,lo8(1)
 205 0060 90E0      		ldi r25,hi8(1)
 206 0062 A0E0      		ldi r26,hlo8(1)
 207 0064 B0E0      		ldi r27,hhi8(1)
 208 0066 8093 0000 		sts RX_TASK+19,r24
 209 006a 9093 0000 		sts (RX_TASK+19)+1,r25
 210 006e A093 0000 		sts (RX_TASK+19)+2,r26
 211 0072 B093 0000 		sts (RX_TASK+19)+3,r27
 251:main.c        ****   RX_TASK.cpu_reserve.nano_secs = 200 * NANOS_PER_MS;
 213               	.LM10:
 214 0076 80E0      		ldi r24,lo8(200000000)
 215 0078 92EC      		ldi r25,hi8(200000000)
 216 007a ABEE      		ldi r26,hlo8(200000000)
 217 007c BBE0      		ldi r27,hhi8(200000000)
 218 007e 8093 0000 		sts RX_TASK+23,r24
 219 0082 9093 0000 		sts (RX_TASK+23)+1,r25
 220 0086 A093 0000 		sts (RX_TASK+23)+2,r26
 221 008a B093 0000 		sts (RX_TASK+23)+3,r27
 252:main.c        ****   RX_TASK.offset.secs = 0;
 223               	.LM11:
 224 008e 1092 0000 		sts RX_TASK+27,__zero_reg__
 225 0092 1092 0000 		sts (RX_TASK+27)+1,__zero_reg__
 226 0096 1092 0000 		sts (RX_TASK+27)+2,__zero_reg__
 227 009a 1092 0000 		sts (RX_TASK+27)+3,__zero_reg__
 253:main.c        ****   RX_TASK.offset.nano_secs = 0;
 229               	.LM12:
 230 009e 1092 0000 		sts RX_TASK+31,__zero_reg__
 231 00a2 1092 0000 		sts (RX_TASK+31)+1,__zero_reg__
 232 00a6 1092 0000 		sts (RX_TASK+31)+2,__zero_reg__
 233 00aa 1092 0000 		sts (RX_TASK+31)+3,__zero_reg__
 254:main.c        ****   nrk_activate_task (&RX_TASK);
 235               	.LM13:
 236 00ae C801      		movw r24,r16
 237 00b0 0E94 0000 		call nrk_activate_task
 255:main.c        **** 
 256:main.c        ****   /* TX_TASK.task = tx_task; */
 257:main.c        ****   /* nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE); */
 258:main.c        ****   /* TX_TASK.prio = 2; */
 259:main.c        ****   /* TX_TASK.FirstActivation = TRUE; */
 260:main.c        ****   /* TX_TASK.Type = BASIC_TASK; */
 261:main.c        ****   /* TX_TASK.SchType = PREEMPTIVE; */
 262:main.c        ****   /* TX_TASK.period.secs = 1; */
 263:main.c        ****   /* TX_TASK.period.nano_secs = 0; */
 264:main.c        ****   /* TX_TASK.cpu_reserve.secs = 1; */
 265:main.c        ****   /* TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS; */
 266:main.c        ****   /* TX_TASK.offset.secs = 0; */
 267:main.c        ****   /* TX_TASK.offset.nano_secs = 0; */
 268:main.c        ****   /* nrk_activate_task (&TX_TASK); */
 269:main.c        **** 
 270:main.c        **** 
 271:main.c        **** 
 272:main.c        ****   printf ("Create done\r\n");
 239               	.LM14:
 240 00b4 80E0      		ldi r24,lo8(.LC0)
 241 00b6 90E0      		ldi r25,hi8(.LC0)
 242 00b8 0E94 0000 		call puts
 243               	/* epilogue: frame size=0 */
 244 00bc 1F91      		pop r17
 245 00be 0F91      		pop r16
 246 00c0 0895      		ret
 247               	/* epilogue end (size=3) */
 248               	/* function nrk_create_taskset size 97 (92) */
 250               	.Lscope1:
 252               		.stabd	78,0,0
 253               		.data
 254               	.LC1:
 255 000d 7478 5F74 		.string	"tx_task PID=%d\r\n"
 255      6173 6B20 
 255      5049 443D 
 255      2564 0D0A 
 255      00
 256               	.LC2:
 257 001e 5468 6973 		.string	"This is a test %d"
 257      2069 7320 
 257      6120 7465 
 257      7374 2025 
 257      6400 
 258               		.text
 260               	.global	tx_task
 262               	tx_task:
 263               		.stabd	46,0,0
 265               	.LM15:
 266               	.LFBB2:
 267               	/* prologue: frame size=0 */
 268 00c2 8F92      		push r8
 269 00c4 9F92      		push r9
 270 00c6 AF92      		push r10
 271 00c8 BF92      		push r11
 272 00ca CF92      		push r12
 273 00cc DF92      		push r13
 274 00ce EF92      		push r14
 275 00d0 FF92      		push r15
 276 00d2 1F93      		push r17
 277 00d4 CF93      		push r28
 278 00d6 DF93      		push r29
 279               	/* prologue end (size=11) */
 281               	.LM16:
 282 00d8 0E94 0000 		call nrk_get_pid
 283 00dc 9927      		clr r25
 284 00de 9F93      		push r25
 285 00e0 8F93      		push r24
 286 00e2 80E0      		ldi r24,lo8(.LC1)
 287 00e4 90E0      		ldi r25,hi8(.LC1)
 288 00e6 9F93      		push r25
 289 00e8 8F93      		push r24
 290 00ea 0E94 0000 		call printf
 292               	.LM17:
 293 00ee 0F90      		pop __tmp_reg__
 294 00f0 0F90      		pop __tmp_reg__
 295 00f2 0F90      		pop __tmp_reg__
 296 00f4 0F90      		pop __tmp_reg__
 297 00f6 00C0      		rjmp .L4
 298               	.L5:
 300               	.LM18:
 301 00f8 0E94 0000 		call nrk_wait_until_next_period
 302               	.L4:
 304               	.LM19:
 305 00fc 0E94 0000 		call bmac_started
 306 0100 8823      		tst r24
 307 0102 01F0      		breq .L5
 309               	.LM20:
 310 0104 0E94 0000 		call bmac_get_tx_done_signal
 312               	.LM21:
 313 0108 0E94 0000 		call nrk_signal_register
 315               	.LM22:
 316 010c 1092 0000 		sts ctr_cnt,__zero_reg__
 317 0110 1092 0000 		sts ctr_cnt+1,__zero_reg__
 318 0114 1092 0000 		sts ctr_cnt+2,__zero_reg__
 319 0118 1092 0000 		sts ctr_cnt+3,__zero_reg__
 320 011c 10E0      		ldi r17,lo8(0)
 322               	.LM23:
 323 011e C0E0      		ldi r28,lo8(tx_buf)
 324 0120 D0E0      		ldi r29,hi8(tx_buf)
 325 0122 30E0      		ldi r19,lo8(.LC2)
 326 0124 832E      		mov r8,r19
 327 0126 30E0      		ldi r19,hi8(.LC2)
 328 0128 932E      		mov r9,r19
 329 012a 20E0      		ldi r18,lo8(ctr_cnt)
 330 012c A22E      		mov r10,r18
 331 012e 20E0      		ldi r18,hi8(ctr_cnt)
 332 0130 B22E      		mov r11,r18
 333 0132 90E0      		ldi r25,lo8(__c.2483)
 334 0134 C92E      		mov r12,r25
 335 0136 90E0      		ldi r25,hi8(__c.2483)
 336 0138 D92E      		mov r13,r25
 337 013a 80E0      		ldi r24,lo8(__c.2485)
 338 013c E82E      		mov r14,r24
 339 013e 80E0      		ldi r24,hi8(__c.2485)
 340 0140 F82E      		mov r15,r24
 341               	.L7:
 342 0142 812F      		mov r24,r17
 343 0144 9927      		clr r25
 344 0146 9F93      		push r25
 345 0148 8F93      		push r24
 346 014a 9F92      		push r9
 347 014c 8F92      		push r8
 348 014e DF93      		push r29
 349 0150 CF93      		push r28
 350 0152 0E94 0000 		call sprintf
 352               	.LM24:
 353 0156 81E0      		ldi r24,lo8(1)
 354 0158 90E0      		ldi r25,hi8(1)
 355 015a 0E94 0000 		call nrk_led_set
 357               	.LM25:
 358 015e 1093 0000 		sts ctr_cnt,r17
 360               	.LM26:
 361 0162 8DB7      		in r24,__SP_L__
 362 0164 9EB7      		in r25,__SP_H__
 363 0166 0696      		adiw r24,6
 364 0168 0FB6      		in __tmp_reg__,__SREG__
 365 016a F894      		cli
 366 016c 9EBF      		out __SP_H__,r25
 367 016e 0FBE      		out __SREG__,__tmp_reg__
 368 0170 8DBF      		out __SP_L__,r24
 369 0172 1F3F      		cpi r17,lo8(-1)
 370 0174 01F4      		brne .L8
 371 0176 8091 0000 		lds r24,ctr_cnt+1
 372 017a 8F5F      		subi r24,lo8(-(1))
 373 017c 8093 0000 		sts ctr_cnt+1,r24
 374               	.L8:
 376               	.LM27:
 377 0180 8091 0000 		lds r24,ctr_cnt+1
 378 0184 8F3F      		cpi r24,lo8(-1)
 379 0186 01F4      		brne .L10
 380 0188 8091 0000 		lds r24,ctr_cnt+2
 381 018c 8F5F      		subi r24,lo8(-(1))
 382 018e 8093 0000 		sts ctr_cnt+2,r24
 383               	.L10:
 385               	.LM28:
 386 0192 8091 0000 		lds r24,ctr_cnt+2
 387 0196 8F3F      		cpi r24,lo8(-1)
 388 0198 01F4      		brne .L12
 389 019a 8091 0000 		lds r24,ctr_cnt+3
 390 019e 8F5F      		subi r24,lo8(-(1))
 391 01a0 8093 0000 		sts ctr_cnt+3,r24
 392               	.L12:
 394               	.LM29:
 395 01a4 64E0      		ldi r22,lo8(4)
 396 01a6 C501      		movw r24,r10
 397 01a8 0E94 0000 		call bmac_encryption_set_ctr_counter
 399               	.LM30:
 400 01ac FE01      		movw r30,r28
 401 01ae 0190      		ld __tmp_reg__,Z+
 402 01b0 0020      		tst __tmp_reg__
 403 01b2 01F4      		brne .-6
 404 01b4 3197      		sbiw r30,1
 405 01b6 E050      		subi r30,lo8(tx_buf)
 406 01b8 F040      		sbci r31,hi8(tx_buf)
 407 01ba 6E2F      		mov r22,r30
 408 01bc CE01      		movw r24,r28
 409 01be 0E94 0000 		call bmac_tx_pkt
 411               	.LM31:
 412 01c2 8130      		cpi r24,lo8(1)
 413 01c4 01F4      		brne .L14
 414 01c6 1F5F      		subi r17,lo8(-(1))
 415 01c8 00C0      		rjmp .L16
 416               	.L14:
 418               	.LM32:
 419 01ca C601      		movw r24,r12
 420 01cc 0E94 0000 		call nrk_kprintf
 421               	.L16:
 423               	.LM33:
 424 01d0 C701      		movw r24,r14
 425 01d2 0E94 0000 		call nrk_kprintf
 427               	.LM34:
 428 01d6 81E0      		ldi r24,lo8(1)
 429 01d8 90E0      		ldi r25,hi8(1)
 430 01da 0E94 0000 		call nrk_led_clr
 432               	.LM35:
 433 01de 0E94 0000 		call nrk_wait_until_next_period
 434 01e2 00C0      		rjmp .L7
 435               	/* epilogue: frame size=0 */
 436               	/* epilogue: noreturn */
 437               	/* epilogue end (size=0) */
 438               	/* function tx_task size 145 (134) */
 443               	.Lscope2:
 445               		.stabd	78,0,0
 446               		.data
 447               	.LC3:
 448 0030 2564 2C20 		.string	"%d, %d, %d\n\r"
 448      2564 2C20 
 448      2564 0A0D 
 448      00
 449               		.text
 451               	.global	rx_task
 453               	rx_task:
 454               		.stabd	46,0,0
 456               	.LM36:
 457               	.LFBB3:
 458               	/* prologue: frame size=16 */
 459 01e4 AF92      		push r10
 460 01e6 BF92      		push r11
 461 01e8 CF92      		push r12
 462 01ea DF92      		push r13
 463 01ec EF92      		push r14
 464 01ee FF92      		push r15
 465 01f0 0F93      		push r16
 466 01f2 1F93      		push r17
 467 01f4 CF93      		push r28
 468 01f6 DF93      		push r29
 469 01f8 CDB7      		in r28,__SP_L__
 470 01fa DEB7      		in r29,__SP_H__
 471 01fc 6097      		sbiw r28,16
 472 01fe 0FB6      		in __tmp_reg__,__SREG__
 473 0200 F894      		cli
 474 0202 DEBF      		out __SP_H__,r29
 475 0204 0FBE      		out __SREG__,__tmp_reg__
 476 0206 CDBF      		out __SP_L__,r28
 477               	/* prologue end (size=18) */
 479               	.LM37:
 480 0208 84E1      		ldi r24,lo8(20)
 481 020a 0E94 0000 		call bmac_init
 483               	.LM38:
 484 020e 1986      		std Y+9,__zero_reg__
 485 0210 1A86      		std Y+10,__zero_reg__
 486 0212 1B86      		std Y+11,__zero_reg__
 487 0214 1C86      		std Y+12,__zero_reg__
 489               	.LM39:
 490 0216 80E4      		ldi r24,lo8(25000000)
 491 0218 98E7      		ldi r25,hi8(25000000)
 492 021a ADE7      		ldi r26,hlo8(25000000)
 493 021c B1E0      		ldi r27,hhi8(25000000)
 494 021e 8D87      		std Y+13,r24
 495 0220 9E87      		std Y+14,r25
 496 0222 AF87      		std Y+15,r26
 497 0224 B88B      		std Y+16,r27
 499               	.LM40:
 500 0226 2985      		ldd r18,Y+9
 501 0228 3A85      		ldd r19,Y+10
 502 022a 4B85      		ldd r20,Y+11
 503 022c 5C85      		ldd r21,Y+12
 504 022e 6D85      		ldd r22,Y+13
 505 0230 7E85      		ldd r23,Y+14
 506 0232 8F85      		ldd r24,Y+15
 507 0234 9889      		ldd r25,Y+16
 508 0236 0E94 0000 		call bmac_set_rx_check_rate
 510               	.LM41:
 511 023a 81E0      		ldi r24,lo8(1)
 512 023c 90E0      		ldi r25,hi8(1)
 513 023e 0E94 0000 		call bmac_addr_decode_set_my_mac
 515               	.LM42:
 516 0242 0E94 0000 		call bmac_addr_decode_enable
 518               	.LM43:
 519 0246 0E94 0000 		call bmac_auto_ack_enable
 521               	.LM44:
 522 024a 64E7      		ldi r22,lo8(116)
 523 024c 80E0      		ldi r24,lo8(rx_buf)
 524 024e 90E0      		ldi r25,hi8(rx_buf)
 525 0250 0E94 0000 		call bmac_rx_pkt_set_buffer
 527               	.LM45:
 528 0254 52E0      		ldi r21,lo8(2)
 529 0256 A52E      		mov r10,r21
 530 0258 B12C      		mov r11,__zero_reg__
 531 025a AC0E      		add r10,r28
 532 025c BD1E      		adc r11,r29
 533 025e 6E01      		movw r12,r28
 534 0260 0894      		sec
 535 0262 C11C      		adc r12,__zero_reg__
 536 0264 D11C      		adc r13,__zero_reg__
 538               	.LM46:
 539 0266 43E0      		ldi r20,lo8(3)
 540 0268 E42E      		mov r14,r20
 541 026a F12C      		mov r15,__zero_reg__
 542 026c EC0E      		add r14,r28
 543 026e FD1E      		adc r15,r29
 545               	.LM47:
 546 0270 00E0      		ldi r16,lo8(.LC3)
 547 0272 10E0      		ldi r17,hi8(.LC3)
 548               	.L19:
 550               	.LM48:
 551 0274 0E94 0000 		call bmac_wait_until_rx_pkt
 553               	.LM49:
 554 0278 80E0      		ldi r24,lo8(0)
 555 027a 90E0      		ldi r25,hi8(0)
 556 027c 0E94 0000 		call nrk_led_set
 558               	.LM50:
 559 0280 B501      		movw r22,r10
 560 0282 C601      		movw r24,r12
 561 0284 0E94 0000 		call bmac_rx_pkt_get
 563               	.LM51:
 564 0288 8981      		ldd r24,Y+1
 565 028a 282F      		mov r18,r24
 566 028c 3327      		clr r19
 567 028e B901      		movw r22,r18
 568 0290 6650      		subi r22,lo8(-(-6))
 569 0292 7040      		sbci r23,hi8(-(-6))
 570 0294 41E0      		ldi r20,lo8(1)
 571 0296 00C0      		rjmp .L20
 572               	.L21:
 573 0298 4E5F      		subi r20,lo8(-(2))
 574               	.L20:
 575 029a 842F      		mov r24,r20
 576 029c 9927      		clr r25
 577 029e 8617      		cp r24,r22
 578 02a0 9707      		cpc r25,r23
 579 02a2 00F0      		brlo .L21
 581               	.LM52:
 582 02a4 D701      		movw r26,r14
 583 02a6 F901      		movw r30,r18
 584 02a8 E050      		subi r30,lo8(-(rx_buf-6))
 585 02aa F040      		sbci r31,hi8(-(rx_buf-6))
 586 02ac 86E0      		ldi r24,lo8(6)
 587               	.L23:
 588 02ae 0190      		ld r0,Z+
 589 02b0 0D92      		st X+,r0
 590 02b2 8150      		subi r24,lo8(-(-1))
 591 02b4 01F4      		brne .L23
 593               	.LM53:
 594 02b6 8F81      		ldd r24,Y+7
 595 02b8 9885      		ldd r25,Y+8
 596 02ba 9F93      		push r25
 597 02bc 8F93      		push r24
 598 02be 8D81      		ldd r24,Y+5
 599 02c0 9E81      		ldd r25,Y+6
 600 02c2 9F93      		push r25
 601 02c4 8F93      		push r24
 602 02c6 8B81      		ldd r24,Y+3
 603 02c8 9C81      		ldd r25,Y+4
 604 02ca 9F93      		push r25
 605 02cc 8F93      		push r24
 606 02ce 1F93      		push r17
 607 02d0 0F93      		push r16
 608 02d2 0E94 0000 		call printf
 610               	.LM54:
 611 02d6 80E0      		ldi r24,lo8(0)
 612 02d8 90E0      		ldi r25,hi8(0)
 613 02da 0E94 0000 		call nrk_led_clr
 615               	.LM55:
 616 02de 0E94 0000 		call bmac_rx_pkt_release
 618               	.LM56:
 619 02e2 8DB7      		in r24,__SP_L__
 620 02e4 9EB7      		in r25,__SP_H__
 621 02e6 0896      		adiw r24,8
 622 02e8 0FB6      		in __tmp_reg__,__SREG__
 623 02ea F894      		cli
 624 02ec 9EBF      		out __SP_H__,r25
 625 02ee 0FBE      		out __SREG__,__tmp_reg__
 626 02f0 8DBF      		out __SP_L__,r24
 627 02f2 00C0      		rjmp .L19
 628               	/* epilogue: frame size=16 */
 629               	/* epilogue: noreturn */
 630               	/* epilogue end (size=0) */
 631               	/* function rx_task size 137 (119) */
 640               	.Lscope3:
 642               		.stabd	78,0,0
 644               	.global	main
 646               	main:
 647               		.stabd	46,0,0
 649               	.LM57:
 650               	.LFBB4:
 651               	/* prologue: frame size=0 */
 652 02f4 C0E0      		ldi r28,lo8(__stack - 0)
 653 02f6 D0E0      		ldi r29,hi8(__stack - 0)
 654 02f8 DEBF      		out __SP_H__,r29
 655 02fa CDBF      		out __SP_L__,r28
 656               	/* prologue end (size=4) */
 658               	.LM58:
 659 02fc 0E94 0000 		call nrk_setup_ports
 661               	.LM59:
 662 0300 87E0      		ldi r24,lo8(7)
 663 0302 90E0      		ldi r25,hi8(7)
 664 0304 0E94 0000 		call nrk_setup_uart
 666               	.LM60:
 667 0308 0E94 0000 		call nrk_init
 669               	.LM61:
 670 030c 80E0      		ldi r24,lo8(0)
 671 030e 90E0      		ldi r25,hi8(0)
 672 0310 0E94 0000 		call nrk_led_clr
 674               	.LM62:
 675 0314 81E0      		ldi r24,lo8(1)
 676 0316 90E0      		ldi r25,hi8(1)
 677 0318 0E94 0000 		call nrk_led_clr
 679               	.LM63:
 680 031c 82E0      		ldi r24,lo8(2)
 681 031e 90E0      		ldi r25,hi8(2)
 682 0320 0E94 0000 		call nrk_led_clr
 684               	.LM64:
 685 0324 83E0      		ldi r24,lo8(3)
 686 0326 90E0      		ldi r25,hi8(3)
 687 0328 0E94 0000 		call nrk_led_clr
 689               	.LM65:
 690 032c 20E0      		ldi r18,lo8(0)
 691 032e 30E0      		ldi r19,hi8(0)
 692 0330 40E0      		ldi r20,hlo8(0)
 693 0332 50E0      		ldi r21,hhi8(0)
 694 0334 60E0      		ldi r22,lo8(0)
 695 0336 70E0      		ldi r23,hi8(0)
 696 0338 80E0      		ldi r24,hlo8(0)
 697 033a 90E0      		ldi r25,hhi8(0)
 698 033c 0E94 0000 		call nrk_time_set
 700               	.LM66:
 701 0340 0E94 0000 		call bmac_task_config
 703               	.LM67:
 704 0344 0E94 0000 		call nrk_create_taskset
 706               	.LM68:
 707 0348 0E94 0000 		call nrk_start
 709               	.LM69:
 710 034c 80E0      		ldi r24,lo8(0)
 711 034e 90E0      		ldi r25,hi8(0)
 712               	/* epilogue: frame size=0 */
 713 0350 0C94 0000 		jmp exit
 714               	/* epilogue end (size=2) */
 715               	/* function main size 48 (42) */
 717               	.Lscope4:
 719               		.stabd	78,0,0
 720               		.section	.progmem.data,"a",@progbits
 723               	__c.2485:
 724 0000 5478 2074 		.string	"Tx task sent data!\r\n"
 724      6173 6B20 
 724      7365 6E74 
 724      2064 6174 
 724      6121 0D0A 
 727               	__c.2483:
 728 0015 4E4F 2061 		.string	"NO ack or Reserve Violated!\r\n"
 728      636B 206F 
 728      7220 5265 
 728      7365 7276 
 728      6520 5669 
 729               		.comm _nrk_signal_list,4,1
 730               		.comm nrk_idle_task_stk,128,1
 731               		.comm nrk_kernel_stk_ptr,2,1
 732               		.comm tx_reserve,1,1
 733               		.comm bmac_task,35,1
 734               		.comm bmac_task_stack,128,1
 735               		.comm cca_active,1,1
 736               		.comm bmac_rx_pkt_signal,1,1
 737               		.comm bmac_tx_pkt_done_signal,1,1
 738               		.comm bmac_enable_signal,1,1
 739               		.comm bmac_rfRxInfo,9,1
 740               		.comm bmac_rfTxInfo,7,1
 741               		.comm error_task,1,1
 742               		.comm error_num,1,1
 743               		.comm _nrk_prev_timer_val,1,1
 744               		.comm _nrk_time_trigger,1,1
 745               		.comm app_timer0_callback,2,1
 746               		.comm app_timer0_prescale,1,1
 747               		.comm RX_TASK,35,1
 748               		.comm rx_task_stack,128,1
 749               		.comm TX_TASK,35,1
 750               		.comm tx_task_stack,128,1
 751               		.comm tx_buf,116,1
 752               		.comm rx_buf,116,1
 753               		.comm ctr_cnt,4,1
 781               		.text
 783               	.Letext0:
 784               	/* File "main.c": code  427 = 0x01ab ( 387), prologues  35, epilogues   5 */
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqdeaDq.s:2      *ABS*:0000003f __SREG__
     /tmp/ccqdeaDq.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccqdeaDq.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccqdeaDq.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccqdeaDq.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccqdeaDq.s:147    .text:00000000 nrk_create_taskset
     /tmp/ccqdeaDq.s:453    .text:000001e4 rx_task
                            *COM*:00000023 RX_TASK
                            *COM*:00000080 rx_task_stack
     /tmp/ccqdeaDq.s:262    .text:000000c2 tx_task
                            *COM*:00000004 ctr_cnt
                            *COM*:00000074 tx_buf
     /tmp/ccqdeaDq.s:727    .progmem.data:00000015 __c.2483
     /tmp/ccqdeaDq.s:723    .progmem.data:00000000 __c.2485
                            *COM*:00000074 rx_buf
     /tmp/ccqdeaDq.s:646    .text:000002f4 main
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 tx_reserve
                            *COM*:00000023 bmac_task
                            *COM*:00000080 bmac_task_stack
                            *COM*:00000001 cca_active
                            *COM*:00000001 bmac_rx_pkt_signal
                            *COM*:00000001 bmac_tx_pkt_done_signal
                            *COM*:00000001 bmac_enable_signal
                            *COM*:00000009 bmac_rfRxInfo
                            *COM*:00000007 bmac_rfTxInfo
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000023 TX_TASK
                            *COM*:00000080 tx_task_stack

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_set_stk
nrk_activate_task
puts
nrk_get_pid
printf
nrk_wait_until_next_period
bmac_started
bmac_get_tx_done_signal
nrk_signal_register
sprintf
nrk_led_set
bmac_encryption_set_ctr_counter
bmac_tx_pkt
nrk_kprintf
nrk_led_clr
bmac_init
bmac_set_rx_check_rate
bmac_addr_decode_set_my_mac
bmac_addr_decode_enable
bmac_auto_ack_enable
bmac_rx_pkt_set_buffer
bmac_wait_until_rx_pkt
bmac_rx_pkt_get
bmac_rx_pkt_release
__stack
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
bmac_task_config
nrk_start
exit
