   1               		.file	"nrk.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 134               	.global	nrk_int_disable
 136               	nrk_int_disable:
 137               		.stabd	46,0,0
   1:../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk.c **** *
   6:../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk.c **** *
  10:../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk.c **** *
  14:../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk.c **** *
  19:../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk.c **** *
  22:../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk.c **** 
  28:../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  43:../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  44:../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  45:../../src/kernel/source/nrk.c **** 
  46:../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 139               	.LM0:
 140               	.LFBB1:
 141               	/* prologue: frame size=0 */
 142               	/* prologue end (size=0) */
  47:../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 144               	.LM1:
 145               	/* #APP */
 146 0000 F894      		cli
 147               		
 148               	/* #NOAPP */
 149               	/* epilogue: frame size=0 */
 150 0002 0895      		ret
 151               	/* epilogue end (size=1) */
 152               	/* function nrk_int_disable size 5 (4) */
 154               	.Lscope1:
 156               		.stabd	78,0,0
 158               	.global	nrk_int_enable
 160               	nrk_int_enable:
 161               		.stabd	46,0,0
  48:../../src/kernel/source/nrk.c **** };
  49:../../src/kernel/source/nrk.c **** 
  50:../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 163               	.LM2:
 164               	.LFBB2:
 165               	/* prologue: frame size=0 */
 166               	/* prologue end (size=0) */
  51:../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 168               	.LM3:
 169               	/* #APP */
 170 0004 7894      		sei
 171               		
 172               	/* #NOAPP */
 173               	/* epilogue: frame size=0 */
 174 0006 0895      		ret
 175               	/* epilogue end (size=1) */
 176               	/* function nrk_int_enable size 5 (4) */
 178               	.Lscope2:
 180               		.stabd	78,0,0
 182               	.global	nrk_version
 184               	nrk_version:
 185               		.stabd	46,0,0
  52:../../src/kernel/source/nrk.c **** };
  53:../../src/kernel/source/nrk.c **** 
  54:../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  55:../../src/kernel/source/nrk.c **** 
  56:../../src/kernel/source/nrk.c **** 
  57:../../src/kernel/source/nrk.c **** void nrk_halt()
  58:../../src/kernel/source/nrk.c **** {
  59:../../src/kernel/source/nrk.c **** nrk_int_disable();
  60:../../src/kernel/source/nrk.c **** while(1);
  61:../../src/kernel/source/nrk.c **** }
  62:../../src/kernel/source/nrk.c **** 
  63:../../src/kernel/source/nrk.c **** /**
  64:../../src/kernel/source/nrk.c ****  *  nrk_init();
  65:../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  66:../../src/kernel/source/nrk.c ****  *  - Init global variables
  67:../../src/kernel/source/nrk.c ****  *  - Init event list
  68:../../src/kernel/source/nrk.c ****  *  - Create idle task
  69:../../src/kernel/source/nrk.c ****  */
  70:../../src/kernel/source/nrk.c **** void nrk_init()
  71:../../src/kernel/source/nrk.c **** {
  72:../../src/kernel/source/nrk.c **** 	
  73:../../src/kernel/source/nrk.c ****     uint8_t i;	
  74:../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  75:../../src/kernel/source/nrk.c **** 	
  76:../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  77:../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
  78:../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
  79:../../src/kernel/source/nrk.c **** 	
  80:../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../src/kernel/source/nrk.c ****    if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  82:../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  83:../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  84:../../src/kernel/source/nrk.c ****    #endif
  85:../../src/kernel/source/nrk.c **** 
  86:../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
  87:../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
  88:../../src/kernel/source/nrk.c ****    while(1)
  89:../../src/kernel/source/nrk.c **** 	   {
  90:../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
  91:../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
  92:../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
  93:../../src/kernel/source/nrk.c **** 	   }
  94:../../src/kernel/source/nrk.c ****    #endif
  95:../../src/kernel/source/nrk.c ****    #endif
  96:../../src/kernel/source/nrk.c **** 
  97:../../src/kernel/source/nrk.c ****     #ifdef NRK_WATCHDOG
  98:../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
  99:../../src/kernel/source/nrk.c **** 	{
 100:../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 101:../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 102:../../src/kernel/source/nrk.c **** 	}
 103:../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 104:../../src/kernel/source/nrk.c ****     #endif
 105:../../src/kernel/source/nrk.c ****   
 106:../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 107:../../src/kernel/source/nrk.c **** /* 
 108:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 109:../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 110:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 111:../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 112:../../src/kernel/source/nrk.c ****     #else
 113:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 114:../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 115:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 116:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 117:../../src/kernel/source/nrk.c ****     #endif
 118:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 119:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 120:../../src/kernel/source/nrk.c **** */	
 121:../../src/kernel/source/nrk.c ****  
 122:../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 123:../../src/kernel/source/nrk.c **** 
 124:../../src/kernel/source/nrk.c ****     
 125:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 126:../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 127:../../src/kernel/source/nrk.c ****     
 128:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 129:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 130:../../src/kernel/source/nrk.c **** 
 131:../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 132:../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 133:../../src/kernel/source/nrk.c ****    #endif
 134:../../src/kernel/source/nrk.c **** 
 135:../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 136:../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 137:../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 138:../../src/kernel/source/nrk.c ****     #endif
 139:../../src/kernel/source/nrk.c **** 
 140:../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 141:../../src/kernel/source/nrk.c **** 
 142:../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 143:../../src/kernel/source/nrk.c **** {
 144:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 145:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 146:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 147:../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 148:../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 149:../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 150:../../src/kernel/source/nrk.c ****     
 151:../../src/kernel/source/nrk.c **** }        
 152:../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 153:../../src/kernel/source/nrk.c **** 	{
 154:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 155:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 156:../../src/kernel/source/nrk.c ****         }
 157:../../src/kernel/source/nrk.c ****   
 158:../../src/kernel/source/nrk.c ****        
 159:../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 160:../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 161:../../src/kernel/source/nrk.c **** 	{
 162:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 163:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 164:../../src/kernel/source/nrk.c **** 	}
 165:../../src/kernel/source/nrk.c **** 	
 166:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 167:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 168:../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 169:../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 170:../../src/kernel/source/nrk.c **** 	
 171:../../src/kernel/source/nrk.c **** 	
 172:../../src/kernel/source/nrk.c **** 	
 173:../../src/kernel/source/nrk.c **** 
 174:../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 175:../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 176:../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 177:../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 178:../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 179:../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 180:../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 181:../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 182:../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 183:../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 184:../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 185:../../src/kernel/source/nrk.c **** 	
 186:../../src/kernel/source/nrk.c **** }
 187:../../src/kernel/source/nrk.c **** 
 188:../../src/kernel/source/nrk.c **** 
 189:../../src/kernel/source/nrk.c **** 
 190:../../src/kernel/source/nrk.c **** 
 191:../../src/kernel/source/nrk.c **** 
 192:../../src/kernel/source/nrk.c **** 
 193:../../src/kernel/source/nrk.c **** 
 194:../../src/kernel/source/nrk.c **** 
 195:../../src/kernel/source/nrk.c **** void nrk_start (void)
 196:../../src/kernel/source/nrk.c **** {
 197:../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 198:../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 199:../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 200:../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 201:../../src/kernel/source/nrk.c **** 
 202:../../src/kernel/source/nrk.c **** 	/*
 203:../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 204:../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 205:../../src/kernel/source/nrk.c **** 	*/
 206:../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 207:../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 208:../../src/kernel/source/nrk.c ****     {
 209:../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 210:../../src/kernel/source/nrk.c **** 	// only check activated tasks
 211:../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 212:../../src/kernel/source/nrk.c **** 	{
 213:../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 214:../../src/kernel/source/nrk.c **** 		{
 215:../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 216:../../src/kernel/source/nrk.c **** 			{
 217:../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 218:../../src/kernel/source/nrk.c **** 
 219:../../src/kernel/source/nrk.c **** 			}
 220:../../src/kernel/source/nrk.c **** 		}
 221:../../src/kernel/source/nrk.c **** 	}
 222:../../src/kernel/source/nrk.c **** 
 223:../../src/kernel/source/nrk.c ****     }
 224:../../src/kernel/source/nrk.c **** 
 225:../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 226:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 227:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 228:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 229:../../src/kernel/source/nrk.c **** 		
 230:../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 231:../../src/kernel/source/nrk.c **** 
 232:../../src/kernel/source/nrk.c ****     /*
 233:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 234:../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 235:../../src/kernel/source/nrk.c ****     #else
 236:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 237:../../src/kernel/source/nrk.c ****     #endif
 238:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 239:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 240:../../src/kernel/source/nrk.c ****     
 241:../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 242:../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 243:../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 244:../../src/kernel/source/nrk.c **** */
 245:../../src/kernel/source/nrk.c ****     nrk_target_start();
 246:../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 247:../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 248:../../src/kernel/source/nrk.c **** 
 249:../../src/kernel/source/nrk.c ****     // you should never get here    
 250:../../src/kernel/source/nrk.c ****     while(1);
 251:../../src/kernel/source/nrk.c **** }
 252:../../src/kernel/source/nrk.c **** 
 253:../../src/kernel/source/nrk.c **** 
 254:../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 255:../../src/kernel/source/nrk.c **** {
 256:../../src/kernel/source/nrk.c **** 	
 257:../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 258:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 259:../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 260:../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 261:../../src/kernel/source/nrk.c **** 
 262:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 263:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 264:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 265:../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 266:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 267:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 268:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 269:../../src/kernel/source/nrk.c ****     
 270:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 271:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 272:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
 273:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
 274:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 275:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
 276:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 277:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 278:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 279:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 280:../../src/kernel/source/nrk.c ****  
 281:../../src/kernel/source/nrk.c **** 	
 282:../../src/kernel/source/nrk.c **** 	         
 283:../../src/kernel/source/nrk.c **** 
 284:../../src/kernel/source/nrk.c **** 			
 285:../../src/kernel/source/nrk.c ****     return NRK_OK;
 286:../../src/kernel/source/nrk.c **** 
 287:../../src/kernel/source/nrk.c **** }
 288:../../src/kernel/source/nrk.c **** 
 289:../../src/kernel/source/nrk.c **** 
 290:../../src/kernel/source/nrk.c **** /*
 291:../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 292:../../src/kernel/source/nrk.c ****  *
 293:../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 294:../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 295:../../src/kernel/source/nrk.c ****  */
 296:../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 297:../../src/kernel/source/nrk.c **** {
 298:../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 299:../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 300:../../src/kernel/source/nrk.c **** 
 301:../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 302:../../src/kernel/source/nrk.c **** 
 303:../../src/kernel/source/nrk.c ****   	return;
 304:../../src/kernel/source/nrk.c **** }
 305:../../src/kernel/source/nrk.c **** 
 306:../../src/kernel/source/nrk.c **** 
 307:../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 308:../../src/kernel/source/nrk.c **** {
 187               	.LM4:
 188               	.LFBB3:
 189               	/* prologue: frame size=0 */
 190               	/* prologue end (size=0) */
 309:../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 310:../../src/kernel/source/nrk.c **** }
 192               	.LM5:
 193 0008 85E6      		ldi r24,lo8(101)
 194 000a 90E0      		ldi r25,hi8(101)
 195               	/* epilogue: frame size=0 */
 196 000c 0895      		ret
 197               	/* epilogue end (size=1) */
 198               	/* function nrk_version size 3 (2) */
 200               	.Lscope3:
 202               		.stabd	78,0,0
 204               	.global	_nrk_timer_tick
 206               	_nrk_timer_tick:
 207               		.stabd	46,0,0
 209               	.LM6:
 210               	.LFBB4:
 211               	/* prologue: frame size=0 */
 212               	/* prologue end (size=0) */
 214               	.LM7:
 215 000e 0E94 0000 		call _nrk_scheduler
 216               	/* epilogue: frame size=0 */
 217 0012 0895      		ret
 218               	/* epilogue end (size=1) */
 219               	/* function _nrk_timer_tick size 3 (2) */
 221               	.Lscope4:
 223               		.stabd	78,0,0
 231               	.global	nrk_TCB_init
 233               	nrk_TCB_init:
 234               		.stabd	46,0,0
 236               	.LM8:
 237               	.LFBB5:
 238               	/* prologue: frame size=0 */
 239 0014 EF92      		push r14
 240 0016 FF92      		push r15
 241 0018 0F93      		push r16
 242 001a 1F93      		push r17
 243 001c CF93      		push r28
 244 001e DF93      		push r29
 245               	/* prologue end (size=6) */
 246 0020 EC01      		movw r28,r24
 247 0022 8B01      		movw r16,r22
 248 0024 7A01      		movw r14,r20
 250               	.LM9:
 251 0026 8985      		ldd r24,Y+9
 252 0028 8230      		cpi r24,lo8(2)
 253 002a 01F0      		breq .L10
 255               	.LM10:
 256 002c 8091 0000 		lds r24,nrk_task_init_cnt
 257 0030 8883      		st Y,r24
 258 0032 00C0      		rjmp .L12
 259               	.L10:
 261               	.LM11:
 262 0034 1882      		st Y,__zero_reg__
 263               	.L12:
 265               	.LM12:
 266 0036 8091 0000 		lds r24,nrk_task_init_cnt
 267 003a 8430      		cpi r24,lo8(4)
 268 003c 00F0      		brlo .L13
 269 003e 60E0      		ldi r22,lo8(0)
 270 0040 87E0      		ldi r24,lo8(7)
 271 0042 0E94 0000 		call nrk_kernel_error_add
 272               	.L13:
 274               	.LM13:
 275 0046 8985      		ldd r24,Y+9
 276 0048 8230      		cpi r24,lo8(2)
 277 004a 01F0      		breq .L15
 278 004c 8091 0000 		lds r24,nrk_task_init_cnt
 279 0050 8F5F      		subi r24,lo8(-(1))
 280 0052 8093 0000 		sts nrk_task_init_cnt,r24
 281               	.L15:
 283               	.LM14:
 284 0056 8091 0000 		lds r24,nrk_task_init_cnt
 285 005a 8823      		tst r24
 286 005c 01F4      		brne .L17
 287 005e 81E0      		ldi r24,lo8(1)
 288 0060 8093 0000 		sts nrk_task_init_cnt,r24
 289               	.L17:
 291               	.LM15:
 292 0064 8881      		ld r24,Y
 293 0066 9927      		clr r25
 294 0068 87FD      		sbrc r24,7
 295 006a 9095      		com r25
 296 006c FC01      		movw r30,r24
 297 006e 45E0      		ldi r20,5
 298 0070 EE0F      	1:	lsl r30
 299 0072 FF1F      		rol r31
 300 0074 4A95      		dec r20
 301 0076 01F4      		brne 1b
 302 0078 E80F      		add r30,r24
 303 007a F91F      		adc r31,r25
 304 007c E050      		subi r30,lo8(-(nrk_task_TCB))
 305 007e F040      		sbci r31,hi8(-(nrk_task_TCB))
 306 0080 1183      		std Z+1,r17
 307 0082 0083      		st Z,r16
 309               	.LM16:
 310 0084 8881      		ld r24,Y
 311 0086 9927      		clr r25
 312 0088 87FD      		sbrc r24,7
 313 008a 9095      		com r25
 314 008c FC01      		movw r30,r24
 315 008e 35E0      		ldi r19,5
 316 0090 EE0F      	1:	lsl r30
 317 0092 FF1F      		rol r31
 318 0094 3A95      		dec r19
 319 0096 01F4      		brne 1b
 320 0098 E80F      		add r30,r24
 321 009a F91F      		adc r31,r25
 322 009c E050      		subi r30,lo8(-(nrk_task_TCB))
 323 009e F040      		sbci r31,hi8(-(nrk_task_TCB))
 324 00a0 8885      		ldd r24,Y+8
 325 00a2 8287      		std Z+10,r24
 327               	.LM17:
 328 00a4 8881      		ld r24,Y
 329 00a6 9927      		clr r25
 330 00a8 87FD      		sbrc r24,7
 331 00aa 9095      		com r25
 332 00ac FC01      		movw r30,r24
 333 00ae 25E0      		ldi r18,5
 334 00b0 EE0F      	1:	lsl r30
 335 00b2 FF1F      		rol r31
 336 00b4 2A95      		dec r18
 337 00b6 01F4      		brne 1b
 338 00b8 E80F      		add r30,r24
 339 00ba F91F      		adc r31,r25
 340 00bc E050      		subi r30,lo8(-(nrk_task_TCB))
 341 00be F040      		sbci r31,hi8(-(nrk_task_TCB))
 342 00c0 83E0      		ldi r24,lo8(3)
 343 00c2 8187      		std Z+9,r24
 345               	.LM18:
 346 00c4 2881      		ld r18,Y
 347 00c6 822F      		mov r24,r18
 348 00c8 9927      		clr r25
 349 00ca 87FD      		sbrc r24,7
 350 00cc 9095      		com r25
 351 00ce FC01      		movw r30,r24
 352 00d0 05E0      		ldi r16,5
 353 00d2 EE0F      	1:	lsl r30
 354 00d4 FF1F      		rol r31
 355 00d6 0A95      		dec r16
 356 00d8 01F4      		brne 1b
 357 00da E80F      		add r30,r24
 358 00dc F91F      		adc r31,r25
 359 00de E050      		subi r30,lo8(-(nrk_task_TCB))
 360 00e0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 361 00e2 2087      		std Z+8,r18
 363               	.LM19:
 364 00e4 8881      		ld r24,Y
 365 00e6 9927      		clr r25
 366 00e8 87FD      		sbrc r24,7
 367 00ea 9095      		com r25
 368 00ec FC01      		movw r30,r24
 369 00ee 15E0      		ldi r17,5
 370 00f0 EE0F      	1:	lsl r30
 371 00f2 FF1F      		rol r31
 372 00f4 1A95      		dec r17
 373 00f6 01F4      		brne 1b
 374 00f8 E80F      		add r30,r24
 375 00fa F91F      		adc r31,r25
 376 00fc E050      		subi r30,lo8(-(nrk_task_TCB))
 377 00fe F040      		sbci r31,hi8(-(nrk_task_TCB))
 378 0100 1582      		std Z+5,__zero_reg__
 380               	.LM20:
 381 0102 0881      		ld r16,Y
 382 0104 1127      		clr r17
 383 0106 07FD      		sbrc r16,7
 384 0108 1095      		com r17
 385 010a 2B85      		ldd r18,Y+11
 386 010c 3C85      		ldd r19,Y+12
 387 010e 4D85      		ldd r20,Y+13
 388 0110 5E85      		ldd r21,Y+14
 389 0112 6F85      		ldd r22,Y+15
 390 0114 7889      		ldd r23,Y+16
 391 0116 8989      		ldd r24,Y+17
 392 0118 9A89      		ldd r25,Y+18
 393 011a 0E94 0000 		call _nrk_time_to_ticks
 394 011e F801      		movw r30,r16
 395 0120 B5E0      		ldi r27,5
 396 0122 EE0F      	1:	lsl r30
 397 0124 FF1F      		rol r31
 398 0126 BA95      		dec r27
 399 0128 01F4      		brne 1b
 400 012a E00F      		add r30,r16
 401 012c F11F      		adc r31,r17
 402 012e E050      		subi r30,lo8(-(nrk_task_TCB))
 403 0130 F040      		sbci r31,hi8(-(nrk_task_TCB))
 404 0132 948F      		std Z+28,r25
 405 0134 838F      		std Z+27,r24
 407               	.LM21:
 408 0136 0881      		ld r16,Y
 409 0138 1127      		clr r17
 410 013a 07FD      		sbrc r16,7
 411 013c 1095      		com r17
 412 013e 2B8D      		ldd r18,Y+27
 413 0140 3C8D      		ldd r19,Y+28
 414 0142 4D8D      		ldd r20,Y+29
 415 0144 5E8D      		ldd r21,Y+30
 416 0146 6F8D      		ldd r22,Y+31
 417 0148 78A1      		ldd r23,Y+32
 418 014a 89A1      		ldd r24,Y+33
 419 014c 9AA1      		ldd r25,Y+34
 420 014e 0E94 0000 		call _nrk_time_to_ticks
 421 0152 F801      		movw r30,r16
 422 0154 A5E0      		ldi r26,5
 423 0156 EE0F      	1:	lsl r30
 424 0158 FF1F      		rol r31
 425 015a AA95      		dec r26
 426 015c 01F4      		brne 1b
 427 015e E00F      		add r30,r16
 428 0160 F11F      		adc r31,r17
 429 0162 E050      		subi r30,lo8(-(nrk_task_TCB))
 430 0164 F040      		sbci r31,hi8(-(nrk_task_TCB))
 431 0166 968B      		std Z+22,r25
 432 0168 858B      		std Z+21,r24
 434               	.LM22:
 435 016a 8881      		ld r24,Y
 436 016c 9927      		clr r25
 437 016e 87FD      		sbrc r24,7
 438 0170 9095      		com r25
 439 0172 FC01      		movw r30,r24
 440 0174 75E0      		ldi r23,5
 441 0176 EE0F      	1:	lsl r30
 442 0178 FF1F      		rol r31
 443 017a 7A95      		dec r23
 444 017c 01F4      		brne 1b
 445 017e E80F      		add r30,r24
 446 0180 F91F      		adc r31,r25
 447 0182 E050      		subi r30,lo8(-(nrk_task_TCB))
 448 0184 F040      		sbci r31,hi8(-(nrk_task_TCB))
 449 0186 8589      		ldd r24,Z+21
 450 0188 9689      		ldd r25,Z+22
 451 018a 238D      		ldd r18,Z+27
 452 018c 348D      		ldd r19,Z+28
 453 018e 820F      		add r24,r18
 454 0190 931F      		adc r25,r19
 455 0192 908F      		std Z+24,r25
 456 0194 878B      		std Z+23,r24
 458               	.LM23:
 459 0196 0881      		ld r16,Y
 460 0198 1127      		clr r17
 461 019a 07FD      		sbrc r16,7
 462 019c 1095      		com r17
 463 019e 2B89      		ldd r18,Y+19
 464 01a0 3C89      		ldd r19,Y+20
 465 01a2 4D89      		ldd r20,Y+21
 466 01a4 5E89      		ldd r21,Y+22
 467 01a6 6F89      		ldd r22,Y+23
 468 01a8 788D      		ldd r23,Y+24
 469 01aa 898D      		ldd r24,Y+25
 470 01ac 9A8D      		ldd r25,Y+26
 471 01ae 0E94 0000 		call _nrk_time_to_ticks
 472 01b2 F801      		movw r30,r16
 473 01b4 65E0      		ldi r22,5
 474 01b6 EE0F      	1:	lsl r30
 475 01b8 FF1F      		rol r31
 476 01ba 6A95      		dec r22
 477 01bc 01F4      		brne 1b
 478 01be E00F      		add r30,r16
 479 01c0 F11F      		adc r31,r17
 480 01c2 E050      		subi r30,lo8(-(nrk_task_TCB))
 481 01c4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 482 01c6 968F      		std Z+30,r25
 483 01c8 858F      		std Z+29,r24
 485               	.LM24:
 486 01ca 8881      		ld r24,Y
 487 01cc 9927      		clr r25
 488 01ce 87FD      		sbrc r24,7
 489 01d0 9095      		com r25
 490 01d2 FC01      		movw r30,r24
 491 01d4 55E0      		ldi r21,5
 492 01d6 EE0F      	1:	lsl r30
 493 01d8 FF1F      		rol r31
 494 01da 5A95      		dec r21
 495 01dc 01F4      		brne 1b
 496 01de E80F      		add r30,r24
 497 01e0 F91F      		adc r31,r25
 498 01e2 E050      		subi r30,lo8(-(nrk_task_TCB))
 499 01e4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 500 01e6 858D      		ldd r24,Z+29
 501 01e8 968D      		ldd r25,Z+30
 502 01ea 928F      		std Z+26,r25
 503 01ec 818F      		std Z+25,r24
 505               	.LM25:
 506 01ee 8881      		ld r24,Y
 507 01f0 9927      		clr r25
 508 01f2 87FD      		sbrc r24,7
 509 01f4 9095      		com r25
 510 01f6 FC01      		movw r30,r24
 511 01f8 45E0      		ldi r20,5
 512 01fa EE0F      	1:	lsl r30
 513 01fc FF1F      		rol r31
 514 01fe 4A95      		dec r20
 515 0200 01F4      		brne 1b
 516 0202 E80F      		add r30,r24
 517 0204 F91F      		adc r31,r25
 518 0206 E050      		subi r30,lo8(-(nrk_task_TCB))
 519 0208 F040      		sbci r31,hi8(-(nrk_task_TCB))
 520 020a 81E0      		ldi r24,lo8(1)
 521 020c 90E0      		ldi r25,hi8(1)
 522 020e 90A3      		std Z+32,r25
 523 0210 878F      		std Z+31,r24
 525               	.LM26:
 526 0212 8881      		ld r24,Y
 527 0214 9927      		clr r25
 528 0216 87FD      		sbrc r24,7
 529 0218 9095      		com r25
 530 021a FC01      		movw r30,r24
 531 021c 35E0      		ldi r19,5
 532 021e EE0F      	1:	lsl r30
 533 0220 FF1F      		rol r31
 534 0222 3A95      		dec r19
 535 0224 01F4      		brne 1b
 536 0226 E80F      		add r30,r24
 537 0228 F91F      		adc r31,r25
 538 022a E050      		subi r30,lo8(-(nrk_task_TCB))
 539 022c F040      		sbci r31,hi8(-(nrk_task_TCB))
 540 022e F382      		std Z+3,r15
 541 0230 E282      		std Z+2,r14
 543               	.LM27:
 544 0232 8881      		ld r24,Y
 545 0234 9927      		clr r25
 546 0236 87FD      		sbrc r24,7
 547 0238 9095      		com r25
 548 023a FC01      		movw r30,r24
 549 023c 25E0      		ldi r18,5
 550 023e EE0F      	1:	lsl r30
 551 0240 FF1F      		rol r31
 552 0242 2A95      		dec r18
 553 0244 01F4      		brne 1b
 554 0246 E80F      		add r30,r24
 555 0248 F91F      		adc r31,r25
 556 024a E050      		subi r30,lo8(-(nrk_task_TCB))
 557 024c F040      		sbci r31,hi8(-(nrk_task_TCB))
 558 024e 81E0      		ldi r24,lo8(1)
 559 0250 8487      		std Z+12,r24
 561               	.LM28:
 562 0252 81E0      		ldi r24,lo8(1)
 563 0254 90E0      		ldi r25,hi8(1)
 564               	/* epilogue: frame size=0 */
 565 0256 DF91      		pop r29
 566 0258 CF91      		pop r28
 567 025a 1F91      		pop r17
 568 025c 0F91      		pop r16
 569 025e FF90      		pop r15
 570 0260 EF90      		pop r14
 571 0262 0895      		ret
 572               	/* epilogue end (size=7) */
 573               	/* function nrk_TCB_init size 296 (283) */
 575               	.Lscope5:
 577               		.stabd	78,0,0
 579               	.global	nrk_start
 581               	nrk_start:
 582               		.stabd	46,0,0
 584               	.LM29:
 585               	.LFBB6:
 586               	/* prologue: frame size=0 */
 587 0264 8F92      		push r8
 588 0266 9F92      		push r9
 589 0268 AF92      		push r10
 590 026a BF92      		push r11
 591 026c CF92      		push r12
 592 026e DF92      		push r13
 593 0270 EF92      		push r14
 594 0272 FF92      		push r15
 595 0274 0F93      		push r16
 596 0276 1F93      		push r17
 597 0278 CF93      		push r28
 598 027a DF93      		push r29
 599               	/* prologue end (size=12) */
 600 027c 60E0      		ldi r22,lo8(nrk_task_TCB+8)
 601 027e A62E      		mov r10,r22
 602 0280 60E0      		ldi r22,hi8(nrk_task_TCB+8)
 603 0282 B62E      		mov r11,r22
 604 0284 CC24      		clr r12
 605 0286 DD24      		clr r13
 607               	.LM30:
 608 0288 4501      		movw r8,r10
 609               	.L21:
 611               	.LM31:
 612 028a EC2C      		mov r14,r12
 614               	.LM32:
 615 028c F501      		movw r30,r10
 616 028e F080      		ld r15,Z
 618               	.LM33:
 619 0290 FFEF      		ldi r31,lo8(-1)
 620 0292 FF16      		cp r15,r31
 621 0294 01F0      		breq .L22
 622 0296 E401      		movw r28,r8
 623 0298 00E0      		ldi r16,lo8(0)
 624 029a 10E0      		ldi r17,hi8(0)
 625               	.L24:
 627               	.LM34:
 628 029c E016      		cp r14,r16
 629 029e 01F0      		breq .L25
 630 02a0 8881      		ld r24,Y
 631 02a2 F816      		cp r15,r24
 632 02a4 01F4      		brne .L25
 634               	.LM35:
 635 02a6 6F2D      		mov r22,r15
 636 02a8 85E0      		ldi r24,lo8(5)
 637 02aa 0E94 0000 		call nrk_kernel_error_add
 638               	.L25:
 639 02ae 0F5F      		subi r16,lo8(-(1))
 640 02b0 1F4F      		sbci r17,hi8(-(1))
 641 02b2 A196      		adiw r28,33
 643               	.LM36:
 644 02b4 0430      		cpi r16,4
 645 02b6 1105      		cpc r17,__zero_reg__
 646 02b8 01F4      		brne .L24
 647               	.L22:
 648 02ba 0894      		sec
 649 02bc C11C      		adc r12,__zero_reg__
 650 02be D11C      		adc r13,__zero_reg__
 651 02c0 81E2      		ldi r24,lo8(33)
 652 02c2 90E0      		ldi r25,hi8(33)
 653 02c4 A80E      		add r10,r24
 654 02c6 B91E      		adc r11,r25
 656               	.LM37:
 657 02c8 94E0      		ldi r25,lo8(4)
 658 02ca C916      		cp r12,r25
 659 02cc D104      		cpc r13,__zero_reg__
 660 02ce 01F4      		brne .L21
 662               	.LM38:
 663 02d0 0E94 0000 		call nrk_get_high_ready_task_ID
 665               	.LM39:
 666 02d4 282F      		mov r18,r24
 667 02d6 3327      		clr r19
 668 02d8 27FD      		sbrc r18,7
 669 02da 3095      		com r19
 670 02dc F901      		movw r30,r18
 671 02de 55E0      		ldi r21,5
 672 02e0 EE0F      	1:	lsl r30
 673 02e2 FF1F      		rol r31
 674 02e4 5A95      		dec r21
 675 02e6 01F4      		brne 1b
 676 02e8 E20F      		add r30,r18
 677 02ea F31F      		adc r31,r19
 678 02ec E050      		subi r30,lo8(-(nrk_task_TCB))
 679 02ee F040      		sbci r31,hi8(-(nrk_task_TCB))
 680 02f0 3285      		ldd r19,Z+10
 681 02f2 3093 0000 		sts nrk_high_ready_prio,r19
 683               	.LM40:
 684 02f6 21E2      		ldi r18,lo8(33)
 685 02f8 8202      		muls r24,r18
 686 02fa C001      		movw r24,r0
 687 02fc 1124      		clr r1
 688 02fe 8050      		subi r24,lo8(-(nrk_task_TCB))
 689 0300 9040      		sbci r25,hi8(-(nrk_task_TCB))
 690 0302 9093 0000 		sts (nrk_cur_task_TCB)+1,r25
 691 0306 8093 0000 		sts nrk_cur_task_TCB,r24
 692 030a 9093 0000 		sts (nrk_high_ready_TCB)+1,r25
 693 030e 8093 0000 		sts nrk_high_ready_TCB,r24
 695               	.LM41:
 696 0312 3093 0000 		sts nrk_cur_task_prio,r19
 698               	.LM42:
 699 0316 0E94 0000 		call nrk_target_start
 701               	.LM43:
 702 031a 0E94 0000 		call nrk_stack_pointer_init
 704               	.LM44:
 705 031e 0E94 0000 		call nrk_start_high_ready_task
 706               	.L29:
 707 0322 00C0      		rjmp .L29
 708               	/* epilogue: frame size=0 */
 709               	/* epilogue: noreturn */
 710               	/* epilogue end (size=0) */
 711               	/* function nrk_start size 96 (84) */
 717               	.Lscope6:
 719               		.stabd	78,0,0
 721               	.global	nrk_init
 723               	nrk_init:
 724               		.stabd	46,0,0
 726               	.LM45:
 727               	.LFBB7:
 728               	/* prologue: frame size=35 */
 729 0324 0F93      		push r16
 730 0326 1F93      		push r17
 731 0328 CF93      		push r28
 732 032a DF93      		push r29
 733 032c CDB7      		in r28,__SP_L__
 734 032e DEB7      		in r29,__SP_H__
 735 0330 A397      		sbiw r28,35
 736 0332 0FB6      		in __tmp_reg__,__SREG__
 737 0334 F894      		cli
 738 0336 DEBF      		out __SP_H__,r29
 739 0338 0FBE      		out __SREG__,__tmp_reg__
 740 033a CDBF      		out __SP_L__,r28
 741               	/* prologue end (size=12) */
 743               	.LM46:
 744 033c 0E94 0000 		call nrk_signal_create
 745 0340 8093 0000 		sts nrk_wakeup_signal,r24
 747               	.LM47:
 748 0344 8F3F      		cpi r24,lo8(-1)
 749 0346 01F4      		brne .L35
 751               	.LM48:
 752 0348 60E0      		ldi r22,lo8(0)
 753 034a 8EE0      		ldi r24,lo8(14)
 754 034c 0E94 0000 		call nrk_kernel_error_add
 755               	.L35:
 757               	.LM49:
 758 0350 0E94 0000 		call _nrk_startup_ok
 759 0354 8823      		tst r24
 760 0356 01F4      		brne .L37
 761 0358 60E0      		ldi r22,lo8(0)
 762 035a 86E0      		ldi r24,lo8(6)
 763 035c 0E94 0000 		call nrk_kernel_error_add
 764               	.L37:
 766               	.LM50:
 767 0360 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 769               	.LM51:
 770 0364 1092 0000 		sts (nrk_cur_task_TCB)+1,__zero_reg__
 771 0368 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 773               	.LM52:
 774 036c 1092 0000 		sts (nrk_high_ready_TCB)+1,__zero_reg__
 775 0370 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 777               	.LM53:
 778 0374 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 780               	.LM54:
 781 0378 0E94 0000 		call _nrk_reserve_init
 783               	.LM55:
 784 037c 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 786               	.LM56:
 787 0380 8FEF      		ldi r24,lo8(-1)
 788 0382 8093 0000 		sts nrk_sem_list,r24
 790               	.LM57:
 791 0386 8093 0000 		sts nrk_sem_list+2,r24
 793               	.LM58:
 794 038a 8093 0000 		sts nrk_sem_list+1,r24
 796               	.LM59:
 797 038e 8093 0000 		sts nrk_sem_list+3,r24
 799               	.LM60:
 800 0392 8093 0000 		sts nrk_sem_list+5,r24
 802               	.LM61:
 803 0396 8093 0000 		sts nrk_sem_list+4,r24
 804 039a E0E0      		ldi r30,lo8(nrk_task_TCB)
 805 039c F0E0      		ldi r31,hi8(nrk_task_TCB)
 806               	.L39:
 808               	.LM62:
 809 039e 83E6      		ldi r24,lo8(99)
 810 03a0 8287      		std Z+10,r24
 812               	.LM63:
 813 03a2 8FEF      		ldi r24,lo8(-1)
 814 03a4 8087      		std Z+8,r24
 815 03a6 B196      		adiw r30,33
 817               	.LM64:
 818 03a8 20E0      		ldi r18,hi8(nrk_task_TCB+132)
 819 03aa E030      		cpi r30,lo8(nrk_task_TCB+132)
 820 03ac F207      		cpc r31,r18
 821 03ae 01F4      		brne .L39
 822 03b0 E0E0      		ldi r30,lo8(_nrk_readyQ)
 823 03b2 F0E0      		ldi r31,hi8(_nrk_readyQ)
 824               	.L41:
 826               	.LM65:
 827 03b4 CF01      		movw r24,r30
 828 03b6 0596      		adiw r24,5
 829 03b8 9483      		std Z+4,r25
 830 03ba 8383      		std Z+3,r24
 832               	.LM66:
 833 03bc F783      		std Z+7,r31
 834 03be E683      		std Z+6,r30
 835 03c0 FC01      		movw r30,r24
 837               	.LM67:
 838 03c2 20E0      		ldi r18,hi8(_nrk_readyQ+20)
 839 03c4 8030      		cpi r24,lo8(_nrk_readyQ+20)
 840 03c6 9207      		cpc r25,r18
 841 03c8 01F4      		brne .L41
 843               	.LM68:
 844 03ca 1092 0000 		sts (_nrk_readyQ+1)+1,__zero_reg__
 845 03ce 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 847               	.LM69:
 848 03d2 1092 0000 		sts (_nrk_readyQ+23)+1,__zero_reg__
 849 03d6 1092 0000 		sts _nrk_readyQ+23,__zero_reg__
 851               	.LM70:
 852 03da 1092 0000 		sts (_head_node)+1,__zero_reg__
 853 03de 1092 0000 		sts _head_node,__zero_reg__
 855               	.LM71:
 856 03e2 4497      		sbiw r24,20
 857 03e4 9093 0000 		sts (_free_node)+1,r25
 858 03e8 8093 0000 		sts _free_node,r24
 860               	.LM72:
 861 03ec 60E0      		ldi r22,lo8(pm(nrk_idle_task))
 862 03ee 70E0      		ldi r23,hi8(pm(nrk_idle_task))
 863 03f0 8E01      		movw r16,r28
 864 03f2 0F5F      		subi r16,lo8(-(1))
 865 03f4 1F4F      		sbci r17,hi8(-(1))
 866 03f6 C801      		movw r24,r16
 867 03f8 0E94 0000 		call nrk_task_set_entry_function
 869               	.LM73:
 870 03fc 40E8      		ldi r20,lo8(128)
 871 03fe 50E0      		ldi r21,hi8(128)
 872 0400 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 873 0402 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 874 0404 C801      		movw r24,r16
 875 0406 0E94 0000 		call nrk_task_set_stk
 877               	.LM74:
 878 040a 85E5      		ldi r24,lo8(85)
 879 040c 8093 0000 		sts nrk_idle_task_stk,r24
 881               	.LM75:
 882 0410 1986      		std Y+9,__zero_reg__
 884               	.LM76:
 885 0412 1C8E      		std Y+28,__zero_reg__
 886 0414 1D8E      		std Y+29,__zero_reg__
 887 0416 1E8E      		std Y+30,__zero_reg__
 888 0418 1F8E      		std Y+31,__zero_reg__
 890               	.LM77:
 891 041a 18A2      		std Y+32,__zero_reg__
 892 041c 19A2      		std Y+33,__zero_reg__
 893 041e 1AA2      		std Y+34,__zero_reg__
 894 0420 1BA2      		std Y+35,__zero_reg__
 896               	.LM78:
 897 0422 91E0      		ldi r25,lo8(1)
 898 0424 9887      		std Y+8,r25
 900               	.LM79:
 901 0426 82E0      		ldi r24,lo8(2)
 902 0428 8A87      		std Y+10,r24
 904               	.LM80:
 905 042a 9B87      		std Y+11,r25
 907               	.LM81:
 908 042c C801      		movw r24,r16
 909 042e 0E94 0000 		call nrk_activate_task
 910               	/* epilogue: frame size=35 */
 911 0432 A396      		adiw r28,35
 912 0434 0FB6      		in __tmp_reg__,__SREG__
 913 0436 F894      		cli
 914 0438 DEBF      		out __SP_H__,r29
 915 043a 0FBE      		out __SREG__,__tmp_reg__
 916 043c CDBF      		out __SP_L__,r28
 917 043e DF91      		pop r29
 918 0440 CF91      		pop r28
 919 0442 1F91      		pop r17
 920 0444 0F91      		pop r16
 921 0446 0895      		ret
 922               	/* epilogue end (size=11) */
 923               	/* function nrk_init size 146 (123) */
 928               	.Lscope7:
 930               		.stabd	78,0,0
 932               	.global	nrk_halt
 934               	nrk_halt:
 935               		.stabd	46,0,0
 937               	.LM82:
 938               	.LFBB8:
 939               	/* prologue: frame size=0 */
 940               	/* prologue end (size=0) */
 941               	.LBB4:
 942               	.LBB5:
 944               	.LM83:
 945               	/* #APP */
 946 0448 F894      		cli
 947               		
 948               	/* #NOAPP */
 949               	.L49:
 950 044a 00C0      		rjmp .L49
 951               	.LBE5:
 952               	.LBE4:
 953               	/* epilogue: frame size=0 */
 954               	/* epilogue: noreturn */
 955               	/* epilogue end (size=0) */
 956               	/* function nrk_halt size 5 (5) */
 958               	.Lscope8:
 960               		.stabd	78,0,0
 961               		.comm _nrk_signal_list,4,1
 962               		.comm nrk_idle_task_stk,128,1
 963               		.comm nrk_kernel_stk_ptr,2,1
 964               		.comm nrk_task_TCB,132,1
 965               		.comm nrk_wakeup_signal,1,1
 966               		.comm _nrk_readyQ,25,1
 967               		.comm _free_node,2,1
 968               		.comm _head_node,2,1
 969               		.comm nrk_cur_task_prio,1,1
 970               		.comm nrk_cur_task_TCB,2,1
 971               		.comm nrk_high_ready_prio,1,1
 972               		.comm nrk_high_ready_TCB,2,1
 973               		.comm _nrk_resource_cnt,1,1
 974               		.comm nrk_system_time,8,1
 975               		.comm nrk_sem_list,6,1
 976               		.comm _nrk_cpu_state,1,1
 977               		.comm next_next_wakeup,2,1
 978               		.comm error_task,1,1
 979               		.comm error_num,1,1
 980               		.comm nrk_task_init_cnt,1,1
 1002               	.Letext0:
 1003               	/* File "../../src/kernel/source/nrk.c": code  559 = 0x022f ( 507), prologues  30, epilogues  22 */
DEFINED SYMBOLS
                            *ABS*:00000000 nrk.c
     /tmp/ccfmMld3.s:2      *ABS*:0000003f __SREG__
     /tmp/ccfmMld3.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccfmMld3.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccfmMld3.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccfmMld3.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccfmMld3.s:136    .text:00000000 nrk_int_disable
     /tmp/ccfmMld3.s:160    .text:00000004 nrk_int_enable
     /tmp/ccfmMld3.s:184    .text:00000008 nrk_version
     /tmp/ccfmMld3.s:206    .text:0000000e _nrk_timer_tick
     /tmp/ccfmMld3.s:233    .text:00000014 nrk_TCB_init
                            *COM*:00000001 nrk_task_init_cnt
                            *COM*:00000084 nrk_task_TCB
     /tmp/ccfmMld3.s:581    .text:00000264 nrk_start
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
     /tmp/ccfmMld3.s:723    .text:00000324 nrk_init
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000006 nrk_sem_list
                            *COM*:00000019 _nrk_readyQ
                            *COM*:00000002 _head_node
                            *COM*:00000002 _free_node
                            *COM*:00000080 nrk_idle_task_stk
     /tmp/ccfmMld3.s:934    .text:00000448 nrk_halt
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_scheduler
nrk_kernel_error_add
_nrk_time_to_ticks
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
nrk_signal_create
_nrk_startup_ok
_nrk_reserve_init
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
