   1               		.file	"nrk_reserve.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 127               	.global	_nrk_reserve_init
 129               	_nrk_reserve_init:
 130               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_reserve.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_reserve.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_reserve.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_reserve.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_reserve.c **** *
   6:../../src/kernel/source/nrk_reserve.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_reserve.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_reserve.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_reserve.c **** *
  10:../../src/kernel/source/nrk_reserve.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_reserve.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_reserve.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_reserve.c **** *
  14:../../src/kernel/source/nrk_reserve.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_reserve.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_reserve.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_reserve.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_reserve.c **** *
  19:../../src/kernel/source/nrk_reserve.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_reserve.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_reserve.c **** *
  22:../../src/kernel/source/nrk_reserve.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_reserve.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_reserve.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_reserve.c **** *******************************************************************************/
  26:../../src/kernel/source/nrk_reserve.c **** 
  27:../../src/kernel/source/nrk_reserve.c **** #include <nrk_cfg.h>
  28:../../src/kernel/source/nrk_reserve.c **** 
  29:../../src/kernel/source/nrk_reserve.c **** #ifdef NRK_MAX_RESERVES
  30:../../src/kernel/source/nrk_reserve.c **** 
  31:../../src/kernel/source/nrk_reserve.c **** #include <nrk_time.h>
  32:../../src/kernel/source/nrk_reserve.c **** #include <nrk.h>
  33:../../src/kernel/source/nrk_reserve.c **** #include <nrk_error.h>
  34:../../src/kernel/source/nrk_reserve.c **** #include <nrk_reserve.h>
  35:../../src/kernel/source/nrk_reserve.c **** 
  36:../../src/kernel/source/nrk_reserve.c **** nrk_reserve _nrk_reserve[NRK_MAX_RESERVES];
  37:../../src/kernel/source/nrk_reserve.c **** //experimental
  38:../../src/kernel/source/nrk_reserve.c **** 
  39:../../src/kernel/source/nrk_reserve.c **** 
  40:../../src/kernel/source/nrk_reserve.c **** // This function is called by the kernel at startup
  41:../../src/kernel/source/nrk_reserve.c **** // to clear the list of reserves
  42:../../src/kernel/source/nrk_reserve.c **** void _nrk_reserve_init ()
  43:../../src/kernel/source/nrk_reserve.c **** {
 132               	.LM0:
 133               	.LFBB1:
 134               	/* prologue: frame size=0 */
 135               	/* prologue end (size=0) */
  44:../../src/kernel/source/nrk_reserve.c ****   uint8_t i;
  45:../../src/kernel/source/nrk_reserve.c **** 
  46:../../src/kernel/source/nrk_reserve.c ****   for (i = 0; i < NRK_MAX_RESERVES; i++)
  47:../../src/kernel/source/nrk_reserve.c ****     _nrk_reserve[i].active = -1;
 137               	.LM1:
 138 0000 8FEF      		ldi r24,lo8(-1)
 139 0002 8093 0000 		sts _nrk_reserve+16,r24
 140 0006 8093 0000 		sts _nrk_reserve+35,r24
 141 000a 8093 0000 		sts _nrk_reserve+54,r24
 142 000e 8093 0000 		sts _nrk_reserve+73,r24
 143 0012 8093 0000 		sts _nrk_reserve+92,r24
 144               	/* epilogue: frame size=0 */
 145 0016 0895      		ret
 146               	/* epilogue end (size=1) */
 147               	/* function _nrk_reserve_init size 12 (11) */
 149               	.Lscope1:
 151               		.stabd	78,0,0
 153               	.global	nrk_reserve_create
 155               	nrk_reserve_create:
 156               		.stabd	46,0,0
  48:../../src/kernel/source/nrk_reserve.c **** }
  49:../../src/kernel/source/nrk_reserve.c **** 
  50:../../src/kernel/source/nrk_reserve.c **** // This function returns the id of a free reserve
  51:../../src/kernel/source/nrk_reserve.c **** // This returns NRK_ERROR if there are no free reserves
  52:../../src/kernel/source/nrk_reserve.c **** int8_t nrk_reserve_create ()
  53:../../src/kernel/source/nrk_reserve.c **** {
 158               	.LM2:
 159               	.LFBB2:
 160               	/* prologue: frame size=0 */
 161               	/* prologue end (size=0) */
 162 0018 E0E0      		ldi r30,lo8(_nrk_reserve+16)
 163 001a F0E0      		ldi r31,hi8(_nrk_reserve+16)
 164 001c 80E0      		ldi r24,lo8(0)
 165 001e 90E0      		ldi r25,hi8(0)
 166               	.L4:
 168               	.LM3:
 169 0020 9C01      		movw r18,r24
  54:../../src/kernel/source/nrk_reserve.c ****   int8_t i;
  55:../../src/kernel/source/nrk_reserve.c ****   for (i = 0; i < NRK_MAX_RESERVES; i++) {
  56:../../src/kernel/source/nrk_reserve.c ****     if (_nrk_reserve[i].active == -1) {
 171               	.LM4:
 172 0022 8081      		ld r24,Z
 173 0024 8F3F      		cpi r24,lo8(-1)
 174 0026 01F4      		brne .L5
  57:../../src/kernel/source/nrk_reserve.c ****       // Check and Accept
  58:../../src/kernel/source/nrk_reserve.c ****       _nrk_reserve[i].active = 1;
 176               	.LM5:
 177 0028 83E1      		ldi r24,lo8(19)
 178 002a 90E0      		ldi r25,hi8(19)
 179 002c 289F      		mul r18,r24
 180 002e F001      		movw r30,r0
 181 0030 299F      		mul r18,r25
 182 0032 F00D      		add r31,r0
 183 0034 389F      		mul r19,r24
 184 0036 F00D      		add r31,r0
 185 0038 1124      		clr r1
 186 003a E050      		subi r30,lo8(-(_nrk_reserve))
 187 003c F040      		sbci r31,hi8(-(_nrk_reserve))
 188 003e 81E0      		ldi r24,lo8(1)
 189 0040 808B      		std Z+16,r24
 190 0042 00C0      		rjmp .L7
 191               	.L5:
  59:../../src/kernel/source/nrk_reserve.c ****       return i;
 193               	.LM6:
 194 0044 C901      		movw r24,r18
 195 0046 0196      		adiw r24,1
 196 0048 7396      		adiw r30,19
 198               	.LM7:
 199 004a 8530      		cpi r24,5
 200 004c 9105      		cpc r25,__zero_reg__
 201 004e 01F4      		brne .L4
 202 0050 2FEF      		ldi r18,lo8(-1)
 203 0052 3FEF      		ldi r19,hi8(-1)
 204               	.L7:
  60:../../src/kernel/source/nrk_reserve.c ****     }
  61:../../src/kernel/source/nrk_reserve.c ****   }
  62:../../src/kernel/source/nrk_reserve.c **** 
  63:../../src/kernel/source/nrk_reserve.c ****   return NRK_ERROR;
  64:../../src/kernel/source/nrk_reserve.c **** }
 206               	.LM8:
 207 0054 C901      		movw r24,r18
 208               	/* epilogue: frame size=0 */
 209 0056 0895      		ret
 210               	/* epilogue end (size=1) */
 211               	/* function nrk_reserve_create size 32 (31) */
 213               	.Lscope2:
 215               		.stabd	78,0,0
 218               	.global	nrk_reserve_delete
 220               	nrk_reserve_delete:
 221               		.stabd	46,0,0
  65:../../src/kernel/source/nrk_reserve.c **** 
  66:../../src/kernel/source/nrk_reserve.c **** // This function frees a current reserve
  67:../../src/kernel/source/nrk_reserve.c **** // This returns NRK_ERROR if the reserve does not exist
  68:../../src/kernel/source/nrk_reserve.c **** int8_t nrk_reserve_delete (uint8_t reserve_id)
  69:../../src/kernel/source/nrk_reserve.c **** {
 223               	.LM9:
 224               	.LFBB3:
 225               	/* prologue: frame size=0 */
 226               	/* prologue end (size=0) */
  70:../../src/kernel/source/nrk_reserve.c ****   int8_t i;
  71:../../src/kernel/source/nrk_reserve.c ****   if (reserve_id >= 0 && reserve_id < NRK_MAX_RESERVES) {
 228               	.LM10:
 229 0058 8530      		cpi r24,lo8(5)
 230 005a 00F4      		brsh .L13
  72:../../src/kernel/source/nrk_reserve.c ****     if (_nrk_reserve[i].active == 1) {
 232               	.LM11:
 233 005c 9927      		clr r25
 234 005e 87FD      		sbrc r24,7
 235 0060 9095      		com r25
 236 0062 23E1      		ldi r18,lo8(19)
 237 0064 30E0      		ldi r19,hi8(19)
 238 0066 829F      		mul r24,r18
 239 0068 F001      		movw r30,r0
 240 006a 839F      		mul r24,r19
 241 006c F00D      		add r31,r0
 242 006e 929F      		mul r25,r18
 243 0070 F00D      		add r31,r0
 244 0072 1124      		clr r1
 245 0074 E050      		subi r30,lo8(-(_nrk_reserve))
 246 0076 F040      		sbci r31,hi8(-(_nrk_reserve))
 247 0078 8089      		ldd r24,Z+16
 248 007a 8130      		cpi r24,lo8(1)
 249 007c 01F4      		brne .L13
  73:../../src/kernel/source/nrk_reserve.c ****       _nrk_reserve[i].active = 0;
 251               	.LM12:
 252 007e 108A      		std Z+16,__zero_reg__
 253 0080 81E0      		ldi r24,lo8(1)
 254 0082 90E0      		ldi r25,hi8(1)
 255 0084 0895      		ret
 256               	.L13:
  74:../../src/kernel/source/nrk_reserve.c ****       return NRK_OK;
 258               	.LM13:
 259 0086 8FEF      		ldi r24,lo8(-1)
 260 0088 9FEF      		ldi r25,hi8(-1)
  75:../../src/kernel/source/nrk_reserve.c ****     }
  76:../../src/kernel/source/nrk_reserve.c ****   }
  77:../../src/kernel/source/nrk_reserve.c ****   return NRK_ERROR;
  78:../../src/kernel/source/nrk_reserve.c **** }
 262               	.LM14:
 263 008a 0895      		ret
 264               	/* epilogue: frame size=0 */
 265               	/* epilogue: noreturn */
 266               	/* epilogue end (size=0) */
 267               	/* function nrk_reserve_delete size 26 (26) */
 272               	.Lscope3:
 274               		.stabd	78,0,0
 280               	.global	nrk_reserve_set
 282               	nrk_reserve_set:
 283               		.stabd	46,0,0
  79:../../src/kernel/source/nrk_reserve.c **** 
  80:../../src/kernel/source/nrk_reserve.c **** 
  81:../../src/kernel/source/nrk_reserve.c **** 
  82:../../src/kernel/source/nrk_reserve.c **** 
  83:../../src/kernel/source/nrk_reserve.c **** uint8_t nrk_reserve_get (uint8_t reserve_id)
  84:../../src/kernel/source/nrk_reserve.c **** {
  85:../../src/kernel/source/nrk_reserve.c **** 
  86:../../src/kernel/source/nrk_reserve.c ****   if (reserve_id >= NRK_MAX_RESERVES) {
  87:../../src/kernel/source/nrk_reserve.c ****     _nrk_errno_set (1);
  88:../../src/kernel/source/nrk_reserve.c ****     return 0;
  89:../../src/kernel/source/nrk_reserve.c ****   }
  90:../../src/kernel/source/nrk_reserve.c ****   if (_nrk_reserve[reserve_id].active == -1) {
  91:../../src/kernel/source/nrk_reserve.c ****     // Reserve isn't active 
  92:../../src/kernel/source/nrk_reserve.c ****     _nrk_errno_set (2);
  93:../../src/kernel/source/nrk_reserve.c ****     return 0;
  94:../../src/kernel/source/nrk_reserve.c ****   }
  95:../../src/kernel/source/nrk_reserve.c **** 
  96:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve_update (reserve_id);
  97:../../src/kernel/source/nrk_reserve.c **** 
  98:../../src/kernel/source/nrk_reserve.c ****   if (_nrk_reserve[reserve_id].cur_access >
  99:../../src/kernel/source/nrk_reserve.c ****       _nrk_reserve[reserve_id].set_access)
 100:../../src/kernel/source/nrk_reserve.c ****     return 0;
 101:../../src/kernel/source/nrk_reserve.c ****   return (_nrk_reserve[reserve_id].set_access -
 102:../../src/kernel/source/nrk_reserve.c ****           _nrk_reserve[reserve_id].cur_access);
 103:../../src/kernel/source/nrk_reserve.c **** }
 104:../../src/kernel/source/nrk_reserve.c **** 
 105:../../src/kernel/source/nrk_reserve.c **** void _nrk_reserve_update (uint8_t reserve_id)
 106:../../src/kernel/source/nrk_reserve.c **** {
 107:../../src/kernel/source/nrk_reserve.c ****   nrk_time_t t;
 108:../../src/kernel/source/nrk_reserve.c **** 
 109:../../src/kernel/source/nrk_reserve.c ****   nrk_int_disable ();
 110:../../src/kernel/source/nrk_reserve.c ****   nrk_time_get (&t);
 111:../../src/kernel/source/nrk_reserve.c **** 
 112:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (t);
 113:../../src/kernel/source/nrk_reserve.c ****   if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
 114:../../src/kernel/source/nrk_reserve.c ****     // If the reserve is passed its period then replenish it
 115:../../src/kernel/source/nrk_reserve.c ****     _nrk_reserve[reserve_id].set_time =
 116:../../src/kernel/source/nrk_reserve.c ****       _nrk_reserve[reserve_id].cur_time +
 117:../../src/kernel/source/nrk_reserve.c ****       _nrk_reserve[reserve_id].period_ticks;
 118:../../src/kernel/source/nrk_reserve.c ****     _nrk_reserve[reserve_id].cur_access = 0;
 119:../../src/kernel/source/nrk_reserve.c ****   }
 120:../../src/kernel/source/nrk_reserve.c ****   nrk_int_enable ();
 121:../../src/kernel/source/nrk_reserve.c **** 
 122:../../src/kernel/source/nrk_reserve.c **** }
 123:../../src/kernel/source/nrk_reserve.c **** 
 124:../../src/kernel/source/nrk_reserve.c **** int8_t nrk_reserve_consume (uint8_t reserve_id)
 125:../../src/kernel/source/nrk_reserve.c **** {
 126:../../src/kernel/source/nrk_reserve.c **** 
 127:../../src/kernel/source/nrk_reserve.c ****   if (reserve_id >= NRK_MAX_RESERVES) {
 128:../../src/kernel/source/nrk_reserve.c ****     _nrk_errno_set (1);
 129:../../src/kernel/source/nrk_reserve.c ****     return NRK_ERROR;
 130:../../src/kernel/source/nrk_reserve.c ****   }
 131:../../src/kernel/source/nrk_reserve.c ****   if (_nrk_reserve[reserve_id].active == -1) {
 132:../../src/kernel/source/nrk_reserve.c ****     _nrk_errno_set (2);
 133:../../src/kernel/source/nrk_reserve.c ****     return NRK_ERROR;
 134:../../src/kernel/source/nrk_reserve.c ****   }
 135:../../src/kernel/source/nrk_reserve.c **** 
 136:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve_update (reserve_id);
 137:../../src/kernel/source/nrk_reserve.c **** 
 138:../../src/kernel/source/nrk_reserve.c ****   if ((_nrk_reserve[reserve_id].set_access <=
 139:../../src/kernel/source/nrk_reserve.c ****        _nrk_reserve[reserve_id].cur_access)) {
 140:../../src/kernel/source/nrk_reserve.c ****     // You violated your resource (like MJ after a little boy)
 141:../../src/kernel/source/nrk_reserve.c ****     nrk_int_enable ();
 142:../../src/kernel/source/nrk_reserve.c ****     if (_nrk_reserve[reserve_id].error != NULL)
 143:../../src/kernel/source/nrk_reserve.c ****       _nrk_reserve[reserve_id].error ();
 144:../../src/kernel/source/nrk_reserve.c ****     return NRK_ERROR;
 145:../../src/kernel/source/nrk_reserve.c ****   }
 146:../../src/kernel/source/nrk_reserve.c ****   else {
 147:../../src/kernel/source/nrk_reserve.c ****     // Reserve is fine. Take some of it.
 148:../../src/kernel/source/nrk_reserve.c ****     _nrk_reserve[reserve_id].cur_access++;
 149:../../src/kernel/source/nrk_reserve.c ****   }
 150:../../src/kernel/source/nrk_reserve.c **** 
 151:../../src/kernel/source/nrk_reserve.c **** 
 152:../../src/kernel/source/nrk_reserve.c ****   return NRK_OK;
 153:../../src/kernel/source/nrk_reserve.c **** }
 154:../../src/kernel/source/nrk_reserve.c **** 
 155:../../src/kernel/source/nrk_reserve.c **** int8_t nrk_reserve_set (uint8_t id, nrk_time_t * period, int16_t access_count,
 156:../../src/kernel/source/nrk_reserve.c ****                         void *errhandler)
 157:../../src/kernel/source/nrk_reserve.c **** {
 285               	.LM15:
 286               	.LFBB4:
 287               	/* prologue: frame size=8 */
 288 008c CF92      		push r12
 289 008e DF92      		push r13
 290 0090 EF92      		push r14
 291 0092 FF92      		push r15
 292 0094 0F93      		push r16
 293 0096 1F93      		push r17
 294 0098 CF93      		push r28
 295 009a DF93      		push r29
 296 009c CDB7      		in r28,__SP_L__
 297 009e DEB7      		in r29,__SP_H__
 298 00a0 2897      		sbiw r28,8
 299 00a2 0FB6      		in __tmp_reg__,__SREG__
 300 00a4 F894      		cli
 301 00a6 DEBF      		out __SP_H__,r29
 302 00a8 0FBE      		out __SREG__,__tmp_reg__
 303 00aa CDBF      		out __SP_L__,r28
 304               	/* prologue end (size=16) */
 305 00ac 7A01      		movw r14,r20
 306 00ae 6901      		movw r12,r18
 158:../../src/kernel/source/nrk_reserve.c ****   nrk_time_t tmp_time;
 159:../../src/kernel/source/nrk_reserve.c **** 
 160:../../src/kernel/source/nrk_reserve.c ****   if (id >= NRK_MAX_RESERVES)
 308               	.LM16:
 309 00b0 8530      		cpi r24,lo8(5)
 310 00b2 00F0      		brlo .+2
 311 00b4 00C0      		rjmp .L19
 161:../../src/kernel/source/nrk_reserve.c ****     return NRK_ERROR;
 162:../../src/kernel/source/nrk_reserve.c ****   if (_nrk_reserve[id].active == -1)
 313               	.LM17:
 314 00b6 9927      		clr r25
 315 00b8 23E1      		ldi r18,lo8(19)
 316 00ba 30E0      		ldi r19,hi8(19)
 317 00bc 829F      		mul r24,r18
 318 00be 8001      		movw r16,r0
 319 00c0 839F      		mul r24,r19
 320 00c2 100D      		add r17,r0
 321 00c4 929F      		mul r25,r18
 322 00c6 100D      		add r17,r0
 323 00c8 1124      		clr r1
 324 00ca 0050      		subi r16,lo8(-(_nrk_reserve))
 325 00cc 1040      		sbci r17,hi8(-(_nrk_reserve))
 326 00ce F801      		movw r30,r16
 327 00d0 8089      		ldd r24,Z+16
 328 00d2 8F3F      		cpi r24,lo8(-1)
 329 00d4 01F4      		brne .+2
 330 00d6 00C0      		rjmp .L19
 163:../../src/kernel/source/nrk_reserve.c ****     return NRK_ERROR;
 164:../../src/kernel/source/nrk_reserve.c **** 
 165:../../src/kernel/source/nrk_reserve.c ****   tmp_time.secs = period->secs;
 332               	.LM18:
 333 00d8 FB01      		movw r30,r22
 334 00da 8081      		ld r24,Z
 335 00dc 9181      		ldd r25,Z+1
 336 00de A281      		ldd r26,Z+2
 337 00e0 B381      		ldd r27,Z+3
 338 00e2 8983      		std Y+1,r24
 339 00e4 9A83      		std Y+2,r25
 340 00e6 AB83      		std Y+3,r26
 341 00e8 BC83      		std Y+4,r27
 166:../../src/kernel/source/nrk_reserve.c ****   tmp_time.nano_secs = period->nano_secs;
 343               	.LM19:
 344 00ea 8481      		ldd r24,Z+4
 345 00ec 9581      		ldd r25,Z+5
 346 00ee A681      		ldd r26,Z+6
 347 00f0 B781      		ldd r27,Z+7
 348 00f2 8D83      		std Y+5,r24
 349 00f4 9E83      		std Y+6,r25
 350 00f6 AF83      		std Y+7,r26
 351 00f8 B887      		std Y+8,r27
 167:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[id].period_ticks = _nrk_time_to_ticks_long (tmp_time);
 353               	.LM20:
 354 00fa 2981      		ldd r18,Y+1
 355 00fc 3A81      		ldd r19,Y+2
 356 00fe 4B81      		ldd r20,Y+3
 357 0100 5C81      		ldd r21,Y+4
 358 0102 6D81      		ldd r22,Y+5
 359 0104 7E81      		ldd r23,Y+6
 360 0106 8F81      		ldd r24,Y+7
 361 0108 9885      		ldd r25,Y+8
 362 010a 0E94 0000 		call _nrk_time_to_ticks_long
 363 010e F801      		movw r30,r16
 364 0110 6083      		st Z,r22
 365 0112 7183      		std Z+1,r23
 366 0114 8283      		std Z+2,r24
 367 0116 9383      		std Z+3,r25
 168:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[id].set_access = access_count;
 369               	.LM21:
 370 0118 F586      		std Z+13,r15
 371 011a E486      		std Z+12,r14
 169:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[id].cur_access = 0;
 373               	.LM22:
 374 011c 1786      		std Z+15,__zero_reg__
 375 011e 1686      		std Z+14,__zero_reg__
 170:../../src/kernel/source/nrk_reserve.c **** 
 171:../../src/kernel/source/nrk_reserve.c ****   nrk_time_get (&tmp_time);
 377               	.LM23:
 378 0120 CE01      		movw r24,r28
 379 0122 0196      		adiw r24,1
 380 0124 0E94 0000 		call nrk_time_get
 172:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (tmp_time);
 382               	.LM24:
 383 0128 2981      		ldd r18,Y+1
 384 012a 3A81      		ldd r19,Y+2
 385 012c 4B81      		ldd r20,Y+3
 386 012e 5C81      		ldd r21,Y+4
 387 0130 6D81      		ldd r22,Y+5
 388 0132 7E81      		ldd r23,Y+6
 389 0134 8F81      		ldd r24,Y+7
 390 0136 9885      		ldd r25,Y+8
 391 0138 0E94 0000 		call _nrk_time_to_ticks_long
 392 013c F801      		movw r30,r16
 393 013e 6087      		std Z+8,r22
 394 0140 7187      		std Z+9,r23
 395 0142 8287      		std Z+10,r24
 396 0144 9387      		std Z+11,r25
 173:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[id].set_time =
 398               	.LM25:
 399 0146 2081      		ld r18,Z
 400 0148 3181      		ldd r19,Z+1
 401 014a 4281      		ldd r20,Z+2
 402 014c 5381      		ldd r21,Z+3
 403 014e 260F      		add r18,r22
 404 0150 371F      		adc r19,r23
 405 0152 481F      		adc r20,r24
 406 0154 591F      		adc r21,r25
 407 0156 2483      		std Z+4,r18
 408 0158 3583      		std Z+5,r19
 409 015a 4683      		std Z+6,r20
 410 015c 5783      		std Z+7,r21
 174:../../src/kernel/source/nrk_reserve.c ****     _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
 175:../../src/kernel/source/nrk_reserve.c ****   _nrk_reserve[id].error = (void *) errhandler;
 412               	.LM26:
 413 015e D28A      		std Z+18,r13
 414 0160 C18A      		std Z+17,r12
 415 0162 81E0      		ldi r24,lo8(1)
 416 0164 90E0      		ldi r25,hi8(1)
 417 0166 00C0      		rjmp .L22
 418               	.L19:
 176:../../src/kernel/source/nrk_reserve.c **** 
 177:../../src/kernel/source/nrk_reserve.c ****   return NRK_OK;
 420               	.LM27:
 421 0168 8FEF      		ldi r24,lo8(-1)
 422 016a 9FEF      		ldi r25,hi8(-1)
 423               	.L22:
 424               	/* epilogue: frame size=8 */
 425 016c 2896      		adiw r28,8
 426 016e 0FB6      		in __tmp_reg__,__SREG__
 427 0170 F894      		cli
 428 0172 DEBF      		out __SP_H__,r29
 429 0174 0FBE      		out __SREG__,__tmp_reg__
 430 0176 CDBF      		out __SP_L__,r28
 431 0178 DF91      		pop r29
 432 017a CF91      		pop r28
 433 017c 1F91      		pop r17
 434 017e 0F91      		pop r16
 435 0180 FF90      		pop r15
 436 0182 EF90      		pop r14
 437 0184 DF90      		pop r13
 438 0186 CF90      		pop r12
 439 0188 0895      		ret
 440               	/* epilogue end (size=15) */
 441               	/* function nrk_reserve_set size 127 (96) */
 446               	.Lscope4:
 448               		.stabd	78,0,0
 451               	.global	_nrk_reserve_update
 453               	_nrk_reserve_update:
 454               		.stabd	46,0,0
 456               	.LM28:
 457               	.LFBB5:
 458               	/* prologue: frame size=8 */
 459 018a 0F93      		push r16
 460 018c 1F93      		push r17
 461 018e CF93      		push r28
 462 0190 DF93      		push r29
 463 0192 CDB7      		in r28,__SP_L__
 464 0194 DEB7      		in r29,__SP_H__
 465 0196 2897      		sbiw r28,8
 466 0198 0FB6      		in __tmp_reg__,__SREG__
 467 019a F894      		cli
 468 019c DEBF      		out __SP_H__,r29
 469 019e 0FBE      		out __SREG__,__tmp_reg__
 470 01a0 CDBF      		out __SP_L__,r28
 471               	/* prologue end (size=12) */
 472 01a2 082F      		mov r16,r24
 474               	.LM29:
 475 01a4 0E94 0000 		call nrk_int_disable
 477               	.LM30:
 478 01a8 CE01      		movw r24,r28
 479 01aa 0196      		adiw r24,1
 480 01ac 0E94 0000 		call nrk_time_get
 482               	.LM31:
 483 01b0 1127      		clr r17
 484 01b2 2981      		ldd r18,Y+1
 485 01b4 3A81      		ldd r19,Y+2
 486 01b6 4B81      		ldd r20,Y+3
 487 01b8 5C81      		ldd r21,Y+4
 488 01ba 6D81      		ldd r22,Y+5
 489 01bc 7E81      		ldd r23,Y+6
 490 01be 8F81      		ldd r24,Y+7
 491 01c0 9885      		ldd r25,Y+8
 492 01c2 0E94 0000 		call _nrk_time_to_ticks_long
 493 01c6 9B01      		movw r18,r22
 494 01c8 AC01      		movw r20,r24
 495 01ca 83E1      		ldi r24,lo8(19)
 496 01cc 90E0      		ldi r25,hi8(19)
 497 01ce 089F      		mul r16,r24
 498 01d0 F001      		movw r30,r0
 499 01d2 099F      		mul r16,r25
 500 01d4 F00D      		add r31,r0
 501 01d6 189F      		mul r17,r24
 502 01d8 F00D      		add r31,r0
 503 01da 1124      		clr r1
 504 01dc E050      		subi r30,lo8(-(_nrk_reserve))
 505 01de F040      		sbci r31,hi8(-(_nrk_reserve))
 506 01e0 2087      		std Z+8,r18
 507 01e2 3187      		std Z+9,r19
 508 01e4 4287      		std Z+10,r20
 509 01e6 5387      		std Z+11,r21
 511               	.LM32:
 512 01e8 8481      		ldd r24,Z+4
 513 01ea 9581      		ldd r25,Z+5
 514 01ec A681      		ldd r26,Z+6
 515 01ee B781      		ldd r27,Z+7
 516 01f0 2817      		cp r18,r24
 517 01f2 3907      		cpc r19,r25
 518 01f4 4A07      		cpc r20,r26
 519 01f6 5B07      		cpc r21,r27
 520 01f8 00F0      		brlo .L25
 522               	.LM33:
 523 01fa 8081      		ld r24,Z
 524 01fc 9181      		ldd r25,Z+1
 525 01fe A281      		ldd r26,Z+2
 526 0200 B381      		ldd r27,Z+3
 527 0202 820F      		add r24,r18
 528 0204 931F      		adc r25,r19
 529 0206 A41F      		adc r26,r20
 530 0208 B51F      		adc r27,r21
 531 020a 8483      		std Z+4,r24
 532 020c 9583      		std Z+5,r25
 533 020e A683      		std Z+6,r26
 534 0210 B783      		std Z+7,r27
 536               	.LM34:
 537 0212 1786      		std Z+15,__zero_reg__
 538 0214 1686      		std Z+14,__zero_reg__
 539               	.L25:
 541               	.LM35:
 542 0216 0E94 0000 		call nrk_int_enable
 543               	/* epilogue: frame size=8 */
 544 021a 2896      		adiw r28,8
 545 021c 0FB6      		in __tmp_reg__,__SREG__
 546 021e F894      		cli
 547 0220 DEBF      		out __SP_H__,r29
 548 0222 0FBE      		out __SREG__,__tmp_reg__
 549 0224 CDBF      		out __SP_L__,r28
 550 0226 DF91      		pop r29
 551 0228 CF91      		pop r28
 552 022a 1F91      		pop r17
 553 022c 0F91      		pop r16
 554 022e 0895      		ret
 555               	/* epilogue end (size=11) */
 556               	/* function _nrk_reserve_update size 83 (60) */
 561               	.Lscope5:
 563               		.stabd	78,0,0
 566               	.global	nrk_reserve_consume
 568               	nrk_reserve_consume:
 569               		.stabd	46,0,0
 571               	.LM36:
 572               	.LFBB6:
 573               	/* prologue: frame size=0 */
 574 0230 CF93      		push r28
 575 0232 DF93      		push r29
 576               	/* prologue end (size=2) */
 577 0234 482F      		mov r20,r24
 579               	.LM37:
 580 0236 8530      		cpi r24,lo8(5)
 581 0238 00F0      		brlo .L29
 583               	.LM38:
 584 023a 81E0      		ldi r24,lo8(1)
 585 023c 00C0      		rjmp .L41
 586               	.L29:
 588               	.LM39:
 589 023e 9927      		clr r25
 590 0240 23E1      		ldi r18,lo8(19)
 591 0242 30E0      		ldi r19,hi8(19)
 592 0244 829F      		mul r24,r18
 593 0246 E001      		movw r28,r0
 594 0248 839F      		mul r24,r19
 595 024a D00D      		add r29,r0
 596 024c 929F      		mul r25,r18
 597 024e D00D      		add r29,r0
 598 0250 1124      		clr r1
 599 0252 C050      		subi r28,lo8(-(_nrk_reserve))
 600 0254 D040      		sbci r29,hi8(-(_nrk_reserve))
 601 0256 8889      		ldd r24,Y+16
 602 0258 8F3F      		cpi r24,lo8(-1)
 603 025a 01F4      		brne .L32
 605               	.LM40:
 606 025c 82E0      		ldi r24,lo8(2)
 607               	.L41:
 608 025e 0E94 0000 		call _nrk_errno_set
 609 0262 00C0      		rjmp .L40
 610               	.L32:
 612               	.LM41:
 613 0264 842F      		mov r24,r20
 614 0266 0E94 0000 		call _nrk_reserve_update
 616               	.LM42:
 617 026a 2E85      		ldd r18,Y+14
 618 026c 3F85      		ldd r19,Y+15
 619 026e 8C85      		ldd r24,Y+12
 620 0270 9D85      		ldd r25,Y+13
 621 0272 2817      		cp r18,r24
 622 0274 3907      		cpc r19,r25
 623 0276 04F0      		brlt .L34
 625               	.LM43:
 626 0278 0E94 0000 		call nrk_int_enable
 628               	.LM44:
 629 027c E989      		ldd r30,Y+17
 630 027e FA89      		ldd r31,Y+18
 631 0280 3097      		sbiw r30,0
 632 0282 01F0      		breq .L40
 634               	.LM45:
 635 0284 0995      		icall
 636               	.L40:
 637 0286 8FEF      		ldi r24,lo8(-1)
 638 0288 9FEF      		ldi r25,hi8(-1)
 639 028a 00C0      		rjmp .L31
 640               	.L34:
 642               	.LM46:
 643 028c 2F5F      		subi r18,lo8(-(1))
 644 028e 3F4F      		sbci r19,hi8(-(1))
 645 0290 3F87      		std Y+15,r19
 646 0292 2E87      		std Y+14,r18
 647 0294 81E0      		ldi r24,lo8(1)
 648 0296 90E0      		ldi r25,hi8(1)
 649               	.L31:
 650               	/* epilogue: frame size=0 */
 651 0298 DF91      		pop r29
 652 029a CF91      		pop r28
 653 029c 0895      		ret
 654               	/* epilogue end (size=3) */
 655               	/* function nrk_reserve_consume size 55 (50) */
 657               	.Lscope6:
 659               		.stabd	78,0,0
 662               	.global	nrk_reserve_get
 664               	nrk_reserve_get:
 665               		.stabd	46,0,0
 667               	.LM47:
 668               	.LFBB7:
 669               	/* prologue: frame size=0 */
 670 029e CF93      		push r28
 671 02a0 DF93      		push r29
 672               	/* prologue end (size=2) */
 673 02a2 482F      		mov r20,r24
 675               	.LM48:
 676 02a4 8530      		cpi r24,lo8(5)
 677 02a6 00F0      		brlo .L43
 679               	.LM49:
 680 02a8 81E0      		ldi r24,lo8(1)
 681 02aa 00C0      		rjmp .L51
 682               	.L43:
 684               	.LM50:
 685 02ac 9927      		clr r25
 686 02ae 23E1      		ldi r18,lo8(19)
 687 02b0 30E0      		ldi r19,hi8(19)
 688 02b2 829F      		mul r24,r18
 689 02b4 E001      		movw r28,r0
 690 02b6 839F      		mul r24,r19
 691 02b8 D00D      		add r29,r0
 692 02ba 929F      		mul r25,r18
 693 02bc D00D      		add r29,r0
 694 02be 1124      		clr r1
 695 02c0 C050      		subi r28,lo8(-(_nrk_reserve))
 696 02c2 D040      		sbci r29,hi8(-(_nrk_reserve))
 697 02c4 8889      		ldd r24,Y+16
 698 02c6 8F3F      		cpi r24,lo8(-1)
 699 02c8 01F4      		brne .L46
 701               	.LM51:
 702 02ca 82E0      		ldi r24,lo8(2)
 703               	.L51:
 704 02cc 0E94 0000 		call _nrk_errno_set
 705               	.L52:
 706 02d0 80E0      		ldi r24,lo8(0)
 707 02d2 90E0      		ldi r25,hi8(0)
 708 02d4 00C0      		rjmp .L45
 709               	.L46:
 711               	.LM52:
 712 02d6 842F      		mov r24,r20
 713 02d8 0E94 0000 		call _nrk_reserve_update
 715               	.LM53:
 716 02dc 2E85      		ldd r18,Y+14
 717 02de 3F85      		ldd r19,Y+15
 718 02e0 8C85      		ldd r24,Y+12
 719 02e2 9D85      		ldd r25,Y+13
 720 02e4 8217      		cp r24,r18
 721 02e6 9307      		cpc r25,r19
 722 02e8 04F0      		brlt .L52
 724               	.LM54:
 725 02ea 821B      		sub r24,r18
 726 02ec 9927      		clr r25
 727               	.L45:
 728               	/* epilogue: frame size=0 */
 729 02ee DF91      		pop r29
 730 02f0 CF91      		pop r28
 731 02f2 0895      		ret
 732               	/* epilogue end (size=3) */
 733               	/* function nrk_reserve_get size 43 (38) */
 735               	.Lscope7:
 737               		.stabd	78,0,0
 738               		.comm _nrk_signal_list,4,1
 739               		.comm nrk_idle_task_stk,128,1
 740               		.comm nrk_kernel_stk_ptr,2,1
 741               		.comm error_task,1,1
 742               		.comm error_num,1,1
 743               		.comm _nrk_reserve,95,1
 751               	.Letext0:
 752               	/* File "../../src/kernel/source/nrk_reserve.c": code  378 = 0x017a ( 312), prologues  32, epilogue
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_reserve.c
     /tmp/ccd35T2B.s:2      *ABS*:0000003f __SREG__
     /tmp/ccd35T2B.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccd35T2B.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccd35T2B.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccd35T2B.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccd35T2B.s:129    .text:00000000 _nrk_reserve_init
                            *COM*:0000005f _nrk_reserve
     /tmp/ccd35T2B.s:155    .text:00000018 nrk_reserve_create
     /tmp/ccd35T2B.s:220    .text:00000058 nrk_reserve_delete
     /tmp/ccd35T2B.s:282    .text:0000008c nrk_reserve_set
     /tmp/ccd35T2B.s:453    .text:0000018a _nrk_reserve_update
     /tmp/ccd35T2B.s:568    .text:00000230 nrk_reserve_consume
     /tmp/ccd35T2B.s:664    .text:0000029e nrk_reserve_get
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_time_to_ticks_long
nrk_time_get
nrk_int_disable
nrk_int_enable
_nrk_errno_set
